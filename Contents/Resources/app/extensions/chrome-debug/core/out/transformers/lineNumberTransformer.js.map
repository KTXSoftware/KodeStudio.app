{"version":3,"file":"transformers/lineNumberTransformer.js","sourceRoot":"../../src","sources":["transformers/lineNumberTransformer.ts"],"names":[],"mappings":"AAAA;;4DAE4D;;AAM5D;;GAEG;AACH;IAII,+BAAY,mBAA4B;QACpC,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;IACpD,CAAC;IAEM,0CAAU,GAAjB,UAAkB,IAA8C;QAC5D,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,aAAa,CAAC;IACnD,CAAC;IAEM,8CAAc,GAArB,UAAsB,IAA2C;QAAjE,iBAEC;QADG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAApC,CAAoC,CAAC,CAAC;IAC9E,CAAC;IAEM,sDAAsB,GAA7B,UAA8B,QAAqC;QAAnE,iBAEC;QADG,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,IAAI,GAAG,KAAI,CAAC,yBAAyB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAjD,CAAiD,CAAC,CAAC;IAC1F,CAAC;IAEM,kDAAkB,GAAzB,UAA0B,QAAiC;QAA3D,iBAEC;QADG,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,GAAG,KAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAvD,CAAuD,CAAC,CAAC;IACnG,CAAC;IAEO,yDAAyB,GAAjC,UAAkC,IAAY;QAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;QACvD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC;IACvD,CAAC;IAEO,yDAAyB,GAAjC,UAAkC,IAAY;QAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;QACvD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC;IACvD,CAAC;IACL,4BAAC;AAAD,CAAC,AAvCD,IAuCC;AAvCY,6BAAqB,wBAuCjC,CAAA","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport {DebugProtocol} from 'vscode-debugprotocol';\n\nimport {IDebugTransformer, ISetBreakpointsResponseBody, IStackTraceResponseBody} from '../chrome/debugAdapterInterfaces';\n\n/**\n * Converts from 1 based lines on the client side to 0 based lines on the target side\n */\nexport class LineNumberTransformer implements IDebugTransformer  {\n    private _targetLinesStartAt1: boolean;\n    private _clientLinesStartAt1: boolean;\n\n    constructor(targetLinesStartAt1: boolean) {\n        this._targetLinesStartAt1 = targetLinesStartAt1;\n    }\n\n    public initialize(args: DebugProtocol.InitializeRequestArguments): void {\n        this._clientLinesStartAt1 = args.linesStartAt1;\n    }\n\n    public setBreakpoints(args: DebugProtocol.SetBreakpointsArguments): void {\n        args.lines = args.lines.map(line => this.convertClientLineToTarget(line));\n    }\n\n    public setBreakpointsResponse(response: ISetBreakpointsResponseBody): void {\n        response.breakpoints.forEach(bp => bp.line = this.convertTargetLineToClient(bp.line));\n    }\n\n    public stackTraceResponse(response: IStackTraceResponseBody): void {\n        response.stackFrames.forEach(frame => frame.line = this.convertTargetLineToClient(frame.line));\n    }\n\n    private convertClientLineToTarget(line: number): number {\n        if (this._targetLinesStartAt1) {\n            return this._clientLinesStartAt1 ? line : line + 1;\n        }\n\n        return this._clientLinesStartAt1 ? line - 1 : line;\n    }\n\n    private convertTargetLineToClient(line: number): number {\n        if (this._targetLinesStartAt1) {\n            return this._clientLinesStartAt1 ? line : line - 1;\n        }\n\n        return this._clientLinesStartAt1 ? line + 1 : line;\n    }\n}\n"]}