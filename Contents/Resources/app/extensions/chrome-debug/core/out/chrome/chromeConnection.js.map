{"version":3,"file":"chrome/chromeConnection.js","sourceRoot":"../../src","sources":["chrome/chromeConnection.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as WebSocket from 'ws';\nimport {EventEmitter} from 'events';\n\nimport * as utils from '../utils';\nimport * as logger from '../logger';\nimport * as chromeUtils from './chromeUtils';\nimport * as Chrome from './chromeDebugProtocol';\n\ninterface IMessageWithId {\n    id: number;\n    method: string;\n    params?: string[];\n}\n\n/**\n * Implements a Request/Response API on top of a WebSocket for messages that are marked with an `id` property.\n * Emits `message.method` for messages that don't have `id`.\n */\nclass ResReqWebSocket extends EventEmitter {\n    private _pendingRequests = new Map<number, any>();\n    private _wsAttached: Promise<WebSocket>;\n\n    public get isOpen(): boolean { return !!this._wsAttached; }\n\n    /**\n     * Attach to the given websocket url\n     */\n    public open(wsUrl: string): Promise<void> {\n        this._wsAttached = new Promise((resolve, reject) => {\n            let ws: WebSocket;\n            try {\n                ws = new WebSocket(wsUrl);\n            } catch (e) {\n                // invalid url e.g.\n                reject(e.message);\n                return;\n            }\n\n            // WebSocket will try to connect for 20+ seconds before timing out.\n            // Implement a shorter timeout here\n            setTimeout(() => reject('WebSocket connection timed out'), 10000);\n\n            // if 'error' is fired while connecting, reject the promise\n            ws.on('error', reject);\n            ws.on('open', () => {\n                // Replace the promise-rejecting handler\n                ws.removeListener('error', reject);\n\n                ws.on('error', e => {\n                    logger.log('Websocket error: ' + e.toString());\n                    this.emit('error', e);\n                });\n\n                resolve(ws);\n            });\n            ws.on('message', msgStr => {\n                const msgObj = JSON.parse(msgStr);\n                if (msgObj\n                    && !(msgObj.method === 'Debugger.scriptParsed' && msgObj.params && msgObj.params.isContentScript)\n                    && !(msgObj.params && msgObj.params.url && msgObj.params.url.indexOf('extensions::') === 0)) {\n                    // Not really the right place to examine the content of the message, but don't log annoying extension script notifications.\n                    logger.verbose('From target: ' + msgStr);\n                }\n\n                this.onMessage(msgObj);\n            });\n            ws.on('close', () => {\n                logger.log('Websocket closed');\n                this.emit('close');\n            });\n        });\n\n        return <Promise<void>><any>this._wsAttached;\n    }\n\n    public close(): void {\n        if (this._wsAttached) {\n            this._wsAttached.then(ws => ws.close());\n            this._wsAttached = null;\n        }\n    }\n\n    /**\n     * Send a message which must have an id. Ok to call immediately after attach. Messages will be queued until\n     * the websocket actually attaches.\n     */\n    public sendMessage(message: IMessageWithId): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this._pendingRequests.set(message.id, resolve);\n            this._wsAttached.then(ws => {\n                const msgStr = JSON.stringify(message);\n                logger.verbose('To target: ' + msgStr);\n                ws.send(msgStr);\n            });\n        });\n    }\n\n    /**\n     * Wrap EventEmitter.emit in try/catch and log, for errors thrown in subscribers\n     */\n    public emit(event: string, ...args: any[]): boolean {\n        try {\n            return super.emit.apply(this, arguments);\n        } catch (e) {\n            logger.error('Error while handling target event: ' + e.stack);\n        }\n    }\n\n    private onMessage(message: any): void {\n        if (typeof message.id === 'number') {\n            if (this._pendingRequests.has(message.id)) {\n                // Resolve the pending request with this response\n                this._pendingRequests.get(message.id)(message);\n                this._pendingRequests.delete(message.id);\n            } else {\n                logger.error(`Got a response with id ${message.id} for which there is no pending request.`);\n            }\n        } else if (message.method) {\n            this.emit(message.method, message.params);\n        } else {\n            // Message is malformed - safely stringify and log it\n            let messageStr: string;\n            try {\n                messageStr = JSON.stringify(message);\n            } catch (e) {\n                messageStr = '' + message;\n            }\n\n            logger.error(`Got a response with no id nor method property: ${messageStr}`);\n        }\n    }\n}\n\nexport type ITargetFilter = (target: Chrome.ITarget) => boolean;\n\n/**\n * Connects to a target supporting the Chrome Debug Protocol and sends and receives messages\n */\nexport class ChromeConnection {\n    private _nextId: number;\n    private _socket: ResReqWebSocket;\n    private _targetFilter: ITargetFilter;\n\n    constructor(targetFilter?: ITargetFilter) {\n        // Take the custom targetFilter, default to returning all targets\n        this._targetFilter = targetFilter || (target => true);\n\n        // this._socket should exist before attaching so consumers can call on() before attach, which fires events\n        this.reset();\n    }\n\n    public get isAttached(): boolean { return this._socket.isOpen; }\n\n    public on(eventName: string, handler: (msg: any) => void): void {\n        this._socket.on(eventName, handler);\n    }\n\n    /**\n     * Attach the websocket to the first available tab in the chrome instance with the given remote debugging port number.\n     */\n    public attach(port: number, url?: string, address?: string): Promise<void> {\n        return utils.retryAsync(() => this._attach(port, url, address), /*timeoutMs*/ 6000)\n            .then(() => this.sendMessage('Debugger.enable'))\n            .then(() => this.sendMessage('Console.enable'))\n            .then(() => { });\n    }\n\n    public _attach(port: number, targetUrl?: string, address?: string): Promise<void> {\n        address = address || '127.0.0.1';\n        logger.log(`Attempting to attach on ${address}:${port}`);\n        return utils.getURL(`http://${address}:${port}/json`).then(jsonResponse => {\n            // Validate every step of processing the response\n            try {\n                const responseArray = JSON.parse(jsonResponse);\n                if (Array.isArray(responseArray)) {\n                    // Filter out some targets as specified by the extension\n                    let targets = responseArray.filter(this._targetFilter);\n\n                    if (targetUrl) {\n                        // If a url was specified, try to filter to that url\n                        const filteredTargets = chromeUtils.getMatchingTargets(targets, targetUrl);\n                        if (filteredTargets.length) {\n                            targets = filteredTargets;\n                        } else {\n                            logger.error(`Warning: Can't find a target that matches: ${targetUrl}. Available pages: ${JSON.stringify(targets.map(target => target.url))}`);\n                        }\n                    }\n\n                    if (targets.length) {\n                        if (targets.length > 1) {\n                            logger.error('Warning: Found more than one valid target page. Attaching to the first one. Available pages: ' + JSON.stringify(targets.map(target => target.url)));\n                        }\n\n                        const wsUrl = targets[0].webSocketDebuggerUrl;\n                        logger.verbose(`WebSocket Url: ${wsUrl}`);\n                        if (wsUrl) {\n                            return this._socket.open(wsUrl);\n                        }\n                    }\n                }\n            } catch (e) {\n                // JSON.parse can throw\n            }\n\n            return utils.errP('Got response from target app, but no valid target pages found');\n        },\n        e => {\n            return utils.errP('Cannot connect to the target: ' + e.message);\n        });\n    }\n\n    public close(): void {\n        this._socket.close();\n        this.reset();\n    }\n\n    private reset(): void {\n        this._nextId = 1;\n        this._socket = new ResReqWebSocket();\n    }\n\n    public debugger_setBreakpoint(location: Chrome.Debugger.Location, condition?: string): Promise<Chrome.Debugger.SetBreakpointResponse> {\n        return this.sendMessage('Debugger.setBreakpoint', <Chrome.Debugger.SetBreakpointParams>{ location, condition });\n    }\n\n    public debugger_setBreakpointByUrl(url: string, lineNumber: number, columnNumber: number): Promise<Chrome.Debugger.SetBreakpointByUrlResponse> {\n        return this.sendMessage('Debugger.setBreakpointByUrl', <Chrome.Debugger.SetBreakpointByUrlParams>{ url, lineNumber, columnNumber });\n    }\n\n    public debugger_removeBreakpoint(breakpointId: string): Promise<Chrome.Response> {\n        return this.sendMessage('Debugger.removeBreakpoint', <Chrome.Debugger.RemoveBreakpointParams>{ breakpointId });\n    }\n\n    public debugger_stepOver(): Promise<Chrome.Response> {\n        return this.sendMessage('Debugger.stepOver');\n    }\n\n    public debugger_stepIn(): Promise<Chrome.Response> {\n        return this.sendMessage('Debugger.stepInto');\n    }\n\n    public debugger_stepOut(): Promise<Chrome.Response> {\n        return this.sendMessage('Debugger.stepOut');\n    }\n\n    public debugger_resume(): Promise<Chrome.Response> {\n        return this.sendMessage('Debugger.resume');\n    }\n\n    public debugger_pause(): Promise<Chrome.Response> {\n        return this.sendMessage('Debugger.pause');\n    }\n\n    public debugger_evaluateOnCallFrame(callFrameId: string, expression: string, objectGroup = 'dummyObjectGroup', returnByValue?: boolean): Promise<Chrome.Debugger.EvaluateOnCallFrameResponse> {\n        return this.sendMessage('Debugger.evaluateOnCallFrame', <Chrome.Debugger.EvaluateOnCallFrameParams>{ callFrameId, expression, objectGroup, returnByValue });\n    }\n\n    public debugger_setPauseOnExceptions(state: string): Promise<Chrome.Response> {\n        return this.sendMessage('Debugger.setPauseOnExceptions', <Chrome.Debugger.SetPauseOnExceptionsParams>{ state });\n    }\n\n    public debugger_getScriptSource(scriptId: Chrome.Debugger.ScriptId): Promise<Chrome.Debugger.GetScriptSourceResponse> {\n        return this.sendMessage('Debugger.getScriptSource', <Chrome.Debugger.GetScriptSourceParams>{ scriptId });\n    }\n\n    public runtime_getProperties(objectId: string, ownProperties: boolean, accessorPropertiesOnly: boolean): Promise<Chrome.Runtime.GetPropertiesResponse> {\n        return this.sendMessage('Runtime.getProperties', <Chrome.Runtime.GetPropertiesParams>{ objectId, ownProperties, accessorPropertiesOnly });\n    }\n\n    public runtime_evaluate(expression: string, objectGroup = 'dummyObjectGroup', contextId?: number, returnByValue = false): Promise<Chrome.Runtime.EvaluateResponse> {\n        return this.sendMessage('Runtime.evaluate', <Chrome.Runtime.EvaluateParams>{ expression, objectGroup, contextId, returnByValue });\n    }\n\n    public page_setOverlayMessage(message: string): Promise<Chrome.Response> {\n        return this.sendMessage('Page.setOverlayMessage', { message });\n    }\n\n    public page_clearOverlayMessage(): Promise<Chrome.Response> {\n        return this.sendMessage('Page.setOverlayMessage');\n    }\n\n    private sendMessage(method: any, params?: any): Promise<Chrome.Response> {\n        return this._socket.sendMessage({\n            id: this._nextId++,\n            method,\n            params\n        });\n    }\n}\n"]}