{"version":3,"file":"chrome/chromeDebugSession.js","sourceRoot":"../../src","sources":["chrome/chromeDebugSession.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as os from 'os';\nimport {DebugProtocol} from 'vscode-debugprotocol';\nimport {DebugSession, ErrorDestination, OutputEvent} from 'vscode-debugadapter';\n\nimport {IDebugAdapter} from './debugAdapterInterfaces';\nimport {ChromeDebugAdapter} from './chromeDebugAdapter';\nimport {ChromeConnection, ITargetFilter} from './chromeConnection';\n\nimport * as logger from '../logger';\n\nimport {AdapterProxy} from '../adapterProxy';\nimport {LineNumberTransformer} from '../transformers/lineNumberTransformer';\nimport {PathTransformer} from '../transformers/pathTransformer';\nimport {SourceMapTransformer} from '../transformers/sourceMapTransformer';\n\nexport interface IChromeDebugSessionOpts {\n    adapter?: IDebugAdapter;\n    targetFilter?: ITargetFilter;\n    logFileDirectory?: string;\n}\n\nexport class ChromeDebugSession extends DebugSession {\n    private _adapterProxy: AdapterProxy;\n\n    /**\n     * This needs a bit of explanation -\n     * We call DebugSession.run to create the connection to VS Code, which takes a Class extending DebugSession,\n     * not an instance. That's problematic because a class can't be naturally configured the way an instance\n     * would be. So this factory function dynamically creates a class which has 'opts' in a closure and can\n     * instantiate ChromeDebugSession with it. Otherwise all consumers would need to subclass ChromeDebugSession\n     * in a sort of non-obvious way.\n     */\n    public static getSession(opts: IChromeDebugSessionOpts): typeof ChromeDebugSession {\n        // class expression!\n        return class extends ChromeDebugSession {\n            constructor(\n                targetLinesStartAt1: boolean,\n                isServer = false) {\n                super(targetLinesStartAt1, isServer, opts);\n            }\n        };\n    }\n\n    public constructor(\n        targetLinesStartAt1: boolean,\n        isServer = false,\n        opts: IChromeDebugSessionOpts = {}) {\n        super(targetLinesStartAt1, isServer);\n\n        const connection = new ChromeConnection(opts.targetFilter);\n        const adapter = opts.adapter || new ChromeDebugAdapter(connection);\n        const logFileDirectory = opts.logFileDirectory;\n\n        logger.init((msg, level) => this.onLog(msg, level), logFileDirectory);\n        logVersionInfo();\n\n        process.addListener('unhandledRejection', reason => {\n            logger.error(`******** Error in DebugAdapter - Unhandled promise rejection: ${reason}`);\n        });\n\n        this._adapterProxy = new AdapterProxy(\n            [\n                new LineNumberTransformer(targetLinesStartAt1),\n                new SourceMapTransformer(),\n                new PathTransformer()\n            ],\n            adapter,\n            event => this.sendEvent(event));\n    }\n\n    /**\n     * Overload sendEvent to log\n     */\n    public sendEvent(event: DebugProtocol.Event): void {\n        if (event.event !== 'output') {\n            // Don't create an infinite loop...\n            logger.verbose(`To client: ${JSON.stringify(event)}`);\n        }\n\n        super.sendEvent(event);\n    }\n\n    /**\n     * Overload sendResponse to log\n     */\n    public sendResponse(response: DebugProtocol.Response): void {\n        logger.verbose(`To client: ${JSON.stringify(response)}`);\n        super.sendResponse(response);\n    }\n\n    private onLog(msg: string, level: logger.LogLevel): void {\n        const outputCategory = level === logger.LogLevel.Error ? 'stderr' : undefined;\n        this.sendEvent(new OutputEvent(`  â€º${msg}\\n`, outputCategory));\n    }\n\n    /**\n     * Takes a response and a promise to the response body. If the promise is successful, assigns the response body and sends the response.\n     * If the promise fails, sets the appropriate response parameters and sends the response.\n     */\n    private sendResponseAsync(request: DebugProtocol.Request, response: DebugProtocol.Response, responseP: Promise<any>): void {\n        responseP.then(\n            (body?) => {\n                response.body = body;\n                this.sendResponse(response);\n            },\n            e => {\n                const eStr = e ? e.message : 'Unknown error';\n                if (eStr === 'Error: unknowncommand') {\n                    this.sendErrorResponse(response, 1014, '[debugger-for-chrome] Unrecognized request: ' + request.command, null, ErrorDestination.Telemetry);\n                    return;\n                }\n\n                if (request.command === 'evaluate') {\n                    // Errors from evaluate show up in the console or watches pane. Doesn't seem right\n                    // as it's not really a failed request. So it doesn't need the tag and worth special casing.\n                    response.message = eStr;\n                } else {\n                    // These errors show up in the message bar at the top (or nowhere), sometimes not obvious that they\n                    // come from the adapter\n                    response.message = '[debugger-for-chrome] ' + eStr;\n                    logger.log('Error: ' + e ? e.stack : eStr);\n                }\n\n                response.success = false;\n                this.sendResponse(response);\n            });\n    }\n\n    /**\n     * Overload dispatchRequest to dispatch to the adapter proxy instead of debugSession's methods for each request.\n     */\n    protected dispatchRequest(request: DebugProtocol.Request): void {\n        const response = new Response(request);\n        try {\n            logger.verbose(`From client: ${request.command}(${JSON.stringify(request.arguments) })`);\n            this.sendResponseAsync(\n                request,\n                response,\n                this._adapterProxy.dispatchRequest(request));\n        } catch (e) {\n            this.sendErrorResponse(response, 1104, 'Exception while processing request (exception: {_exception})', { _exception: e.message }, ErrorDestination.Telemetry);\n        }\n    }\n}\n\nfunction logVersionInfo(): void {\n    logger.log(`OS: ${os.platform()} ${os.arch()}`);\n    logger.log('Node: ' + process.version);\n    logger.log('vscode-chrome-debug-core: ' + require('../../../package.json').version);\n}\n\n/**\n * Classes copied from vscode-debugadapter - consider exporting these instead\n */\n\nclass Message implements DebugProtocol.ProtocolMessage {\n    public seq: number;\n    public type: string;\n\n    public constructor(type: string) {\n        this.seq = 0;\n        this.type = type;\n    }\n}\n\nclass Response extends Message implements DebugProtocol.Response {\n    public request_seq: number;\n    public success: boolean;\n    public command: string;\n\n    public constructor(request: DebugProtocol.Request, message?: string) {\n        super('response');\n        this.request_seq = request.seq;\n        this.command = request.command;\n        if (message) {\n            this.success = false;\n            (<any>this).message = message;\n        } else {\n            this.success = true;\n        }\n    }\n}\n"]}