{"version":3,"file":"chrome/chromeDebugAdapter.js","sourceRoot":"../../src","sources":["chrome/chromeDebugAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport {DebugProtocol} from 'vscode-debugprotocol';\nimport {StoppedEvent, InitializedEvent, TerminatedEvent, OutputEvent, Handles, Event} from 'vscode-debugadapter';\n\nimport {IDebugAdapter, ILaunchRequestArgs, ISetBreakpointsArgs, ISetBreakpointsResponseBody, IStackTraceResponseBody,\n    IAttachRequestArgs, IBreakpoint, IScopesResponseBody, IVariablesResponseBody,\n    ISourceResponseBody, IThreadsResponseBody, IEvaluateResponseBody} from './debugAdapterInterfaces';\nimport {ChromeConnection} from './chromeConnection';\nimport * as ChromeUtils from './chromeUtils';\nimport * as utils from '../utils';\nimport * as logger from '../logger';\nimport {formatConsoleMessage} from './consoleHelper';\nimport * as Chrome from './chromeDebugProtocol';\n\nimport {spawn, fork, ChildProcess} from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ninterface IScopeVarHandle {\n    objectId: string;\n    thisObj?: Chrome.Runtime.RemoteObject;\n}\n\nexport class ChromeDebugAdapter implements IDebugAdapter {\n    private static THREAD_ID = 1;\n    private static PAGE_PAUSE_MESSAGE = 'Paused in Kode Studio';\n    private static EXCEPTION_VALUE_ID = 'EXCEPTION_VALUE_ID';\n    private static PLACEHOLDER_URL_PROTOCOL = 'debugadapter://';\n\n    private _clientAttached: boolean;\n    private _variableHandles: Handles<IScopeVarHandle>;\n    private _currentStack: Chrome.Debugger.CallFrame[];\n    private _committedBreakpointsByUrl: Map<string, Chrome.Debugger.BreakpointId[]>;\n    private _overlayHelper: utils.DebounceHelper;\n    private _exceptionValueObject: Chrome.Runtime.RemoteObject;\n    private _expectingResumedEvent: boolean;\n    private _setBreakpointsRequestQ: Promise<any>;\n\n    private _scriptsById: Map<Chrome.Debugger.ScriptId, Chrome.Debugger.Script>;\n    private _scriptsByUrl: Map<string, Chrome.Debugger.Script>;\n\n    private _chromeProc: ChildProcess;\n    private _chromeConnection: ChromeConnection;\n    private _eventHandler: (event: DebugProtocol.Event) => void;\n\n    public constructor(chromeConnection: ChromeConnection) {\n        this._chromeConnection = chromeConnection;\n        this._variableHandles = new Handles<IScopeVarHandle>();\n        this._overlayHelper = new utils.DebounceHelper(/*timeoutMs=*/200);\n\n        this.clearEverything();\n    }\n\n    private get paused(): boolean {\n        return !!this._currentStack;\n    }\n\n    private clearTargetContext(): void {\n        this._scriptsById = new Map<Chrome.Debugger.ScriptId, Chrome.Debugger.Script>();\n        this._scriptsByUrl = new Map<string, Chrome.Debugger.Script>();\n\n        this._committedBreakpointsByUrl = new Map<string, Chrome.Debugger.BreakpointId[]>();\n        this._setBreakpointsRequestQ = Promise.resolve<void>();\n\n        this.fireEvent(new Event('clearTargetContext'));\n    }\n\n    private clearClientContext(): void {\n        this._clientAttached = false;\n        this.fireEvent(new Event('clearClientContext'));\n    }\n\n    public registerEventHandler(eventHandler: (event: DebugProtocol.Event) => void): void {\n        this._eventHandler = eventHandler;\n    }\n\n    public initialize(args: DebugProtocol.InitializeRequestArguments): DebugProtocol.Capabilites {\n        // This debug adapter supports two exception breakpoint filters\n        return {\n            exceptionBreakpointFilters: [\n                {\n                    label: 'All Exceptions',\n                    filter: 'all',\n                    default: false\n                },\n                {\n                    label: 'Uncaught Exceptions',\n                    filter: 'uncaught',\n                    default: true\n                }\n            ]\n        };\n    }\n\n    public launch(args: ILaunchRequestArgs): Promise<void> {\n        this.setupLogging(args);\n\n        this.fireEvent(new OutputEvent('Using Kha from ' + args.kha + '\\n', 'stdout'));\n\n        return new Promise<void>((resolve, reject) => {\n            let options = {\n                from: args.cwd,\n                to: path.join(args.cwd, 'build'),\n                projectfile: 'khafile.js',\n                target: 'debug-html5',\n                vr: 'none',\n                pch: false,\n                intermediate: '',\n                graphics: 'direct3d9',\n                visualstudio: 'vs2015',\n                kha: '',\n                haxe: '',\n                ogg: '',\n                aac: '',\n                mp3: '',\n                h264: '',\n                webm: '',\n                wmv: '',\n                theora: '',\n                kfx: '',\n                krafix: '',\n                ffmpeg: args.ffmpeg,\n                nokrafix: false,\n                embedflashassets: false,\n                compile: false,\n                run: false,\n                init: false,\n                name: 'Project',\n                server: false,\n                port: 8080,\n                debug: false,\n                silent: false\n            };\n\n            let success = false;\n            try {\n                success = require(path.join(args.kha, 'Tools/khamake/main.js'))\n                    .run(options, {\n                        info: message => {\n                            this.fireEvent(new OutputEvent(message + '\\n', 'stdout'));\n                        }, error: message => {\n                            this.fireEvent(new OutputEvent(message + '\\n', 'stderr'));\n                        }\n                    }, function (name) { });\n            }\n            catch (error) {\n                this.fireEvent(new OutputEvent('Error: ' + error.toString() + '\\n', 'stderr'));\n            }\n\n            if (!success) {\n                this.fireEvent(new OutputEvent('Launch canceled.\\n', 'stderr'));\n                resolve();\n                this.fireEvent(new TerminatedEvent());\n                this.clearEverything();\n            } else {\n                // Check exists?\n                const chromePath = args.runtimeExecutable;\n                let chromeDir = chromePath;\n                if (chromePath.lastIndexOf('/') >= 0)\n                    chromeDir = chromePath.substring(0, chromePath.lastIndexOf('/'));\n                else if (chromePath.lastIndexOf('\\\\') >= 0)\n                    chromeDir = chromePath.substring(0, chromePath.lastIndexOf('\\\\'));\n\n                // Start with remote debugging enabled\n                const port = args.port || Math.floor((Math.random() * 10000) + 10000);\n                const chromeArgs: string[] = ['--chromedebug', '--remote-debugging-port=' + port];\n\n                chromeArgs.push(path.resolve(args.cwd, args.file));\n\n                let launchUrl: string;\n                if (args.file) {\n                    launchUrl = utils.pathToFileURL(path.join(args.cwd, args.file, 'index.html'));\n                } else if (args.url) {\n                    launchUrl = args.url;\n                }\n\n                logger.log(`spawn('${chromePath}', ${JSON.stringify(chromeArgs) })`);\n                this._chromeProc = spawn(chromePath, chromeArgs, {\n                    detached: true,\n                    stdio: ['ignore'],\n                    cwd: chromeDir\n                });\n                this._chromeProc.unref();\n                this._chromeProc.on('error', (err) => {\n                    logger.log('chrome error: ' + err);\n                    this.terminateSession();\n                });\n\n                this._attach(port, launchUrl, args.address).then(() => {\n                    resolve();\n                });\n            }\n        });\n    }\n\n    public attach(args: IAttachRequestArgs): Promise<void> {\n        if (args.port == null) {\n            return utils.errP('The \"port\" field is required in the attach config.');\n        }\n\n        this.setupLogging(args);\n\n        return this._attach(args.port, args.url, args.address);\n    }\n\n    public setupLogging(args: IAttachRequestArgs | ILaunchRequestArgs): void {\n        const minLogLevel =\n            args.verboseDiagnosticLogging ?\n                logger.LogLevel.Verbose :\n            args.diagnosticLogging ?\n                logger.LogLevel.Log :\n                logger.LogLevel.Error;\n        logger.setMinLogLevel(minLogLevel);\n\n        if (!args.webRoot) {\n            logger.log('WARNING: \"webRoot\" is not set - if resolving sourcemaps fails, please set the \"webRoot\" property in the launch config.');\n        }\n    }\n\n    /**\n     * Chrome is closing, or error'd somehow, stop the debug session\n     */\n    public terminateSession(): void {\n        if (this._clientAttached) {\n            this.fireEvent(new TerminatedEvent());\n        }\n\n        this.clearEverything();\n    }\n\n    public clearEverything(): void {\n        this.clearClientContext();\n        this.clearTargetContext();\n        this._chromeProc = null;\n\n        if (this._chromeConnection.isAttached) {\n            this._chromeConnection.close();\n        }\n    }\n\n    private _attach(port: number, url?: string, address?: string): Promise<void> {\n        // Client is attaching - if not attached to the chrome target, create a connection and attach\n        this._clientAttached = true;\n        if (!this._chromeConnection.isAttached) {\n            this._chromeConnection.on('Debugger.paused', params => this.onDebuggerPaused(params));\n            this._chromeConnection.on('Debugger.resumed', () => this.onDebuggerResumed());\n            this._chromeConnection.on('Debugger.scriptParsed', params => this.onScriptParsed(params));\n            this._chromeConnection.on('Debugger.globalObjectCleared', () => this.onGlobalObjectCleared());\n            this._chromeConnection.on('Debugger.breakpointResolved', params => this.onBreakpointResolved(params));\n\n            this._chromeConnection.on('Console.messageAdded', params => this.onConsoleMessage(params));\n\n            this._chromeConnection.on('Inspector.detached', () => this.terminateSession());\n            this._chromeConnection.on('close', () => this.terminateSession());\n            this._chromeConnection.on('error', () => this.terminateSession());\n\n            return this._chromeConnection.attach(port, url, address).then(\n                () => this.fireEvent(new InitializedEvent()),\n                e => {\n                    this.clearEverything();\n                    return utils.errP(e);\n                });\n        } else {\n            return Promise.resolve<void>();\n        }\n    }\n\n    private fireEvent(event: DebugProtocol.Event): void {\n        if (this._eventHandler) {\n            this._eventHandler(event);\n        }\n    }\n\n    /**\n     * e.g. the target navigated\n     */\n    private onGlobalObjectCleared(): void {\n        this.clearTargetContext();\n    }\n\n    private onDebuggerPaused(notification: Chrome.Debugger.PausedParams): void {\n\n        this._overlayHelper.doAndCancel(() => this._chromeConnection.page_setOverlayMessage(ChromeDebugAdapter.PAGE_PAUSE_MESSAGE));\n        this._currentStack = notification.callFrames;\n\n        // We can tell when we've broken on an exception. Otherwise if hitBreakpoints is set, assume we hit a\n        // breakpoint. If not set, assume it was a step. We can't tell the difference between step and 'break on anything'.\n        let reason: string;\n        let exceptionText: string;\n        if (notification.reason === 'exception') {\n            reason = 'exception';\n            if (notification.data && this._currentStack.length) {\n                // Insert a scope to wrap the exception object. exceptionText is unused by Code at the moment.\n                const remoteObjValue = ChromeUtils.remoteObjectToValue(notification.data, /*stringify=*/false);\n                let scopeObject: Chrome.Runtime.RemoteObject;\n\n                if (remoteObjValue.variableHandleRef) {\n                    // If the remote object is an object (probably an Error), treat the object like a scope.\n                    exceptionText = notification.data.description;\n                    scopeObject = notification.data;\n                } else {\n                    // If it's a value, use a special flag and save the value for later.\n                    exceptionText = notification.data.value;\n                    scopeObject = <any>{ objectId: ChromeDebugAdapter.EXCEPTION_VALUE_ID };\n                    this._exceptionValueObject = notification.data;\n                }\n\n                this._currentStack[0].scopeChain.unshift({ type: 'Exception', object: scopeObject });\n            }\n        } else {\n            reason = (notification.hitBreakpoints && notification.hitBreakpoints.length) ? 'breakpoint' : 'step';\n        }\n\n        this.fireEvent(new StoppedEvent(reason, /*threadId=*/ChromeDebugAdapter.THREAD_ID, exceptionText));\n    }\n\n    private onDebuggerResumed(): void {\n        this._overlayHelper.wait(() => this._chromeConnection.page_clearOverlayMessage());\n        this._currentStack = null;\n\n        if (!this._expectingResumedEvent) {\n            // This is a private undocumented event provided by VS Code to support the 'continue' button on a paused Chrome page\n            let resumedEvent = new Event('continued', { threadId: ChromeDebugAdapter.THREAD_ID });\n            this.fireEvent(resumedEvent);\n        } else {\n            this._expectingResumedEvent = false;\n        }\n    }\n\n    private onScriptParsed(script: Chrome.Debugger.Script): void {\n        // Totally ignore extension scripts, internal Chrome scripts, and so on\n        if (this.shouldIgnoreScript(script)) {\n            return;\n        }\n\n        if (!script.url) {\n            script.url = ChromeDebugAdapter.PLACEHOLDER_URL_PROTOCOL + script.scriptId;\n        }\n\n        this._scriptsById.set(script.scriptId, script);\n        this._scriptsByUrl.set(script.url, script);\n        this.fireEvent(new Event('scriptParsed', { scriptUrl: script.url, sourceMapURL: script.sourceMapURL }));\n    }\n\n    private onBreakpointResolved(params: Chrome.Debugger.BreakpointResolvedParams): void {\n        const script = this._scriptsById.get(params.location.scriptId);\n        if (!script) {\n            // Breakpoint resolved for a script we don't know about\n            return;\n        }\n\n        const committedBps = this._committedBreakpointsByUrl.get(script.url) || [];\n        committedBps.push(params.breakpointId);\n        this._committedBreakpointsByUrl.set(script.url, committedBps);\n    }\n\n    private onConsoleMessage(params: Chrome.Console.MessageAddedParams): void {\n        const formattedMessage = formatConsoleMessage(params.message);\n        if (formattedMessage) {\n            this.fireEvent(new OutputEvent(\n                formattedMessage.text + '\\n',\n                formattedMessage.isError ? 'stderr' : 'stdout'));\n        }\n    }\n\n    public disconnect(): Promise<void> {\n        if (this._chromeProc) {\n            this._chromeProc.kill('SIGINT');\n            this._chromeProc = null;\n        }\n\n        this.clearEverything();\n\n        return Promise.resolve<void>();\n    }\n\n    public setBreakpoints(args: ISetBreakpointsArgs): Promise<ISetBreakpointsResponseBody> {\n        let targetScriptUrl: string;\n        if (args.source.path) {\n            targetScriptUrl = args.source.path;\n        } else if (args.source.sourceReference) {\n            const targetScript = this._scriptsById.get(sourceReferenceToScriptId(args.source.sourceReference));\n            if (targetScript) {\n                targetScriptUrl = targetScript.url;\n            }\n        }\n\n        if (targetScriptUrl) {\n            // DebugProtocol sends all current breakpoints for the script. Clear all scripts for the breakpoint then add all of them\n            const setBreakpointsPFailOnError = this._setBreakpointsRequestQ\n                .then(() => this.clearAllBreakpoints(targetScriptUrl))\n                .then(() => this.addBreakpoints(targetScriptUrl, args.lines, args.cols))\n                .then(responses => ({ breakpoints: this.chromeBreakpointResponsesToODPBreakpoints(targetScriptUrl, responses, args.lines) }));\n\n            const setBreakpointsPTimeout = utils.promiseTimeout(setBreakpointsPFailOnError, /*timeoutMs*/2000, 'Set breakpoints request timed out');\n\n            // Do just one setBreakpointsRequest at a time to avoid interleaving breakpoint removed/breakpoint added requests to Chrome.\n            // Swallow errors in the promise queue chain so it doesn't get blocked, but return the failing promise for error handling.\n            this._setBreakpointsRequestQ = setBreakpointsPTimeout.catch(() => undefined);\n            return setBreakpointsPTimeout;\n        } else {\n            return utils.errP(`Can't find script for breakpoint request`);\n        }\n    }\n\n    public setFunctionBreakpoints(): Promise<any> {\n        return Promise.resolve<void>();\n    }\n\n    private clearAllBreakpoints(url: string): Promise<void> {\n        if (!this._committedBreakpointsByUrl.has(url)) {\n            return Promise.resolve<void>();\n        }\n\n        // Remove breakpoints one at a time. Seems like it would be ok to send the removes all at once,\n        // but there is a chrome bug where when removing 5+ or so breakpoints at once, it gets into a weird\n        // state where later adds on the same line will fail with 'breakpoint already exists' even though it\n        // does not break there.\n        return this._committedBreakpointsByUrl.get(url).reduce((p, bpId) => {\n            return p.then(() => this._chromeConnection.debugger_removeBreakpoint(bpId)).then(() => { });\n        }, Promise.resolve<void>()).then(() => {\n            this._committedBreakpointsByUrl.set(url, null);\n        });\n    }\n\n    private addBreakpoints(url: string, lines: number[], cols?: number[]): Promise<Chrome.Debugger.SetBreakpointResponse[]> {\n        let responsePs: Promise<Chrome.Debugger.SetBreakpointResponse>[];\n        if (url.startsWith(ChromeDebugAdapter.PLACEHOLDER_URL_PROTOCOL)) {\n            // eval script with no real url - use debugger_setBreakpoint\n            const scriptId = utils.lstrip(url, ChromeDebugAdapter.PLACEHOLDER_URL_PROTOCOL);\n            responsePs = lines.map((lineNumber, i) => this._chromeConnection.debugger_setBreakpoint({ scriptId, lineNumber, columnNumber: cols ? cols[i] : 0 }));\n        } else {\n            // script that has a url - use debugger_setBreakpointByUrl so that Chrome will rebind the breakpoint immediately\n            // after refreshing the page. This is the only way to allow hitting breakpoints in code that runs immediately when\n            // the page loads.\n            const script = this._scriptsByUrl.get(url);\n            responsePs = lines.map((lineNumber, i) => {\n                return this._chromeConnection.debugger_setBreakpointByUrl(url, lineNumber, cols ? cols[i] : 0).then(response => {\n                    // Now convert the response to a SetBreakpointResponse so both response types can be handled the same\n                    const locations = response.result.locations;\n                    return <Chrome.Debugger.SetBreakpointResponse>{\n                        id: response.id,\n                        error: response.error,\n                        result: {\n                            breakpointId: response.result.breakpointId,\n                            actualLocation: locations[0] && {\n                                lineNumber: locations[0].lineNumber,\n                                columnNumber: locations[0].columnNumber,\n                                scriptId: script.scriptId\n                            }\n                        }\n                    };\n                });\n            });\n        }\n\n        // Join all setBreakpoint requests to a single promise\n        return Promise.all(responsePs);\n    }\n\n    private chromeBreakpointResponsesToODPBreakpoints(url: string, responses: Chrome.Debugger.SetBreakpointResponse[], requestLines: number[]): IBreakpoint[] {\n        // Don't cache errored responses\n        const committedBpIds = responses\n            .filter(response => !response.error)\n            .map(response => response.result.breakpointId);\n\n        // Cache successfully set breakpoint ids from chrome in committedBreakpoints set\n        this._committedBreakpointsByUrl.set(url, committedBpIds);\n\n        // Map committed breakpoints to DebugProtocol response breakpoints\n        return responses\n            .map((response, i) => {\n                // The output list needs to be the same length as the input list, so map errors to\n                // unverified breakpoints.\n                if (response.error || !response.result.actualLocation) {\n                    return <IBreakpoint>{\n                        verified: false,\n                        line: requestLines[i],\n                        column: 0\n                    };\n                }\n\n                return <IBreakpoint>{\n                    verified: true,\n                    line: response.result.actualLocation.lineNumber,\n                    column: response.result.actualLocation.columnNumber\n                };\n            });\n    }\n\n    public setExceptionBreakpoints(args: DebugProtocol.SetExceptionBreakpointsArguments): Promise<void> {\n        let state: string;\n        if (args.filters.indexOf('all') >= 0) {\n            state = 'all';\n        } else if (args.filters.indexOf('uncaught') >= 0) {\n            state = 'uncaught';\n        } else {\n            state = 'none';\n        }\n\n        return this._chromeConnection.debugger_setPauseOnExceptions(state)\n            .then(() => { });\n    }\n\n    public continue(): Promise<void> {\n        this._expectingResumedEvent = true;\n        return this._chromeConnection.debugger_resume()\n            .then(() => { });\n    }\n\n    public next(): Promise<void> {\n        this._expectingResumedEvent = true;\n        return this._chromeConnection.debugger_stepOver()\n            .then(() => { });\n    }\n\n    public stepIn(): Promise<void> {\n        this._expectingResumedEvent = true;\n        return this._chromeConnection.debugger_stepIn()\n            .then(() => { });\n    }\n\n    public stepOut(): Promise<void> {\n        this._expectingResumedEvent = true;\n        return this._chromeConnection.debugger_stepOut()\n            .then(() => { });\n    }\n\n    public pause(): Promise<void> {\n        return this._chromeConnection.debugger_pause()\n            .then(() => { });\n    }\n\n    public stackTrace(args: DebugProtocol.StackTraceArguments): IStackTraceResponseBody {\n        // Only process at the requested number of frames, if 'levels' is specified\n        let stack = this._currentStack;\n        if (args.levels) {\n            stack = this._currentStack.filter((_, i) => i < args.levels);\n        }\n\n        const stackFrames: DebugProtocol.StackFrame[] = stack\n            .map(({ location, functionName }, i: number) => {\n                const line = location.lineNumber;\n                const column = location.columnNumber;\n                const script = this._scriptsById.get(location.scriptId);\n\n                try {\n                    // When the script has a url and isn't one we're ignoring, send the name and path fields. PathTransformer will\n                    // attempt to resolve it to a script in the workspace. Otherwise, send the name and sourceReference fields.\n                    const source: DebugProtocol.Source =\n                        script && !this.shouldIgnoreScript(script) ?\n                            {\n                                name: path.basename(script.url),\n                                path: script.url,\n                                sourceReference: scriptIdToSourceReference(script.scriptId) // will be 0'd out by PathTransformer if not needed\n                            } :\n                            {\n                                // Name should be undefined, work around VS Code bug 20274\n                                name: 'eval: ' + location.scriptId,\n                                path: ChromeDebugAdapter.PLACEHOLDER_URL_PROTOCOL + location.scriptId,\n                                sourceReference: scriptIdToSourceReference(location.scriptId)\n                            };\n\n                    // If the frame doesn't have a function name, it's either an anonymous function\n                    // or eval script. If its source has a name, it's probably an anonymous function.\n                    const frameName = functionName || (script.url ? '(anonymous function)' : '(eval code)');\n                    return {\n                        id: i,\n                        name: frameName,\n                        source,\n                        line: line,\n                        column\n                    };\n                } catch (e) {\n                    // Some targets such as the iOS simulator behave badly and return nonsense callFrames.\n                    // In these cases, return a dummy stack frame\n                    return {\n                        id: i,\n                        name: 'Unknown',\n                        source: {name: 'eval:Unknown'},\n                        line,\n                        column\n                    };\n                }\n            });\n\n        return { stackFrames };\n    }\n\n    public scopes(args: DebugProtocol.ScopesArguments): IScopesResponseBody {\n        const scopes = this._currentStack[args.frameId].scopeChain.map((scope: Chrome.Debugger.Scope, i: number) => {\n            const scopeHandle: IScopeVarHandle = { objectId: scope.object.objectId };\n            if (i === 0) {\n                // The first scope should include 'this'. Keep the RemoteObject reference for use by the variables request\n                scopeHandle.thisObj = this._currentStack[args.frameId]['this'];\n            }\n\n            return <DebugProtocol.Scope>{\n                name: scope.type.substr(0, 1).toUpperCase() + scope.type.substr(1), // Take Chrome's scope, uppercase the first letter\n                variablesReference: this._variableHandles.create(scopeHandle),\n                expensive: scope.type === 'global'\n            };\n        });\n\n        return { scopes };\n    }\n\n    public variables(args: DebugProtocol.VariablesArguments): Promise<IVariablesResponseBody> {\n        const handle = this._variableHandles.get(args.variablesReference);\n        if (handle.objectId === ChromeDebugAdapter.EXCEPTION_VALUE_ID) {\n            // If this is the special marker for an exception value, create a fake property descriptor so the usual route can be used\n            const excValuePropDescriptor: Chrome.Runtime.PropertyDescriptor = <any>{ name: 'exception', value: this._exceptionValueObject };\n            return Promise.resolve({ variables: [this.propertyDescriptorToVariable(excValuePropDescriptor)] });\n        } else if (handle != null) {\n            return Promise.all([\n                // Need to make two requests to get all properties\n                this._chromeConnection.runtime_getProperties(handle.objectId, /*ownProperties=*/false, /*accessorPropertiesOnly=*/true),\n                this._chromeConnection.runtime_getProperties(handle.objectId, /*ownProperties=*/true, /*accessorPropertiesOnly=*/false)\n            ]).then(getPropsResponses => {\n                // Sometimes duplicates will be returned - merge all property descriptors returned\n                const propsByName = new Map<string, Chrome.Runtime.PropertyDescriptor>();\n                getPropsResponses.forEach(response => {\n                    if (!response.error) {\n                        response.result.result.forEach(propDesc =>\n                            propsByName.set(propDesc.name, propDesc));\n                    }\n                });\n\n                // Convert Chrome prop descriptors to DebugProtocol vars, sort the result\n                const variables: DebugProtocol.Variable[] = [];\n                propsByName.forEach(propDesc => variables.push(this.propertyDescriptorToVariable(propDesc)));\n                variables.sort((var1, var2) => var1.name.localeCompare(var2.name));\n\n                // If this is a scope that should have the 'this', prop, insert it at the top of the list\n                if (handle.thisObj) {\n                    variables.unshift(this.propertyDescriptorToVariable(<any>{ name: 'this', value: handle.thisObj }));\n                }\n\n                return { variables };\n            });\n        } else {\n            return Promise.resolve<IVariablesResponseBody>(undefined);\n        }\n    }\n\n    public source(args: DebugProtocol.SourceArguments): Promise<ISourceResponseBody> {\n        return this._chromeConnection.debugger_getScriptSource(sourceReferenceToScriptId(args.sourceReference)).then(chromeResponse => {\n            return { content: chromeResponse.result.scriptSource };\n        });\n    }\n\n    public threads(): IThreadsResponseBody {\n        return {\n            threads: [\n                {\n                    id: ChromeDebugAdapter.THREAD_ID,\n                    name: 'Thread ' + ChromeDebugAdapter.THREAD_ID\n                }\n            ]\n        };\n    }\n\n    public evaluate(args: DebugProtocol.EvaluateArguments): Promise<IEvaluateResponseBody> {\n        let evalPromise: Promise<any>;\n        if (this.paused) {\n            const callFrameId = this._currentStack[args.frameId].callFrameId;\n            evalPromise = this._chromeConnection.debugger_evaluateOnCallFrame(callFrameId, args.expression);\n        } else {\n            evalPromise = this._chromeConnection.runtime_evaluate(args.expression);\n        }\n\n        return evalPromise.then(evalResponse => {\n            if (evalResponse.result.wasThrown) {\n                const evalResult = evalResponse.result;\n                let errorMessage = 'Error';\n                if (evalResult.exceptionDetails) {\n                    errorMessage = evalResult.exceptionDetails.text;\n                } else if (evalResult.result && evalResult.result.description) {\n                    errorMessage = evalResult.result.description;\n                }\n                return utils.errP(errorMessage);\n            }\n\n            const { value, variablesReference } = this.remoteObjectToValueWithHandle(evalResponse.result.result);\n            return { result: value, variablesReference };\n        });\n    }\n\n    private propertyDescriptorToVariable(propDesc: Chrome.Runtime.PropertyDescriptor): DebugProtocol.Variable {\n        if (propDesc.get || propDesc.set) {\n            // A property doesn't have a value here, and we shouldn't evaluate the getter because it may have side effects.\n            // Node adapter shows 'undefined', Chrome can eval the getter on demand.\n            return { name: propDesc.name, value: 'property', variablesReference: 0 };\n        } else {\n            const { value, variablesReference } = this.remoteObjectToValueWithHandle(propDesc.value);\n            return { name: propDesc.name, value, variablesReference };\n        }\n    }\n\n    /**\n     * Run the object through ChromeUtilities.remoteObjectToValue, and if it returns a variableHandle reference,\n     * use it with this instance's variableHandles to create a variable handle.\n     */\n    private remoteObjectToValueWithHandle(object: Chrome.Runtime.RemoteObject): { value: string, variablesReference: number } {\n        const { value, variableHandleRef } = ChromeUtils.remoteObjectToValue(object);\n        const result = { value, variablesReference: 0 };\n        if (variableHandleRef) {\n            result.variablesReference = this._variableHandles.create({ objectId: variableHandleRef });\n        }\n\n        return result;\n    }\n\n    private shouldIgnoreScript(script: Chrome.Debugger.Script): boolean {\n        return script.isContentScript || script.isInternalScript || script.url.startsWith('extensions::') || script.url.startsWith('chrome-extension://');\n    }\n}\n\nfunction scriptIdToSourceReference(scriptId: Chrome.Debugger.ScriptId): number {\n    return parseInt(scriptId, 10);\n}\n\nfunction sourceReferenceToScriptId(sourceReference: number): Chrome.Debugger.ScriptId {\n    return '' + sourceReference;\n}\n"]}