{"version":3,"file":"chrome/chromeUtils.js","sourceRoot":"../../src","sources":["chrome/chromeUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as url from 'url';\nimport * as path from 'path';\n\nimport * as utils from '../utils';\nimport * as Chrome from './chromeDebugProtocol';\n\n/**\n * Maps a url from target to an absolute local path.\n * If not given an absolute path (with file: prefix), searches the current working directory for a matching file.\n * http://localhost/scripts/code.js => d:/app/scripts/code.js\n * file:///d:/scripts/code.js => d:/scripts/code.js\n */\nexport function targetUrlToClientPath(webRoot: string, aUrl: string): string {\n    if (!aUrl) {\n        return '';\n    }\n\n    // If the url is an absolute path to a file that exists, return it without file:///.\n    // A remote absolute url (cordova) will still need the logic below.\n    const canonicalUrl = utils.canonicalizeUrl(aUrl);\n    if (aUrl.startsWith('file:///') && utils.existsSync(canonicalUrl)) {\n        return canonicalUrl;\n    }\n\n    // If we don't have the client workingDirectory for some reason, don't try to map the url to a client path\n    if (!webRoot) {\n        return '';\n    }\n\n    // Search the filesystem under the webRoot for the file that best matches the given url\n    let pathName = decodeURIComponent(url.parse(canonicalUrl).pathname);\n    if (!pathName || pathName === '/') {\n        return '';\n    }\n\n    // Dealing with the path portion of either a url or an absolute path to remote file.\n    // Need to force path.sep separator\n    pathName = pathName.replace(/\\//g, path.sep);\n    const pathParts = pathName.split(path.sep);\n    while (pathParts.length > 0) {\n        const clientPath = path.join(webRoot, pathParts.join(path.sep));\n        if (utils.existsSync(clientPath)) {\n            return utils.canonicalizeUrl(clientPath);\n        }\n\n        pathParts.shift();\n    }\n\n    return '';\n}\n\n/**\n * Convert a RemoteObject to a value+variableHandleRef for the client.\n */\nexport function remoteObjectToValue(object: Chrome.Runtime.RemoteObject, stringify = true): { value: string, variableHandleRef?: string } {\n    let value = '';\n    let variableHandleRef: string;\n\n    if (object) {\n        if (object.type === 'object') {\n            if (object.subtype === 'null') {\n                value = 'null';\n            } else {\n                // If it's a non-null object, create a variable reference so the client can ask for its props\n                variableHandleRef = object.objectId;\n                value = object.description;\n            }\n        } else if (object.type === 'undefined') {\n            value = 'undefined';\n        } else if (object.type === 'function') {\n            const firstBraceIdx = object.description.indexOf('{');\n            if (firstBraceIdx >= 0) {\n                value = object.description.substring(0, firstBraceIdx) + '{ â€¦ }';\n            } else {\n                const firstArrowIdx = object.description.indexOf('=>');\n                value = firstArrowIdx >= 0 ?\n                    object.description.substring(0, firstArrowIdx + 2) + ' â€¦' :\n                    object.description;\n            }\n        } else {\n            // The value is a primitive value, or something that has a description (not object, primitive, or undefined). And force to be string\n            if (typeof object.value === 'undefined') {\n                value = object.description;\n            } else {\n                value = stringify ? JSON.stringify(object.value) : object.value;\n            }\n        }\n    }\n\n    return { value, variableHandleRef };\n}\n\nexport function getMatchingTargets(targets: Chrome.ITarget[], targetUrl: string): Chrome.ITarget[] {\n    const standardizeUrl = aUrl => utils.canonicalizeUrl(aUrl).toLowerCase();\n\n    // Look for an exact match\n    targetUrl = standardizeUrl(targetUrl);\n    const exactMatchTargets = targets.filter(target => standardizeUrl(target.url) === targetUrl);\n\n    if (exactMatchTargets.length) {\n        targets = exactMatchTargets;\n    } else {\n        // Strip the protocol, if present. Don't try parsing this since it may not be an actual url, e.g., 'localhost'.\n        // canonicalizeUrl would have already fixed file:/// or ?params\n        if (targetUrl.indexOf('://') >= 0) targetUrl = targetUrl.split('://')[1];\n\n        // Find targets that have the targetUrl as a substring\n        targets = targets.filter(target => standardizeUrl(target.url).indexOf(targetUrl) >= 0);\n    }\n\n    return targets;\n}\n"]}