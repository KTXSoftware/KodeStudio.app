{"version":3,"file":"chrome/consoleHelper.js","sourceRoot":"../../src","sources":["chrome/consoleHelper.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as url from 'url';\nimport * as ChromeUtils from './chromeUtils';\nimport * as Chrome from './chromeDebugProtocol';\n\nexport function formatConsoleMessage(m: Chrome.Console.Message): { text: string, isError: boolean } {\n    let outputText: string;\n    if (m.type === 'log') {\n        outputText = resolveParams(m);\n        if (m.source === 'network') {\n            outputText += ` (${m.url})`;\n        }\n    } else if (m.type === 'assert') {\n        outputText = 'Assertion failed';\n        if (m.parameters && m.parameters.length) {\n            outputText += ': ' + m.parameters.map(p => p.value).join(' ');\n        }\n\n        outputText += '\\n' + stackTraceToString(m.stack);\n    } else if (m.type === 'startGroup' || m.type === 'startGroupCollapsed') {\n        outputText = '‹Start group›';\n        if (m.text) {\n            // Or wherever the label is\n            outputText += ': ' + m.text;\n        }\n    } else if (m.type === 'endGroup') {\n        outputText = '‹End group›';\n    } else if (m.type === 'trace') {\n        outputText = 'console.trace()\\n' + stackTraceToString(m.stack);\n    } else {\n        // Some types we have to ignore\n        outputText = 'Unimplemented console API: ' + m.type;\n    }\n\n    return { text: outputText, isError: m.level === 'error' };\n}\n\nfunction resolveParams(m: Chrome.Console.Message): string {\n    if (!m.parameters || !m.parameters.length) {\n        return m.text;\n    }\n\n    const textParam = m.parameters[0];\n    let text = remoteObjectToString(textParam);\n    m.parameters.shift();\n\n    // Find all %s, %i, etc in the first parameter, which is always the main text. Strip %\n    let formatSpecifiers: string[] = [];\n    if (textParam.type === 'string') {\n        formatSpecifiers = textParam.value.match(/\\%[sidfoOc]/g) || [];\n        formatSpecifiers = formatSpecifiers.map(spec => spec[1]);\n    }\n\n    // Append all parameters, formatting properly if there's a format specifier\n    m.parameters.forEach((param, i) => {\n        let formatted: any;\n        if (formatSpecifiers[i] === 's') {\n            formatted = param.value;\n        } else if (['i', 'd'].indexOf(formatSpecifiers[i]) >= 0) {\n            formatted = Math.floor(+param.value);\n        } else if (formatSpecifiers[i] === 'f') {\n            formatted = +param.value;\n        } else if (['o', 'O', 'c'].indexOf(formatSpecifiers[i]) >= 0) {\n            // um\n            formatted = param.value;\n        }\n\n        // If this param had a format specifier, search and replace it with the formatted param.\n        // Otherwise, append it to the end of the text\n        if (formatSpecifiers[i]) {\n            text = text.replace('%' + formatSpecifiers[i], formatted);\n        } else {\n            text += ' ' + remoteObjectToString(param);\n        }\n    });\n\n    return text;\n}\n\nfunction remoteObjectToString(obj: Chrome.Runtime.RemoteObject): string {\n    const result = ChromeUtils.remoteObjectToValue(obj, /*stringify=*/false);\n    if (result.variableHandleRef) {\n        // The DebugProtocol console API doesn't support returning a variable reference, so do our best to\n        // build a useful string out of this object.\n        if (obj.subtype === 'array') {\n            return arrayRemoteObjToString(obj);\n        } else if (obj.preview && obj.preview.properties) {\n            let props: string = obj.preview.properties\n                .map(prop => {\n                    let propStr = prop.name + ': ';\n                    if (prop.type === 'string') {\n                        propStr += `\"${prop.value}\"`;\n                    } else {\n                        propStr += prop.value;\n                    }\n\n                    return propStr;\n                })\n                .join(', ');\n\n            if (obj.preview.overflow) {\n                props += '…';\n            }\n\n            return `${obj.className} {${props}}`;\n        }\n    } else {\n        return result.value;\n    }\n}\n\nfunction arrayRemoteObjToString(obj: Chrome.Runtime.RemoteObject): string {\n    if (obj.preview && obj.preview.properties) {\n        let props: string = obj.preview.properties\n            .map(prop => prop.value)\n            .join(', ');\n\n        if (obj.preview.overflow) {\n            props += '…';\n        }\n\n        return `[${props}]`;\n    } else {\n        return obj.description;\n    }\n}\n\nfunction stackTraceToString(stackTrace: Chrome.Runtime.StackTrace): string {\n    return stackTrace.callFrames\n        .map(frame => {\n            const fnName = frame.functionName || (frame.url ? '(anonymous)' : '(eval)');\n            const fileName = frame.url ? url.parse(frame.url).pathname : '(eval)';\n            return `-  ${fnName} @${fileName}:${frame.lineNumber}`;\n        })\n        .join('\\n');\n}\n"]}