{"version":3,"file":"sourceMaps/sourceMapUtils.js","sourceRoot":"../../src","sources":["sourceMaps/sourceMapUtils.ts"],"names":[],"mappings":"AAAA;;4DAE4D;;AAE5D,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,GAAG,WAAM,KAAK,CAAC,CAAA;AAE3B,IAAY,KAAK,WAAM,UAAU,CAAC,CAAA;AAClC,IAAY,MAAM,WAAM,WAAW,CAAC,CAAA;AAEpC;;GAEG;AACH,+BAAsC,OAAe,EAAE,OAAe;IAClE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC;AAFe,6BAAqB,wBAEpC,CAAA;AAED;;GAEG;AACH,0BAAiC,UAAkB,EAAE,OAAe,EAAE,aAAqB;IACvF,IAAI,aAAqB,CAAC;IAC1B,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACb,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACpC,4FAA4F;YAC5F,aAAa,GAAG,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACtD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACpC,uGAAuG;YACvG,iFAAiF;YACjF,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QACnD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,+DAA+D;YAC/D,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACjC,aAAa,GAAG,qBAAqB,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;YACrE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,mGAAmG;gBACnG,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACnE,aAAa,GAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAChE,CAAC;QACL,CAAC;QAED,MAAM,CAAC,GAAG,CAAC,oCAAkC,UAAU,YAAO,aAAe,CAAC,CAAC;IACnF,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACxC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC5C,MAAM,CAAC,GAAG,CAAC,+DAA6D,aAAe,CAAC,CAAC;IAC7F,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,yEAAyE;QACzE,IAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC1E,aAAa,GAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QACvD,MAAM,CAAC,GAAG,CAAC,8EAA4E,aAAe,CAAC,CAAC;IAC5G,CAAC;IAED,aAAa,GAAG,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;IACxD,aAAa,GAAG,KAAK,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC;IAE9D,MAAM,CAAC,aAAa,CAAC;AACzB,CAAC;AApCe,wBAAgB,mBAoC/B,CAAA","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as path from 'path';\nimport * as url from 'url';\n\nimport * as utils from '../utils';\nimport * as logger from '../logger';\n\n/**\n * Resolves a relative path in terms of another file\n */\nexport function resolveRelativeToFile(absPath: string, relPath: string): string {\n    return path.resolve(path.dirname(absPath), relPath);\n}\n\n/**\n * Determine the absolute path to the sourceRoot.\n */\nexport function getAbsSourceRoot(sourceRoot: string, webRoot: string, generatedPath: string): string {\n    let absSourceRoot: string;\n    if (sourceRoot) {\n        if (sourceRoot.startsWith('file:///')) {\n            // sourceRoot points to a local path like \"file:///c:/project/src\", make it an absolute path\n            absSourceRoot = utils.canonicalizeUrl(sourceRoot);\n        } else if (sourceRoot.startsWith('/')) {\n            // sourceRoot is like \"/src\", would be like http://localhost/src, resolve to a local path under webRoot\n            // note that C:/src (or /src as an absolute local path) is not a valid sourceroot\n            absSourceRoot = path.join(webRoot, sourceRoot);\n        } else {\n            // sourceRoot is like \"src\" or \"../src\", relative to the script\n            if (path.isAbsolute(generatedPath)) {\n                absSourceRoot = resolveRelativeToFile(generatedPath, sourceRoot);\n            } else {\n                // generatedPath is a URL so runtime script is not on disk, resolve the sourceRoot location on disk\n                const genDirname = path.dirname(url.parse(generatedPath).pathname);\n                absSourceRoot =  path.join(webRoot, genDirname, sourceRoot);\n            }\n        }\n\n        logger.log(`SourceMap: resolved sourceRoot ${sourceRoot} -> ${absSourceRoot}`);\n    } else if (path.isAbsolute(generatedPath)) {\n        absSourceRoot = path.dirname(generatedPath);\n        logger.log(`SourceMap: no sourceRoot specified, using script dirname: ${absSourceRoot}`);\n    } else {\n        // runtime script is not on disk, resolve the sourceRoot location on disk\n        const scriptPathDirname = path.dirname(url.parse(generatedPath).pathname);\n        absSourceRoot =  path.join(webRoot, scriptPathDirname);\n        logger.log(`SourceMap: no sourceRoot specified, using webRoot + script path dirname: ${absSourceRoot}`);\n    }\n\n    absSourceRoot = utils.stripTrailingSlash(absSourceRoot);\n    absSourceRoot = utils.fixDriveLetterAndSlashes(absSourceRoot);\n\n    return absSourceRoot;\n}"]}