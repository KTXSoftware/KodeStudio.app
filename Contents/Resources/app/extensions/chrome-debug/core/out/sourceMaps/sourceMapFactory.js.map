{"version":3,"file":"sourceMaps/sourceMapFactory.js","sourceRoot":"../../src","sources":["sourceMaps/sourceMapFactory.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as path from 'path';\nimport * as url from 'url';\nimport * as fs from 'fs';\n\nimport * as sourceMapUtils from './sourceMapUtils';\nimport * as utils from '../utils';\nimport * as logger from '../logger';\nimport {SourceMap} from './sourceMap';\n\n/**\n * pathToGenerated - an absolute local path or a URL.\n * mapPath - a path relative to pathToGenerated.\n */\nexport function getMapForGeneratedPath(pathToGenerated: string, mapPath: string, webRoot: string): Promise<SourceMap> {\n    logger.log(`SourceMaps.getMapForGeneratedPath: Finding SourceMap for ${pathToGenerated} by URI: ${mapPath} and webRoot: ${webRoot}`);\n\n    // For an inlined sourcemap, mapPath is a data URI containing a blob of base64 encoded data, starting\n    // with a tag like \"data:application/json;charset:utf-8;base64,\". The data should start after the last comma.\n    let sourceMapContentsP: Promise<string>;\n    if (mapPath.indexOf('data:application/json') >= 0) {\n        // Sourcemap is inlined\n        logger.log(`SourceMaps.getMapForGeneratedPath: Using inlined sourcemap in ${pathToGenerated}`);\n        sourceMapContentsP = Promise.resolve(getInlineSourceMapContents(mapPath));\n    } else {\n        sourceMapContentsP = getSourceMapContent(pathToGenerated, mapPath);\n    }\n\n    return sourceMapContentsP.then(contents => {\n        if (contents) {\n            try {\n                // Throws for invalid JSON\n                return new SourceMap(pathToGenerated, contents, webRoot);\n            } catch (e) {\n                logger.error(`SourceMaps.getMapForGeneratedPath: exception while processing sourcemap: ${e.stack}`);\n                return null;\n            }\n        } else {\n            return null;\n        }\n    });\n}\n\n/**\n * Parses sourcemap contents from inlined base64-encoded data\n */\nfunction getInlineSourceMapContents(sourceMapData: string): string {\n    const lastCommaPos = sourceMapData.lastIndexOf(',');\n    if (lastCommaPos < 0) {\n        logger.log(`SourceMaps.getInlineSourceMapContents: Inline sourcemap is malformed. Starts with: ${sourceMapData.substr(0, 200)}`);\n        return null;\n    }\n\n    const data = sourceMapData.substr(lastCommaPos + 1);\n    try {\n        const buffer = new Buffer(data, 'base64');\n        return buffer.toString();\n    } catch (e) {\n        logger.error(`SourceMaps.getInlineSourceMapContents: exception while processing data uri (${e.stack})`);\n    }\n\n    return null;\n}\n\n/**\n * Resolves a sourcemap's path and loads the data\n */\nfunction getSourceMapContent(pathToGenerated: string, mapPath: string): Promise<string> {\n    if (!path.isAbsolute(mapPath)) {\n        // mapPath needs to be resolved to an absolute path or a URL\n        if (path.isAbsolute(pathToGenerated)) {\n            // runtime script is on disk, so map should be too\n            mapPath = sourceMapUtils.resolveRelativeToFile(pathToGenerated, mapPath);\n        } else {\n            // runtime script is not on disk, resolve a URL for the map relative to the script\n            const scriptUrl = url.parse(pathToGenerated);\n            mapPath = `${scriptUrl.protocol}//${scriptUrl.host}${path.dirname(scriptUrl.pathname)}/${mapPath}`;\n        }\n    }\n\n    return loadSourceMapContents(mapPath).then(contents => {\n        if (!contents) {\n            // Last ditch effort - just look for a .js.map next to the script\n            const mapPathNextToSource = pathToGenerated + '.map';\n            if (mapPathNextToSource !== mapPath) {\n                return loadSourceMapContents(mapPathNextToSource);\n            }\n        }\n\n        return contents;\n    });\n}\n\nfunction loadSourceMapContents(mapPathOrURL: string): Promise<string> {\n    let contentsP: Promise<string>;\n    if (utils.isURL(mapPathOrURL)) {\n        logger.log(`SourceMaps.loadSourceMapContents: Downloading sourcemap file from ${mapPathOrURL}`);\n        contentsP = utils.getURL(mapPathOrURL).catch(e => {\n            logger.error(`SourceMaps.loadSourceMapContents: Could not download sourcemap from ${mapPathOrURL}`);\n            return null;\n        });\n    } else {\n        contentsP = new Promise((resolve, reject) => {\n            logger.log(`SourceMaps.loadSourceMapContents: Reading local sourcemap file from ${mapPathOrURL}`);\n            fs.readFile(mapPathOrURL, (err, data) => {\n                if (err) {\n                    logger.error(`SourceMaps.loadSourceMapContents: Could not read sourcemap from ${mapPathOrURL}`);\n                    resolve(null);\n                } else {\n                    resolve(data);\n                }\n            });\n        });\n    }\n\n    return contentsP;\n}"]}