{"version":3,"file":"sourceMaps/sourceMaps.js","sourceRoot":"../../src","sources":["sourceMaps/sourceMaps.ts"],"names":[],"mappings":"AAAA;;4DAE4D;;AAG5D,iCAAqC,oBAAoB,CAAC,CAAA;AAE1D;IAQI,oBAAmB,OAAe;QAPlC,iGAAiG;QACzF,8BAAyB,GAAG,IAAI,GAAG,EAAqB,CAAC;QACzD,6BAAwB,GAAG,IAAI,GAAG,EAAqB,CAAC;QAM5D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACI,qDAAgC,GAAvC,UAAwC,YAAoB;QACxD,YAAY,GAAG,YAAY,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,YAAY,CAAC;YAClD,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,aAAa,EAAE;YAC/D,IAAI,CAAC;IACb,CAAC;IAEM,mCAAc,GAArB,UAAsB,YAAoB,EAAE,IAAY,EAAE,MAAc;QACpE,YAAY,GAAG,YAAY,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,YAAY,CAAC;YAClD,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,YAAY,CAAC;iBAC1C,oBAAoB,CAAC,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC;YACrD,IAAI,CAAC;IACb,CAAC;IAEM,kCAAa,GAApB,UAAqB,eAAuB,EAAE,IAAY,EAAE,MAAc;QACtE,eAAe,GAAG,eAAe,CAAC,WAAW,EAAE,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,eAAe,CAAC;YACtD,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,eAAe,CAAC;iBAC9C,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC;YACtC,IAAI,CAAC;IACb,CAAC;IAEM,qCAAgB,GAAvB,UAAwB,eAAuB;QAC3C,eAAe,GAAG,eAAe,CAAC,WAAW,EAAE,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,eAAe,CAAC;YACtD,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,eAAe;YACnE,IAAI,CAAC;IACb,CAAC;IAED;;OAEG;IACI,wCAAmB,GAA1B,UAA2B,eAAuB,EAAE,YAAoB;QAAxE,iBASC;QARG,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;YACpE,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;YACrB,yCAAsB,CAAC,eAAe,EAAE,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,SAAS;gBAC/E,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACZ,KAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,CAAC;oBAC7E,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc,IAAI,OAAA,KAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,cAAc,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,EAA1E,CAA0E,CAAC,CAAC;gBACpI,CAAC;YACL,CAAC,CAAC,CAAC;IACX,CAAC;IACL,iBAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DY,kBAAU,aA2DtB,CAAA","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport {SourceMap, MappedPosition} from './sourceMap';\nimport {getMapForGeneratedPath} from './sourceMapFactory';\n\nexport class SourceMaps {\n    // Maps absolute paths to generated/authored source files to their corresponding SourceMap object\n    private _generatedPathToSourceMap = new Map<string, SourceMap>();\n    private _authoredPathToSourceMap = new Map<string, SourceMap>();\n\n    // Path to resolve / paths against\n    private _webRoot: string;\n\n    public constructor(webRoot: string) {\n        this._webRoot = webRoot;\n    }\n\n    /**\n     * Returns the generated script path for an authored source path\n     * @param pathToSource - The absolute path to the authored file\n     */\n    public getGeneratedPathFromAuthoredPath(authoredPath: string): string {\n        authoredPath = authoredPath.toLowerCase();\n        return this._authoredPathToSourceMap.has(authoredPath) ?\n            this._authoredPathToSourceMap.get(authoredPath).generatedPath() :\n            null;\n    }\n\n    public mapToGenerated(authoredPath: string, line: number, column: number): MappedPosition {\n        authoredPath = authoredPath.toLowerCase();\n        return this._authoredPathToSourceMap.has(authoredPath) ?\n            this._authoredPathToSourceMap.get(authoredPath)\n                .generatedPositionFor(authoredPath, line, column) :\n            null;\n    }\n\n    public mapToAuthored(pathToGenerated: string, line: number, column: number): MappedPosition {\n        pathToGenerated = pathToGenerated.toLowerCase();\n        return this._generatedPathToSourceMap.has(pathToGenerated) ?\n            this._generatedPathToSourceMap.get(pathToGenerated)\n                .authoredPositionFor(line, column) :\n            null;\n    }\n\n    public allMappedSources(pathToGenerated: string): string[] {\n        pathToGenerated = pathToGenerated.toLowerCase();\n        return this._generatedPathToSourceMap.has(pathToGenerated) ?\n            this._generatedPathToSourceMap.get(pathToGenerated).authoredSources :\n            null;\n    }\n\n    /**\n     * Given a new path to a new script file, finds and loads the sourcemap for that file\n     */\n    public processNewSourceMap(pathToGenerated: string, sourceMapURL: string): Promise<void> {\n        return this._generatedPathToSourceMap.has(pathToGenerated.toLowerCase()) ?\n            Promise.resolve(null) :\n            getMapForGeneratedPath(pathToGenerated, sourceMapURL, this._webRoot).then(sourceMap => {\n                if (sourceMap) {\n                    this._generatedPathToSourceMap.set(pathToGenerated.toLowerCase(), sourceMap);\n                    sourceMap.authoredSources.forEach(authoredSource => this._authoredPathToSourceMap.set(authoredSource.toLowerCase(), sourceMap));\n                }\n            });\n    }\n}\n"]}