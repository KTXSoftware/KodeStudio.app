{"version":3,"file":"sourceMaps/sourceMap.js","sourceRoot":"../../src","sources":["sourceMaps/sourceMap.ts"],"names":[],"mappings":"AAAA;;4DAE4D;;AAE5D,2BAAgD,YAAY,CAAC,CAAA;AAC7D,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,IAAY,cAAc,WAAM,kBAAkB,CAAC,CAAA;AACnD,IAAY,KAAK,WAAM,UAAU,CAAC,CAAA;AAClC,IAAY,MAAM,WAAM,WAAW,CAAC,CAAA;AAIpC;IAMI;;;;OAIG;IACH,mBAAmB,aAAqB,EAAE,IAAY,EAAE,OAAe;QAX3E,iBA6JC;QAzJW,yBAAoB,GAAG,IAAI,GAAG,EAAkB,CAAC,CAAC,yDAAyD;QAQ/G,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QAEpC,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,GAAG,CAAC,6BAA2B,aAAe,CAAC,CAAC;QACvD,MAAM,CAAC,GAAG,CAAC,4BAA0B,EAAE,CAAC,UAAY,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,GAAG,CAAC,uMAAuM,CAAC,CAAC;QACxN,CAAC;QACD,MAAM,CAAC,GAAG,CAAC,yBAAuB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAG,CAAC,CAAC;QAChE,EAAE,CAAC,CAAC,EAAE,CAAC,cAAc,IAAI,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,GAAG,CAAC,6IAA6I,CAAC,CAAC;QAC9J,CAAC;QACD,MAAM,CAAC,GAAG,CAAC,yBAAuB,OAAS,CAAC,CAAC;QAE7C,IAAM,aAAa,GAAG,cAAc,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAEnG,6FAA6F;QAC7F,6CAA6C;QAC7C,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC;QAErB,qFAAqF;QACrF,2FAA2F;QAC3F,6DAA6D;QAC7D,sFAAsF;QACtF,yFAAyF;QACzF,yCAAyC;QACzC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,UAAU;YACrC,yEAAyE;YACzE,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;YACrD,UAAU,GAAG,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAE/C,gHAAgH;YAChH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC/B,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;YACzD,CAAC;YAED,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,+EAA+E;QAC/E,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,aAAa;YACxC,oHAAoH;YACpH,wEAAwE;YACxE,IAAM,sBAAsB,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;YAC3D,KAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,sBAAsB,EAAE,aAAa,CAAC,CAAC;YACrE,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,GAAG,IAAI,8BAAiB,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAKD,sBAAW,sCAAe;QAH1B;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;;;OAAA;IAED;;OAEG;IACI,iCAAa,GAApB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,qCAAiB,GAAxB,UAAyB,OAAe;QACpC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,OAAO,EAAhB,CAAgB,CAAC,CAAC;IAC/D,CAAC;IAED;;;OAGG;IACI,uCAAmB,GAA1B,UAA2B,IAAY,EAAE,MAAc;QACnD,uCAAuC;QACvC,IAAI,EAAE,CAAC;QAEP,IAAM,UAAU,GAAG;YACf,MAAA,IAAI;YACJ,QAAA,MAAM;YACN,IAAI,EAAE,8BAAiB,CAAC,iBAAiB;SAC5C,CAAC;QAEF,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YACnB,mGAAmG;YACnG,UAAU,CAAC,IAAI,GAAG,8BAAiB,CAAC,oBAAoB,CAAC;YACzD,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACzD,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAClB,4BAA4B;YAC5B,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEzD,gCAAgC;YAChC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC;YAEpF,0BAA0B;YAC1B,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEhB,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,wCAAoB,GAA3B,UAA4B,MAAc,EAAE,IAAY,EAAE,MAAc;QACpE,uCAAuC;QACvC,IAAI,EAAE,CAAC;QAEP,wDAAwD;QACxD,qDAAqD;QACrD,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;QAEnD,IAAM,UAAU,GAAG;YACf,MAAA,IAAI;YACJ,QAAA,MAAM;YACN,QAAA,MAAM;YACN,IAAI,EAAE,8BAAiB,CAAC,iBAAiB;SAC5C,CAAC;QAEF,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YACzB,mGAAmG;YACnG,UAAU,CAAC,IAAI,GAAG,8BAAiB,CAAC,oBAAoB,CAAC;YACzD,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAC1D,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC;gBACH,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG,CAAC;gBACvB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,MAAM,EAAE,IAAI,CAAC,cAAc;aAC9B,CAAC;QACN,CAAC;IACL,CAAC;IACL,gBAAC;AAAD,CAAC,AA7JD,IA6JC;AA7JY,iBAAS,YA6JrB,CAAA","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport {SourceMapConsumer, MappedPosition} from 'source-map';\nimport * as path from 'path';\n\nimport * as sourceMapUtils from './sourceMapUtils';\nimport * as utils from '../utils';\nimport * as logger from '../logger';\n\nexport type MappedPosition = MappedPosition;\n\nexport class SourceMap {\n    private _generatedPath: string; // the generated file for this sourcemap (absolute path)\n    private _sources: string[]; // list of authored files (absolute paths)\n    private _smc: SourceMapConsumer; // the source map\n    private _authoredPathCaseMap = new Map<string, string>(); // Maintain pathCase map because VSCode is case sensitive\n\n    /**\n     * pathToGenerated - an absolute local path or a URL\n     * json - sourcemap contents\n     * webRoot - an absolute path\n     */\n    public constructor(generatedPath: string, json: string, webRoot: string) {\n        this._generatedPath = generatedPath;\n\n        const sm = JSON.parse(json);\n        logger.log(`SourceMap: creating for ${generatedPath}`);\n        logger.log(`SourceMap: sourceRoot: ${sm.sourceRoot}`);\n        if (sm.sourceRoot && sm.sourceRoot.toLowerCase() === '/source/') {\n            logger.log('Warning: if you are using gulp-sourcemaps < 2.0 directly or indirectly, you may need to set sourceRoot manually in your build config, if your files are not actually under a directory called /source');\n        }\n        logger.log(`SourceMap: sources: ${JSON.stringify(sm.sources)}`);\n        if (sm.sourcesContent && sm.sourcesContent.length) {\n            logger.log(`Warning: SourceMap sources are inlined. This extension ignores inlined sources. If the paths are not correct, sourcemap support won't work.`);\n        }\n        logger.log(`SourceMap: webRoot: ${webRoot}`);\n\n        const absSourceRoot = sourceMapUtils.getAbsSourceRoot(sm.sourceRoot, webRoot, this._generatedPath);\n\n        // Overwrite the sourcemap's sourceRoot with the version that's resolved to an absolute path,\n        // so the work above only has to be done once\n        sm.sourceRoot = null;\n\n        // sm.sources are relative paths or file:/// urls - (or other URLs?) read the spec...\n        // resolve them to file:/// urls, using absSourceRoot, to be simpler and unambiguous, since\n        // it needs to look them up later in exactly the same format.\n        // note - the source-map library doesn't like backslashes, but some tools output them.\n        // Which is wrong? Consider filing issues on source-map or tools that output backslashes?\n        // In either case, support whatever works\n        this._sources = sm.sources.map(sourcePath => {\n            // Special-case webpack:/// prefixed sources which is kind of meaningless\n            sourcePath = utils.lstrip(sourcePath, 'webpack:///');\n            sourcePath = utils.canonicalizeUrl(sourcePath);\n\n            // If not already an absolute path, make it an absolute path with this._absSourceRoot. Also resolves '..' parts.\n            if (!path.isAbsolute(sourcePath)) {\n                sourcePath = path.resolve(absSourceRoot, sourcePath);\n            }\n\n            return sourcePath;\n        });\n\n        // Rewrite sm.sources to same as this._sources but forward slashes and file url\n        sm.sources = this._sources.map(sourceAbsPath => {\n            // Convert to file:/// url. After this, it's a file URL for an absolute path to a file on disk with forward slashes.\n            // We lowercase so authored <-> generated mapping is not case sensitive.\n            const lowerCaseSourceAbsPath = sourceAbsPath.toLowerCase();\n            this._authoredPathCaseMap.set(lowerCaseSourceAbsPath, sourceAbsPath);\n            return utils.pathToFileURL(lowerCaseSourceAbsPath);\n        });\n\n        this._smc = new SourceMapConsumer(sm);\n    }\n\n    /*\n     * Return all mapped sources as absolute paths\n     */\n    public get authoredSources(): string[] {\n        return this._sources;\n    }\n\n    /*\n     * The generated file of this source map.\n     */\n    public generatedPath(): string {\n        return this._generatedPath;\n    }\n\n    /*\n     * Returns true if this source map originates from the given source.\n     */\n    public doesOriginateFrom(absPath: string): boolean {\n        return this.authoredSources.some(path => path === absPath);\n    }\n\n    /*\n     * Finds the nearest source location for the given location in the generated file.\n     * Will return null instead of a mapping on the next line (different from generatedPositionFor).\n     */\n    public authoredPositionFor(line: number, column: number): MappedPosition {\n        // source-map lib uses 1-indexed lines.\n        line++;\n\n        const lookupArgs = {\n            line,\n            column,\n            bias: SourceMapConsumer.LEAST_UPPER_BOUND\n        };\n\n        let position = this._smc.originalPositionFor(lookupArgs);\n        if (!position.source) {\n            // If it can't find a match, it returns a mapping with null props. Try looking the other direction.\n            lookupArgs.bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n            position = this._smc.originalPositionFor(lookupArgs);\n        }\n\n        if (position.source) {\n            // file:/// -> absolute path\n            position.source = utils.canonicalizeUrl(position.source);\n\n            // Convert back to original case\n            position.source = this._authoredPathCaseMap.get(position.source) || position.source;\n\n            // Back to 0-indexed lines\n            position.line--;\n\n            return position;\n        } else {\n            return null;\n        }\n    }\n\n    /*\n     * Finds the nearest location in the generated file for the given source location.\n     * Will return a mapping on the next line, if there is no subsequent mapping on the expected line.\n     */\n    public generatedPositionFor(source: string, line: number, column: number): MappedPosition {\n        // source-map lib uses 1-indexed lines.\n        line++;\n\n        // sources in the sourcemap have been forced to file:///\n        // Convert to lowerCase so search is case insensitive\n        source = utils.pathToFileURL(source.toLowerCase());\n\n        const lookupArgs = {\n            line,\n            column,\n            source,\n            bias: SourceMapConsumer.LEAST_UPPER_BOUND\n        };\n\n        let position = this._smc.generatedPositionFor(lookupArgs);\n        if (position.line === null) {\n            // If it can't find a match, it returns a mapping with null props. Try looking the other direction.\n            lookupArgs.bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n            position = this._smc.generatedPositionFor(lookupArgs);\n        }\n\n        if (position.line === null) {\n            return null;\n        } else {\n            return {\n                line: position.line - 1, // Back to 0-indexed lines\n                column: position.column,\n                source: this._generatedPath\n            };\n        }\n    }\n}\n"]}