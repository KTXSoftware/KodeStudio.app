{"version":3,"file":"adapterProxy.js","sourceRoot":"../src","sources":["adapterProxy.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport {DebugProtocol} from 'vscode-debugprotocol';\n\nimport {IDebugAdapter, IDebugTransformer} from './chrome/debugAdapterInterfaces';\nimport * as utils from './utils';\nimport * as logger from './logger';\n\nexport type EventHandler = (event: DebugProtocol.Event) => void;\n\n/**\n * Keeps a set of IDebugTransformers and an IDebugAdapter. Has one public method - dispatchRequest, which passes a request through each\n * IDebugTransformer, then to the IDebugAdapter.\n */\nexport class AdapterProxy {\n    private static INTERNAL_EVENTS = ['scriptParsed', 'clearClientContext', 'clearTargetContext'];\n\n    private _requestTransformers: IDebugTransformer[];\n    private _debugAdapter: IDebugAdapter;\n    private _eventHandler: EventHandler;\n\n    public constructor(requestTransformers: IDebugTransformer[], debugAdapter: IDebugAdapter, eventHandler: EventHandler) {\n        this._requestTransformers = requestTransformers;\n        this._debugAdapter = debugAdapter;\n        this._eventHandler = eventHandler;\n\n        this._debugAdapter.registerEventHandler(event => this.onAdapterEvent(event));\n    }\n\n    /**\n     * Passes the request through all IDebugTransformers, then the IDebugAdapter. The request from the IDebugAdapter is passed through all the\n     * IDebugTransformers in reverse.\n     * Returns a Promise that resolves to the transformed response body.\n     */\n    public dispatchRequest(request: DebugProtocol.Request): Promise<any> {\n        if (!(request.command in this._debugAdapter)) {\n            return utils.errP('unknowncommand');\n        }\n\n        return this.transformRequest(request)\n            // Pass the modified args to the adapter\n            .then(() => this._debugAdapter[request.command](request.arguments))\n\n            // Pass the body back through the transformers and ensure the body is returned\n            .then((body?) => {\n                return this.transformResponse(request, body)\n                    .then(() => body);\n            });\n    }\n\n    /**\n     * Pass the request arguments through the transformers. They modify the object in place.\n     */\n    private transformRequest(request: DebugProtocol.Request): Promise<void> {\n        return this._requestTransformers\n            // If the transformer implements this command, give it a chance to modify the args. Otherwise skip it\n            .filter(transformer => request.command in transformer)\n            .reduce(\n                (p, transformer) => p.then(() => transformer[request.command](request.arguments, request.seq)),\n                Promise.resolve<void>());\n    }\n\n    /**\n     * Pass the response body back through the transformers in reverse order. They modify the body in place.\n     */\n    private transformResponse(request: DebugProtocol.Request, body: any): Promise<void> {\n        if (!body) {\n            return Promise.resolve<void>();\n        }\n\n        const bodyTransformMethodName = request.command + 'Response';\n        const reversedTransformers = utils.reversedArr(this._requestTransformers);\n        return reversedTransformers\n            // If the transformer implements this command, give it a chance to modify the args. Otherwise skip it\n            .filter(transformer => bodyTransformMethodName in transformer)\n            .reduce(\n                (p, transformer) => p.then(() => transformer[bodyTransformMethodName](body, request.seq)),\n                Promise.resolve<void>());\n    }\n\n    /**\n     * Pass the event back through the transformers in reverse. They modify the object in place.\n     */\n    private onAdapterEvent(event: DebugProtocol.Event): void {\n        // try/catch because this method isn't promise-based like the rest of the class\n        try {\n            const reversedTransformers = utils.reversedArr(this._requestTransformers);\n            reversedTransformers\n                .filter(transformer => event.event in transformer)\n                .forEach(\n                    transformer => transformer[event.event](event));\n\n            // Internal events should not be passed back through DebugProtocol\n            if (AdapterProxy.INTERNAL_EVENTS.indexOf(event.event) < 0) {\n                this._eventHandler(event);\n            }\n        } catch (e) {\n            logger.log('Error handling adapter event: ' + (e ? e.stack : ''));\n        }\n    }\n}\n"]}