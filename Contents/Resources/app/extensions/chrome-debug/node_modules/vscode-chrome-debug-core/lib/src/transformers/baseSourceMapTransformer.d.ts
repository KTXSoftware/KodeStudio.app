import { DebugProtocol } from 'vscode-debugprotocol';
import { ISetBreakpointsArgs, ILaunchRequestArgs, IAttachRequestArgs, ISetBreakpointsResponseBody, IStackTraceResponseBody, IScopesResponseBody } from '../debugAdapterInterfaces';
import { MappedPosition, ISourcePathDetails } from '../sourceMaps/sourceMap';
import { SourceMaps } from '../sourceMaps/sourceMaps';
import * as utils from '../utils';
import { ISourceContainer } from '../chrome/chromeDebugAdapter';
/**
 * If sourcemaps are enabled, converts from source files on the client side to runtime files on the target side
 */
export declare class BaseSourceMapTransformer {
    protected _sourceMaps: SourceMaps;
    protected _sourceHandles: utils.ReverseHandles<ISourceContainer>;
    private _requestSeqToSetBreakpointsArgs;
    private _allRuntimeScriptPaths;
    private _authoredPathsToMappedBPs;
    protected _preLoad: Promise<void>;
    constructor(sourceHandles: utils.ReverseHandles<ISourceContainer>);
    readonly sourceMaps: SourceMaps;
    launch(args: ILaunchRequestArgs): void;
    attach(args: IAttachRequestArgs): void;
    protected init(args: ILaunchRequestArgs | IAttachRequestArgs): void;
    clearTargetContext(): void;
    /**
     * Apply sourcemapping to the setBreakpoints request path/lines.
     * Returns true if completed successfully, and setBreakpoint should continue.
     */
    setBreakpoints(args: ISetBreakpointsArgs, requestSeq: number): void;
    /**
     * Apply sourcemapping back to authored files from the response
     */
    setBreakpointsResponse(response: ISetBreakpointsResponseBody, requestSeq: number): void;
    /**
     * Apply sourcemapping to the stacktrace response
     */
    stackTraceResponse(response: IStackTraceResponseBody): void;
    /**
     * Get the existing handle for this script, identified by runtime scriptId, or create a new one
     */
    private getSourceReferenceForScriptPath(mappedPath, contents);
    scriptParsed(pathToGenerated: string, sourceMapURL: string): Promise<string[]>;
    breakpointResolved(bp: DebugProtocol.Breakpoint, scriptPath: string): void;
    scopesResponse(pathToGenerated: string, scopesResponse: IScopesResponseBody): void;
    private mapScopeLocations(pathToGenerated, scope);
    mapToGenerated(authoredPath: string, line: number, column: number): Promise<MappedPosition>;
    mapToAuthored(pathToGenerated: string, line: number, column: number): Promise<MappedPosition>;
    getGeneratedPathFromAuthoredPath(authoredPath: string): Promise<string>;
    allSourcePathDetails(pathToGenerated: string): Promise<ISourcePathDetails[]>;
}
