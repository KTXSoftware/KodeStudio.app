// Generated by Haxe 3.3.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Context = function(protocol) {
	this.protocol = protocol;
	protocol.onInitialize = $bind(this,this.onInitialize);
	protocol.onShutdown = $bind(this,this.onShutdown);
	protocol.onDidChangeConfiguration = $bind(this,this.onDidChangeConfiguration);
	protocol.onDidOpenTextDocument = $bind(this,this.onDidOpenTextDocument);
	protocol.onDidSaveTextDocument = $bind(this,this.onDidSaveTextDocument);
};
Context.__name__ = ["Context"];
Context.findHaxe = function(projectDir,kha) {
	var executableExtension = process.platform == "win32"?".exe":process.platform == "linux"?process.arch == "x64"?"-linux64":process.arch == "arm"?"-linuxarm":"-linux32":"-osx";
	var localPath = js_node_Path.join(projectDir,"Kha","Tools","haxe");
	try {
		if(js_node_Fs.statSync(localPath).isDirectory()) {
			return js_node_Path.join(localPath,"haxe" + executableExtension);
		}
	} catch( error ) {
		haxe_CallStack.lastException = error;
		var globalPath = js_node_Path.join(kha,"Tools","haxe");
		try {
			if(js_node_Fs.statSync(globalPath).isDirectory()) {
				return js_node_Path.join(globalPath,"haxe" + executableExtension);
			}
		} catch( error1 ) {
			haxe_CallStack.lastException = error1;
		}
	}
	return "";
};
Context.prototype = {
	onInitialize: function(params,token,resolve,reject) {
		var _gthis = this;
		this.workspacePath = params.rootPath;
		this.haxeServer = new HaxeServer();
		this.haxeServer.start(Context.findHaxe(this.workspacePath,params.initializationOptions.kha),6000,token,function(error) {
			if(error != null) {
				reject(jsonrpc_JsonRpc.error(0,error,{ retry : false}));
				return;
			}
			_gthis.documents = new TextDocuments(_gthis.protocol);
			new features_CompletionFeature(_gthis);
			new features_HoverFeature(_gthis);
			new features_SignatureHelpFeature(_gthis);
			new features_GotoDefinitionFeature(_gthis);
			new features_FindReferencesFeature(_gthis);
			new features_DocumentSymbolsFeature(_gthis);
			_gthis.diagnostics = new features_DiagnosticsFeature(_gthis);
			resolve({ capabilities : { textDocumentSync : 2, completionProvider : { triggerCharacters : ["."]}, signatureHelpProvider : { triggerCharacters : ["(",","]}, definitionProvider : true, hoverProvider : true, referencesProvider : true, documentSymbolProvider : true, codeActionProvider : true}});
			return;
		});
	}
	,onShutdown: function(token,resolve,reject) {
		this.haxeServer.stop();
		this.haxeServer = null;
		resolve();
		return;
	}
	,onDidChangeConfiguration: function(config) {
		var config1 = config.settings.haxe;
		this.displayArguments = config1.displayArguments;
	}
	,onDidOpenTextDocument: function(event) {
		this.documents.onDidOpenTextDocument(event);
		this.diagnostics.getDiagnostics(event.textDocument.uri);
	}
	,onDidSaveTextDocument: function(event) {
		this.documents.onDidSaveTextDocument(event);
		this.diagnostics.getDiagnostics(event.textDocument.uri);
	}
	,__class__: Context
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var ErrorUtils = function() { };
ErrorUtils.__name__ = ["ErrorUtils"];
ErrorUtils.errorToString = function(error,intro) {
	var result = intro + Std.string(error);
	var stack = haxe_CallStack.exceptionStack();
	if(stack != null && stack.length > 0) {
		result += "\n" + haxe_CallStack.toString(stack);
	}
	return result;
};
var Sys = function() { };
Sys.__name__ = ["Sys"];
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		return _g;
	}
};
var HaxePosition = function() { };
HaxePosition.__name__ = ["HaxePosition"];
HaxePosition.parse = function(pos,doc,cache) {
	if(!HaxePosition.positionRe.match(pos)) {
		return null;
	}
	var file = HaxePosition.getProperFileNameCase(HaxePosition.positionRe.matched(1));
	var s = HaxePosition.positionRe.matched(3);
	if(s != null) {
		var startLine = Std.parseInt(s);
		var endLine = Std.parseInt(HaxePosition.positionRe.matched(4));
		return { uri : file == doc.fsPath?doc.uri:Uri.fsPathToUri(file), range : { start : { line : startLine - 1, character : 0}, end : { line : endLine - 1, character : 0}}};
	} else {
		var line = Std.parseInt(HaxePosition.positionRe.matched(2));
		--line;
		var lineContent;
		var uri;
		if(file == doc.fsPath) {
			lineContent = doc.lineAt(line);
			uri = doc.uri;
		} else {
			var lines;
			if(cache == null) {
				lines = js_node_Fs.readFileSync(file,{ encoding : "utf8"}).split("\n");
			} else {
				lines = __map_reserved[file] != null?cache.getReserved(file):cache.h[file];
				if(lines == null) {
					var v = js_node_Fs.readFileSync(file,{ encoding : "utf8"}).split("\n");
					if(__map_reserved[file] != null) {
						cache.setReserved(file,v);
					} else {
						cache.h[file] = v;
					}
					lines = v;
				}
			}
			lineContent = lines[line];
			uri = Uri.fsPathToUri(file);
		}
		var endByte = Std.parseInt(HaxePosition.positionRe.matched(6));
		var endChar = new js_node_buffer_Buffer(lineContent,"utf-8").toString("utf-8",0,endByte).length;
		s = HaxePosition.positionRe.matched(5);
		var startChar;
		if(s != null) {
			var startByte = Std.parseInt(s);
			startChar = new js_node_buffer_Buffer(lineContent,"utf-8").toString("utf-8",0,startByte).length;
		} else {
			startChar = endChar;
		}
		return { uri : uri, range : { start : { line : line, character : startChar}, end : { line : line, character : endChar}}};
	}
};
HaxePosition.getProperFileNameCase = function(normalizedPath) {
	if(!HaxePosition.isWindows) {
		return normalizedPath;
	}
	if(HaxePosition.properFileNameCaseCache == null) {
		HaxePosition.properFileNameCaseCache = new haxe_ds_StringMap();
	} else {
		var _this = HaxePosition.properFileNameCaseCache;
		var cached = __map_reserved[normalizedPath] != null?_this.getReserved(normalizedPath):_this.h[normalizedPath];
		if(cached != null) {
			return cached;
		}
	}
	var result = normalizedPath;
	var parts = normalizedPath.split("\\");
	if(parts.length > 1) {
		var acc = parts[0];
		var _g1 = 1;
		var _g = parts.length;
		while(_g1 < _g) {
			var part = parts[_g1++];
			var _g2 = 0;
			var _g3 = js_node_Fs.readdirSync(acc);
			while(_g2 < _g3.length) {
				var realFile = _g3[_g2];
				++_g2;
				if(realFile.toLowerCase() == part) {
					part = realFile;
					break;
				}
			}
			acc = acc + "/" + part;
		}
		result = acc;
	}
	var _this1 = HaxePosition.properFileNameCaseCache;
	if(__map_reserved[normalizedPath] != null) {
		_this1.setReserved(normalizedPath,result);
	} else {
		_this1.h[normalizedPath] = result;
	}
	return result;
};
var HaxeServer = function() {
};
HaxeServer.__name__ = ["HaxeServer"];
HaxeServer.prototype = {
	start: function(haxePath,port,token,callback) {
		var _gthis = this;
		this.port = port;
		this.stop();
		this.proc = js_node_ChildProcess.spawn(haxePath,["--wait","" + port],{ stdio : "ignore"});
		this.process(["-version"],token,null,function(data) {
			if(!HaxeServer.reVersion.match(data)) {
				callback("Error parsing haxe version " + data);
				return;
			}
			var major = Std.parseInt(HaxeServer.reVersion.matched(1));
			var minor = Std.parseInt(HaxeServer.reVersion.matched(2));
			var patch = Std.parseInt(HaxeServer.reVersion.matched(3));
			if(major < 3 || minor < 3) {
				callback("Unsupported Haxe version! Minimum version required: 3.3.0");
			} else {
				_gthis.version = [major,minor,patch];
				callback(null);
			}
		},token.error);
	}
	,stop: function() {
		if(this.proc != null) {
			this.proc.kill();
			this.proc = null;
		}
	}
	,process: function(args,token,stdin,callback,errback) {
		if(stdin != null) {
			args.push("-D");
			args.push("display-stdin");
		}
		var socket = js_node_Net.connect(this.port);
		socket.on("error",function(e) {
			token.error(ErrorUtils.errorToString(e,"Error while communicating haxe server: "));
		});
		socket.on("connect",function() {
			if(token.canceled) {
				socket.end();
				callback(null);
				return;
			}
			var _g = 0;
			while(_g < args.length) {
				var arg = args[_g];
				++_g;
				socket.write(arg + "\n");
			}
			if(stdin != null) {
				socket.write("\x01");
				socket.write(stdin);
			}
			socket.write("\x00");
			var chunks = [];
			var totalLen = 0;
			socket.on("data",function(buf) {
				if(token.canceled) {
					socket.end();
					callback(null);
					return;
				}
				chunks.push(buf);
				totalLen += buf.length;
			});
			socket.on("end",function() {
				if(token.canceled) {
					callback(null);
					return;
				}
				if(totalLen == 0) {
					callback("");
					return;
				}
				var data = js_node_buffer_Buffer.concat(chunks,totalLen);
				var buf_b = "";
				var hasError = false;
				var _g1 = 0;
				var _g11 = data.toString().split("\n");
				while(_g1 < _g11.length) {
					var line = _g11[_g1];
					++_g1;
					switch(line.charCodeAt(0)) {
					case 1:
						haxe_Log.trace("Haxe print:\n" + StringTools.replace(line.substring(1),"\x01","\n"),{ fileName : "HaxeServer.hx", lineNumber : 91, className : "HaxeServer", methodName : "process"});
						break;
					case 2:
						hasError = true;
						break;
					default:
						buf_b += line == null?"null":"" + line;
						buf_b += "\n";
					}
				}
				var data1 = StringTools.trim(buf_b);
				if(hasError) {
					errback(data1);
					return;
				}
				try {
					callback(data1);
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
					token.error(ErrorUtils.errorToString(e1,"Exception while handling haxe completion response: "));
				}
			});
		});
	}
	,__class__: HaxeServer
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = ["Main"];
Main.main = function() {
	var reader = new jsonrpc_node_MessageReader(process.stdin);
	var protocol = new vscode_Protocol(($_=new jsonrpc_node_MessageWriter(process.stdout),$bind($_,$_.write)));
	Main.setupTrace(protocol);
	new Context(protocol);
	reader.listen($bind(protocol,protocol.handleMessage));
};
Main.setupTrace = function(protocol) {
	haxe_Log.trace = function(v,i) {
		var r = [Std.string(v)];
		if(i != null && i.customParams != null) {
			var _g = 0;
			var _g1 = i.customParams;
			while(_g < _g1.length) {
				var v1 = _g1[_g];
				++_g;
				r.push(Std.string(v1));
			}
		}
		protocol.writeMessage(jsonrpc_JsonRpc.notification("window/logMessage",{ type : 4, message : r.join(" ")}));
	};
};
Math.__name__ = ["Math"];
var SignatureHelper = function() { };
SignatureHelper.__name__ = ["SignatureHelper"];
SignatureHelper.getCloseChar = function(c) {
	switch(c) {
	case "(":
		return ")";
	case "<":
		return ">";
	case "{":
		return "}";
	default:
		throw new js__$Boot_HaxeError("unknown opening char " + c);
	}
};
SignatureHelper.prepareSignature = function(type) {
	var _g = SignatureHelper.parseDisplayType(type);
	switch(_g[1]) {
	case 0:
		var type1 = _g[2];
		if(type1 == null) {
			return "";
		} else {
			return type1;
		}
		break;
	case 1:
		return SignatureHelper.printFunctionSignature(_g[2],_g[3]);
	}
};
SignatureHelper.printFunctionSignature = function(args,ret) {
	var result_b = "";
	result_b = "(";
	var first = true;
	var _g = 0;
	while(_g < args.length) {
		var arg = args[_g];
		++_g;
		if(first) {
			first = false;
		} else {
			result_b += ", ";
		}
		result_b += Std.string(SignatureHelper.printFunctionArgument(arg));
	}
	result_b += ")";
	if(ret != null) {
		result_b += ":";
		result_b += ret == null?"null":"" + ret;
	}
	return result_b;
};
SignatureHelper.printFunctionArgument = function(arg) {
	var result = arg.name;
	if(arg.opt) {
		result = "?" + result;
	}
	if(arg.type != null) {
		result += ":";
		result += arg.type;
	}
	return result;
};
SignatureHelper.parseDisplayType = function(type) {
	type = StringTools.replace(type," -> ","%");
	var toplevel_b = "";
	var groups = new haxe_ds_IntMap();
	var closeStack = new haxe_ds_GenericStack();
	var depth = 0;
	var groupId = 0;
	var _g1 = 0;
	var _g = type.length;
	while(_g1 < _g) {
		var $char = type.charAt(_g1++);
		if($char == "(" || $char == "<" || $char == "{") {
			++depth;
			closeStack.head = new haxe_ds_GenericCell(SignatureHelper.getCloseChar($char),closeStack.head);
			if(depth == 1) {
				++groupId;
				groups.h[groupId] = new StringBuf();
				toplevel_b += $char == null?"null":"" + $char;
				toplevel_b += Std.string("$" + groupId);
				continue;
			}
		} else if($char == (closeStack.head == null?null:closeStack.head.elt)) {
			var k = closeStack.head;
			if(k != null) {
				closeStack.head = k.next;
			}
			--depth;
		}
		if(depth == 0) {
			toplevel_b += $char == null?"null":"" + $char;
		} else {
			groups.h[groupId].b += $char == null?"null":"" + $char;
		}
	}
	var processType = function(type1) {
		type1 = SignatureHelper.groupRegex.map(type1,function(r) {
			var groupId1 = Std.parseInt(r.matched(1));
			return StringTools.replace(groups.h[groupId1].b,"%","->");
		});
		if(SignatureHelper.parenRegex.match(type1)) {
			type1 = SignatureHelper.parenRegex.matched(1);
		}
		return type1;
	};
	var parts = toplevel_b.split("%");
	var returnType = processType(parts.pop());
	if(SignatureHelper.monomorphRegex.match(returnType)) {
		returnType = null;
	}
	if(parts.length > 0) {
		var args = [];
		var _g11 = 0;
		var _g2 = parts.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var part = parts[i];
			var name;
			var type2;
			var opt = false;
			if(SignatureHelper.argNameRegex.match(part)) {
				name = SignatureHelper.argNameRegex.matched(1);
				if(HxOverrides.cca(name,0) == 63) {
					name = name.substring(1);
					opt = true;
				}
				type2 = SignatureHelper.argNameRegex.matchedRight();
			} else {
				name = String.fromCharCode(97 + i);
				type2 = part;
				if(HxOverrides.cca(part,0) == 63) {
					type2 = part.substring(1);
					opt = true;
				}
			}
			if(opt && SignatureHelper.nullRegex.match(type2)) {
				type2 = SignatureHelper.nullRegex.matched(1);
			}
			type2 = processType(type2);
			if(type2 == "Void") {
				continue;
			}
			var arg = { name : name};
			if(!SignatureHelper.monomorphRegex.match(type2)) {
				arg.type = type2;
			}
			if(opt) {
				arg.opt = true;
			}
			args.push(arg);
		}
		return DisplayType.DTFunction(args,returnType);
	} else {
		return DisplayType.DTValue(returnType);
	}
};
var DisplayType = { __ename__ : true, __constructs__ : ["DTValue","DTFunction"] };
DisplayType.DTValue = function(type) { var $x = ["DTValue",0,type]; $x.__enum__ = DisplayType; $x.toString = $estr; return $x; };
DisplayType.DTFunction = function(args,ret) { var $x = ["DTFunction",1,args,ret]; $x.__enum__ = DisplayType; $x.toString = $estr; return $x; };
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var TextDocument = function(uri,languageId,version,content) {
	this.uri = uri;
	this.fsPath = Uri.uriToFsPath(uri);
	this.languageId = languageId;
	this.version = version;
	this.content = content;
};
TextDocument.__name__ = ["TextDocument"];
TextDocument.prototype = {
	update: function(events,version) {
		this.version = version;
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			if(event.range == null || event.rangeLength == null) {
				this.content = event.text;
			} else {
				var offset = this.offsetAt(event.range.start);
				this.content = this.content.substring(0,offset) + event.text + this.content.substring(offset + event.rangeLength);
			}
		}
		this.lineOffsets = null;
	}
	,offsetToByteOffset: function(offset) {
		if(offset == 0) {
			return 0;
		}
		if(offset == this.content.length) {
			return js_node_buffer_Buffer.byteLength(this.content);
		}
		return js_node_buffer_Buffer.byteLength(HxOverrides.substr(this.content,0,offset));
	}
	,lineAt: function(line) {
		var lineOffsets = this.getLineOffsets();
		if(line >= lineOffsets.length) {
			return "";
		} else if(line == lineOffsets.length - 1) {
			return this.content.substring(lineOffsets[line]);
		} else {
			return this.content.substring(lineOffsets[line],lineOffsets[line + 1]);
		}
	}
	,offsetAt: function(position) {
		var lineOffsets = this.getLineOffsets();
		if(position.line >= lineOffsets.length) {
			return this.content.length;
		} else if(position.line < 0) {
			return 0;
		}
		var lineOffset = lineOffsets[position.line];
		return Math.max(Math.min(lineOffset + position.character,position.line + 1 < lineOffsets.length?lineOffsets[position.line + 1]:this.content.length),lineOffset) | 0;
	}
	,getLineOffsets: function() {
		if(this.lineOffsets == null) {
			var offsets = [];
			var text = this.content;
			var isLineStart = true;
			var i = 0;
			while(i < text.length) {
				if(isLineStart) {
					offsets.push(i);
					isLineStart = false;
				}
				var ch = HxOverrides.cca(text,i);
				if(ch != 13) {
					isLineStart = ch == 10;
				} else {
					isLineStart = true;
				}
				if(ch == 13 && i + 1 < text.length && HxOverrides.cca(text,i + 1) == 10) {
					++i;
				}
				++i;
			}
			if(isLineStart && text.length > 0) {
				offsets.push(text.length);
			}
			return this.lineOffsets = offsets;
		}
		return this.lineOffsets;
	}
	,__class__: TextDocument
};
var TextDocuments = function(protocol) {
	this.documents = new haxe_ds_StringMap();
	protocol.onDidChangeTextDocument = $bind(this,this.onDidChangeTextDocument);
	protocol.onDidCloseTextDocument = $bind(this,this.onDidCloseTextDocument);
};
TextDocuments.__name__ = ["TextDocuments"];
TextDocuments.prototype = {
	onDidOpenTextDocument: function(event) {
		var td = event.textDocument;
		var document = new TextDocument(td.uri,td.languageId,td.version,td.text);
		document.saved = false;
		var _this = this.documents;
		var key = td.uri;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,document);
		} else {
			_this.h[key] = document;
		}
	}
	,onDidChangeTextDocument: function(event) {
		var td = event.textDocument;
		var changes = event.contentChanges;
		if(changes.length == 0) {
			return;
		}
		var _this = this.documents;
		var key = td.uri;
		var document = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		if(document != null) {
			document.update(changes,td.version);
			document.saved = false;
		}
	}
	,onDidCloseTextDocument: function(event) {
		this.documents.remove(event.textDocument.uri);
	}
	,onDidSaveTextDocument: function(event) {
		var _this = this.documents;
		var key = event.textDocument.uri;
		var document = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		if(document != null) {
			document.saved = true;
		}
	}
	,__class__: TextDocuments
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var Uri = function() { };
Uri.__name__ = ["Uri"];
Uri.fsPathToUri = function(path) {
	path = StringTools.replace(path,"\\","/");
	if(path.charCodeAt(0) != 47) {
		path = "/" + path;
	}
	var parts = ["file://"];
	if(Uri.upperCaseDriveRe.match(path)) {
		path = Uri.upperCaseDriveRe.matched(1) + Uri.upperCaseDriveRe.matched(2).toLowerCase() + Uri.upperCaseDriveRe.matchedRight();
	}
	var lastIdx = 0;
	while(true) {
		var idx = path.indexOf("/",lastIdx);
		if(idx == -1) {
			var s = path.substring(lastIdx);
			parts.push(encodeURIComponent(s));
			break;
		}
		var s1 = path.substring(lastIdx,idx);
		parts.push(encodeURIComponent(s1));
		parts.push("/");
		lastIdx = idx + 1;
	}
	return parts.join("");
};
Uri.uriToFsPath = function(uri) {
	if(!Uri.uriRe.match(uri) || Uri.uriRe.matched(2) != "file") {
		throw new js__$Boot_HaxeError("Invalid uri: " + uri);
	}
	var s = Uri.uriRe.matched(5);
	var path = decodeURIComponent(s.split("+").join(" "));
	if(Uri.driveLetterPathRe.match(path)) {
		return path.charAt(1).toLowerCase() + HxOverrides.substr(path,2,null);
	} else {
		return path;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		return __map_reserved[att] != null?_this.getReserved(att):_this.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var features_Feature = function(context) {
	this.context = context;
	this.init();
};
features_Feature.__name__ = ["features","Feature"];
features_Feature.prototype = {
	init: function() {
	}
	,callDisplay: function(args,stdin,token,callback) {
		var actualArgs = ["--cwd",this.context.workspacePath + "/build"];
		actualArgs = actualArgs.concat(this.context.displayArguments);
		actualArgs = actualArgs.concat(["-D","display-details","--no-output"]);
		actualArgs = actualArgs.concat(args);
		this.context.haxeServer.process(actualArgs,token,stdin,callback,function(error) {
			token.error("Error from haxe server: " + error);
		});
	}
	,__class__: features_Feature
};
var features_CompletionFeature = function(context) {
	features_Feature.call(this,context);
};
features_CompletionFeature.__name__ = ["features","CompletionFeature"];
features_CompletionFeature.calculateCompletionPosition = function(text,index) {
	text = text.substring(0,index);
	if(features_CompletionFeature.reFieldPart.match(text)) {
		return { pos : index - features_CompletionFeature.reFieldPart.matched(1).length, toplevel : false};
	} else {
		return { pos : index, toplevel : true};
	}
};
features_CompletionFeature.parseToplevelCompletion = function(x) {
	var result = [];
	var tmp = x.elements();
	while(tmp.hasNext()) {
		var el = tmp.next();
		var kind = el.get("k");
		var type = el.get("t");
		if(el.nodeType != Xml.Document && el.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + el.nodeType);
		}
		var _this = el.children[0];
		if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this.nodeType);
		}
		var name = _this.nodeValue;
		var item = { label : name};
		var displayKind = features_CompletionFeature.toplevelKindToCompletionItemKind(kind);
		if(displayKind != null) {
			item.kind = displayKind;
		}
		var fullName = name;
		if(kind == "global") {
			fullName = el.get("p") + "." + name;
		} else if(kind == "type") {
			fullName = el.get("p");
		}
		if(type != null || fullName != name) {
			var parts = [];
			if(fullName != name) {
				parts.push("(" + fullName + ")");
			}
			if(type != null) {
				parts.push(type);
			}
			item.detail = parts.join(" ");
		}
		var doc = el.get("d");
		if(doc != null) {
			item.documentation = doc;
		}
		result.push(item);
	}
	return result;
};
features_CompletionFeature.toplevelKindToCompletionItemKind = function(kind) {
	switch(kind) {
	case "enum":
		return 13;
	case "global":
		return 6;
	case "local":
		return 6;
	case "member":
		return 5;
	case "package":
		return 9;
	case "static":
		return 7;
	case "type":
		return 7;
	default:
		haxe_Log.trace("unknown toplevel item kind: " + kind,{ fileName : "CompletionFeature.hx", lineNumber : 93, className : "features.CompletionFeature", methodName : "toplevelKindToCompletionItemKind"});
		return null;
	}
};
features_CompletionFeature.parseFieldCompletion = function(x) {
	var result = [];
	var tmp = x.elements();
	while(tmp.hasNext()) {
		var el = tmp.next();
		var kind = features_CompletionFeature.fieldKindToCompletionItemKind(el.get("k"));
		var type = null;
		var doc = null;
		var tmp1 = el.elements();
		while(tmp1.hasNext()) {
			var child = tmp1.next();
			if(child.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
			}
			switch(child.nodeName) {
			case "d":
				if(child.nodeType != Xml.Document && child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + child.nodeType);
				}
				var _this = child.children[0];
				if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this.nodeType);
				}
				doc = _this.nodeValue;
				break;
			case "t":
				if(child.nodeType != Xml.Document && child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + child.nodeType);
				}
				var _this1 = child.children[0];
				if(_this1.nodeType == Xml.Document || _this1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this1.nodeType);
				}
				type = _this1.nodeValue;
				break;
			}
		}
		var name = el.get("n");
		var item = { label : name};
		if(doc != null) {
			item.documentation = doc;
		}
		if(kind != null) {
			item.kind = kind;
		}
		if(type != null) {
			item.detail = features_CompletionFeature.formatType(type,name,kind);
		}
		result.push(item);
	}
	return result;
};
features_CompletionFeature.formatType = function(type,name,kind) {
	if(kind == 2) {
		return name + SignatureHelper.prepareSignature(type);
	} else {
		return type;
	}
};
features_CompletionFeature.fieldKindToCompletionItemKind = function(kind) {
	switch(kind) {
	case "method":
		return 2;
	case "package":
		return 9;
	case "type":
		return 7;
	case "var":
		return 5;
	default:
		haxe_Log.trace("unknown field item kind: " + kind,{ fileName : "CompletionFeature.hx", lineNumber : 132, className : "features.CompletionFeature", methodName : "fieldKindToCompletionItemKind"});
		return null;
	}
};
features_CompletionFeature.__super__ = features_Feature;
features_CompletionFeature.prototype = $extend(features_Feature.prototype,{
	init: function() {
		this.context.protocol.onCompletion = $bind(this,this.onCompletion);
	}
	,onCompletion: function(params,token,resolve,reject) {
		var _this = this.context.documents.documents;
		var key = params.textDocument.uri;
		var doc = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		var r = features_CompletionFeature.calculateCompletionPosition(doc.content,doc.offsetAt(params.position));
		this.callDisplay(["--display","" + doc.fsPath + "@" + doc.offsetToByteOffset(r.pos) + (r.toplevel?"@toplevel":"")],doc.saved?null:doc.content,token,function(data) {
			if(token.canceled) {
				return;
			}
			var xml;
			try {
				xml = Xml.parse(data).firstElement();
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				xml = null;
			}
			if(xml == null) {
				reject(jsonrpc_JsonRpc.error(-32603,"Invalid xml data: " + data));
				return;
			}
			resolve(r.toplevel?features_CompletionFeature.parseToplevelCompletion(xml):features_CompletionFeature.parseFieldCompletion(xml));
		});
	}
	,__class__: features_CompletionFeature
});
var features__$DiagnosticsFeature_DiagnosticKind_$Impl_$ = {};
features__$DiagnosticsFeature_DiagnosticKind_$Impl_$.__name__ = ["features","_DiagnosticsFeature","DiagnosticKind_Impl_"];
features__$DiagnosticsFeature_DiagnosticKind_$Impl_$.getMessage = function(this1) {
	switch(this1) {
	case 0:
		return "Unused import";
	}
};
var features_DiagnosticsFeature = function(context) {
	features_Feature.call(this,context);
	context.protocol.onCodeAction = $bind(this,this.onCodeAction);
};
features_DiagnosticsFeature.__name__ = ["features","DiagnosticsFeature"];
features_DiagnosticsFeature.__super__ = features_Feature;
features_DiagnosticsFeature.prototype = $extend(features_Feature.prototype,{
	getDiagnostics: function(uri) {
		var _gthis = this;
		var _this = this.context.documents.documents;
		var doc = __map_reserved[uri] != null?_this.getReserved(uri):_this.h[uri];
		var processReply = function(s) {
			var data;
			try {
				data = JSON.parse(s);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				haxe_Log.trace("Error parsing diagnostics response: " + Std.string(e),{ fileName : "DiagnosticsFeature.hx", lineNumber : 36, className : "features.DiagnosticsFeature", methodName : "getDiagnostics"});
				return;
			}
			var diagnostics = data.map(function(diag) {
				return { range : diag.range, source : "haxe", code : diag.kind, severity : 2, message : features__$DiagnosticsFeature_DiagnosticKind_$Impl_$.getMessage(diag.kind)};
			});
			_gthis.context.protocol.writeMessage(jsonrpc_JsonRpc.notification("textDocument/publishDiagnostics",{ uri : uri, diagnostics : diagnostics}));
		};
		this.callDisplay(["--display",doc.fsPath + "@0@diagnostics"],null,new jsonrpc_RequestToken(function(s1) {
			haxe_Log.trace(s1,{ fileName : "DiagnosticsFeature.hx", lineNumber : 50, className : "features.DiagnosticsFeature", methodName : "getDiagnostics"});
		}),processReply);
	}
	,onCodeAction: function(params,token,resolve,reject) {
		var ret = [];
		var _g = 0;
		var _g1 = params.context.diagnostics;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d.code == 0) {
				ret.push({ title : "Remove import", command : "haxe.applyFixes", 'arguments' : [params.textDocument.uri,0,[{ range : d.range, newText : ""}]]});
			}
		}
		resolve(ret);
	}
	,__class__: features_DiagnosticsFeature
});
var features_DocumentSymbolsFeature = function(context) {
	features_Feature.call(this,context);
};
features_DocumentSymbolsFeature.__name__ = ["features","DocumentSymbolsFeature"];
features_DocumentSymbolsFeature.__super__ = features_Feature;
features_DocumentSymbolsFeature.prototype = $extend(features_Feature.prototype,{
	init: function() {
		this.context.protocol.onDocumentSymbols = $bind(this,this.onDocumentSymbols);
	}
	,onDocumentSymbols: function(params,token,resolve,reject) {
		var _gthis = this;
		var _this = this.context.documents.documents;
		var key = params.textDocument.uri;
		var doc = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		this.callDisplay(["--display","" + doc.fsPath + "@0@module-symbols"],doc.saved?null:doc.content,token,function(data) {
			if(token.canceled) {
				return;
			}
			var data1;
			try {
				data1 = JSON.parse(data);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				reject(jsonrpc_JsonRpc.error(-32603,"Error parsing document symbol response: " + Std.string(e)));
				return;
			}
			var result = [];
			var _g = 0;
			while(_g < data1.length) {
				var entry = data1[_g];
				++_g;
				if(entry.range == null) {
					_gthis.context.protocol.writeMessage(jsonrpc_JsonRpc.notification("window/showMessage",{ type : 1, message : "Unknown location for " + JSON.stringify(entry)}));
					continue;
				}
				result.push(_gthis.moduleSymbolEntryToSymbolInformation(entry,doc));
			}
			resolve(result);
		});
	}
	,moduleSymbolEntryToSymbolInformation: function(entry,document) {
		var tmp;
		switch(entry.kind) {
		case 1:case 5:
			tmp = 5;
			break;
		case 2:case 4:
			tmp = 11;
			break;
		case 3:
			tmp = 10;
			break;
		case 6:
			tmp = 8;
			break;
		case 7:
			tmp = 7;
			break;
		case 8:
			tmp = 6;
			break;
		case 9:
			tmp = 9;
			break;
		case 10:
			tmp = 12;
			break;
		case 11:
			tmp = 13;
			break;
		}
		var p = entry.range.start;
		var line = document.lineAt(p.line);
		var tmp1 = p.line;
		var byteOffset = p.character;
		var tmp2 = { line : tmp1, character : new js_node_buffer_Buffer(line,"utf-8").toString("utf-8",0,byteOffset).length};
		var p1 = entry.range.end;
		var line1 = document.lineAt(p1.line);
		var tmp3 = p1.line;
		var byteOffset1 = p1.character;
		var result = { name : entry.name, kind : tmp, location : { uri : document.uri, range : { start : tmp2, end : { line : tmp3, character : new js_node_buffer_Buffer(line1,"utf-8").toString("utf-8",0,byteOffset1).length}}}};
		if(entry.containerName != null) {
			result.containerName = entry.containerName;
		}
		return result;
	}
	,__class__: features_DocumentSymbolsFeature
});
var features_FindReferencesFeature = function(context) {
	features_Feature.call(this,context);
};
features_FindReferencesFeature.__name__ = ["features","FindReferencesFeature"];
features_FindReferencesFeature.__super__ = features_Feature;
features_FindReferencesFeature.prototype = $extend(features_Feature.prototype,{
	init: function() {
		this.context.protocol.onFindReferences = $bind(this,this.onFindReferences);
	}
	,onFindReferences: function(params,token,resolve,reject) {
		var _this = this.context.documents.documents;
		var key = params.textDocument.uri;
		var doc = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		this.callDisplay(["--display","" + doc.fsPath + "@" + doc.offsetToByteOffset(doc.offsetAt(params.position)) + "@usage"],doc.saved?null:doc.content,token,function(data) {
			if(token.canceled) {
				return;
			}
			var xml;
			try {
				xml = Xml.parse(data).firstElement();
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				xml = null;
			}
			if(xml == null) {
				reject(jsonrpc_JsonRpc.error(-32603,"Invalid xml data: " + data));
				return;
			}
			var _g = [];
			var tmp = xml.elements();
			while(tmp.hasNext()) {
				var el = tmp.next();
				if(el.nodeType != Xml.Document && el.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + el.nodeType);
				}
				var _this1 = el.children[0];
				if(_this1.nodeType == Xml.Document || _this1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this1.nodeType);
				}
				_g.push(_this1.nodeValue);
			}
			if(_g.length == 0) {
				resolve([]);
				return;
			}
			var results = [];
			var haxePosCache = new haxe_ds_StringMap();
			var _g1 = 0;
			while(_g1 < _g.length) {
				var pos = _g[_g1];
				++_g1;
				var location = HaxePosition.parse(pos,doc,haxePosCache);
				if(location == null) {
					haxe_Log.trace("Got invalid position: " + pos,{ fileName : "FindReferencesFeature.hx", lineNumber : 33, className : "features.FindReferencesFeature", methodName : "onFindReferences"});
					continue;
				}
				results.push(location);
			}
			resolve(results);
			return;
		});
	}
	,__class__: features_FindReferencesFeature
});
var features_GotoDefinitionFeature = function(context) {
	features_Feature.call(this,context);
};
features_GotoDefinitionFeature.__name__ = ["features","GotoDefinitionFeature"];
features_GotoDefinitionFeature.__super__ = features_Feature;
features_GotoDefinitionFeature.prototype = $extend(features_Feature.prototype,{
	init: function() {
		this.context.protocol.onGotoDefinition = $bind(this,this.onGotoDefinition);
	}
	,onGotoDefinition: function(params,token,resolve,reject) {
		var _this = this.context.documents.documents;
		var key = params.textDocument.uri;
		var doc = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		this.callDisplay(["--display","" + doc.fsPath + "@" + doc.offsetToByteOffset(doc.offsetAt(params.position)) + "@position"],doc.saved?null:doc.content,token,function(data) {
			if(token.canceled) {
				return;
			}
			var xml;
			try {
				xml = Xml.parse(data).firstElement();
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				xml = null;
			}
			if(xml == null) {
				reject(jsonrpc_JsonRpc.error(-32603,"Invalid xml data: " + data));
				return;
			}
			var _g = [];
			var tmp = xml.elements();
			while(tmp.hasNext()) {
				var el = tmp.next();
				if(el.nodeType != Xml.Document && el.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + el.nodeType);
				}
				var _this1 = el.children[0];
				if(_this1.nodeType == Xml.Document || _this1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this1.nodeType);
				}
				_g.push(_this1.nodeValue);
			}
			if(_g.length == 0) {
				resolve([]);
				return;
			}
			var results = [];
			var _g1 = 0;
			while(_g1 < _g.length) {
				var pos = _g[_g1];
				++_g1;
				var location = HaxePosition.parse(pos,doc,null);
				if(location == null) {
					haxe_Log.trace("Got invalid position: " + pos,{ fileName : "GotoDefinitionFeature.hx", lineNumber : 33, className : "features.GotoDefinitionFeature", methodName : "onGotoDefinition"});
					continue;
				}
				results.push(location);
			}
			resolve(results);
			return;
		});
	}
	,__class__: features_GotoDefinitionFeature
});
var features_HoverFeature = function(context) {
	features_Feature.call(this,context);
};
features_HoverFeature.__name__ = ["features","HoverFeature"];
features_HoverFeature.__super__ = features_Feature;
features_HoverFeature.prototype = $extend(features_Feature.prototype,{
	init: function() {
		this.context.protocol.onHover = $bind(this,this.onHover);
	}
	,onHover: function(params,token,resolve,reject) {
		var _this = this.context.documents.documents;
		var key = params.textDocument.uri;
		var doc = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		this.callDisplay(["--display","" + doc.fsPath + "@" + doc.offsetToByteOffset(doc.offsetAt(params.position)) + "@type"],doc.saved?null:doc.content,token,function(data) {
			if(token.canceled) {
				return;
			}
			var xml;
			try {
				xml = Xml.parse(data).firstElement();
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				xml = null;
			}
			if(xml == null) {
				reject(jsonrpc_JsonRpc.error(-32603,"Invalid xml data: " + data));
				return;
			}
			if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
			}
			var _this1 = xml.children[0];
			if(_this1.nodeType == Xml.Document || _this1.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this1.nodeType);
			}
			var s = StringTools.trim(_this1.nodeValue);
			var type;
			var _g = SignatureHelper.parseDisplayType(s);
			switch(_g[1]) {
			case 0:
				var type1 = _g[2];
				if(type1 == null) {
					type = "unknown";
				} else {
					type = type1;
				}
				break;
			case 1:
				type = "function" + SignatureHelper.printFunctionSignature(_g[2],_g[3]);
				break;
			}
			var result = { contents : { language : "haxe", value : type}};
			var p = HaxePosition.parse(xml.get("p"),doc,null);
			if(p != null) {
				result.range = p.range;
			}
			resolve(result);
		});
	}
	,__class__: features_HoverFeature
});
var features_SignatureHelpFeature = function(context) {
	features_Feature.call(this,context);
};
features_SignatureHelpFeature.__name__ = ["features","SignatureHelpFeature"];
features_SignatureHelpFeature.calculateSignaturePosition = function(text,index) {
	text = features_SignatureHelpFeature.prepareText(text.substring(0,index));
	var parens = 0;
	var braces = 0;
	var brackets = 0;
	var argIndex = 0;
	var i = index - 1;
	while(i > 0) {
		var _g = text.charCodeAt(i);
		switch(_g) {
		case 34:case 39:
			while(i >= 0) {
				--i;
				if(text.charCodeAt(i) == _g) {
					break;
				}
			}
			break;
		case 40:
			if(parens > 0) {
				--parens;
			} else {
				var textBefore = text.substring(0,i);
				if(features_SignatureHelpFeature.reEndsWithCall.match(textBefore)) {
					if(features_SignatureHelpFeature.reEndsWithFunctionDef.match(textBefore)) {
						return null;
					} else {
						return { pos : i + 1, arg : argIndex};
					}
				}
				argIndex = 0;
			}
			break;
		case 41:
			++parens;
			break;
		case 44:
			if(parens == 0 && braces == 0 && brackets == 0) {
				++argIndex;
			}
			break;
		case 91:
			if(brackets > 0) {
				--brackets;
			} else {
				argIndex = 0;
			}
			break;
		case 93:
			++brackets;
			break;
		case 123:
			if(braces > 0) {
				--braces;
			} else {
				argIndex = 0;
			}
			break;
		case 125:
			++braces;
			break;
		}
		--i;
	}
	return null;
};
features_SignatureHelpFeature.prepareText = function(input) {
	var output = "";
	var inLineComment = false;
	var inBlockComment = false;
	var i = 0;
	var len = input.length;
	while(i < len) if(inLineComment) {
		if(input.charCodeAt(i) == 10) {
			inLineComment = false;
			output += "\n";
		} else {
			output += " ";
		}
		++i;
	} else if(inBlockComment) {
		if(HxOverrides.substr(input,i,2) == "*/") {
			inBlockComment = false;
			output += "  ";
			i += 2;
		} else {
			if(input.charCodeAt(i) == 10) {
				output += "\n";
			} else {
				output += " ";
			}
			++i;
		}
	} else if(HxOverrides.substr(input,i,2) == "//") {
		inLineComment = true;
		output += "  ";
		i += 2;
	} else if(HxOverrides.substr(input,i,2) == "/*") {
		inBlockComment = true;
		output += "  ";
		i += 2;
	} else if(input.charCodeAt(i) == 39 || input.charCodeAt(i) == 34) {
		if(features_SignatureHelpFeature.reStartsWithString.match(input.substring(i))) {
			output += "\"";
			var stringLength = features_SignatureHelpFeature.reStartsWithString.matched(0).length;
			var _g1 = 0;
			var _g = stringLength - 2;
			while(_g1 < _g) {
				++_g1;
				output += " ";
			}
			output += "\"";
			i += stringLength;
		} else {
			while(i < len) {
				output += " ";
				++i;
			}
		}
	} else if(input.charCodeAt(i) == 126) {
		if(features_SignatureHelpFeature.reStartsWithRegex.match(input.substring(i))) {
			output += "~/";
			var regexLength = features_SignatureHelpFeature.reStartsWithRegex.matched(0).length;
			var _g11 = 1;
			var _g2 = regexLength - 2;
			while(_g11 < _g2) {
				++_g11;
				output += " ";
			}
			output += "/";
			i += regexLength;
		} else {
			while(i < len) {
				output += " ";
				++i;
			}
		}
	} else {
		output += input.charAt(i);
		++i;
	}
	return output.toString();
};
features_SignatureHelpFeature.__super__ = features_Feature;
features_SignatureHelpFeature.prototype = $extend(features_Feature.prototype,{
	init: function() {
		this.context.protocol.onSignatureHelp = $bind(this,this.onSignatureHelp);
	}
	,onSignatureHelp: function(params,token,resolve,reject) {
		var _this = this.context.documents.documents;
		var key = params.textDocument.uri;
		var doc = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		var r = features_SignatureHelpFeature.calculateSignaturePosition(doc.content,doc.offsetAt(params.position));
		if(r == null) {
			reject(jsonrpc_JsonRpc.error(0,"Invalid signature position " + Std.string(params.position)));
			return;
		}
		this.callDisplay(["--display","" + doc.fsPath + "@" + doc.offsetToByteOffset(r.pos)],doc.saved?null:doc.content,token,function(data) {
			if(token.canceled) {
				return;
			}
			data = "<x>" + data + "</x>";
			var xml;
			try {
				xml = Xml.parse(data).firstElement();
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				xml = null;
			}
			if(xml == null) {
				reject(jsonrpc_JsonRpc.error(-32603,"Invalid xml data: " + data));
				return;
			}
			var signatures = [];
			var tmp = xml.elements();
			while(tmp.hasNext()) {
				var el = tmp.next();
				if(el.nodeType != Xml.Document && el.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + el.nodeType);
				}
				var _this1 = el.children[0];
				if(_this1.nodeType == Xml.Document || _this1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _this1.nodeType);
				}
				var text = StringTools.trim(_this1.nodeValue);
				var signature;
				var _g = SignatureHelper.parseDisplayType(text);
				if(_g[1] == 1) {
					var ret = _g[3];
					var args = _g[2];
					var tmp1 = SignatureHelper.printFunctionSignature(args,ret);
					var _g1 = [];
					var _g11 = 0;
					while(_g11 < args.length) {
						var arg = args[_g11];
						++_g11;
						_g1.push({ label : SignatureHelper.printFunctionArgument(arg)});
					}
					signature = { label : tmp1, parameters : _g1};
				} else {
					signature = { label : text};
				}
				signatures.push(signature);
			}
			resolve({ signatures : signatures, activeSignature : 0, activeParameter : r.arg});
		});
	}
	,__class__: features_SignatureHelpFeature
});
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null?"null":"" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null?"null":"" + file;
		b.b += " line ";
		b.b += line == null?"null":"" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null?"null":"" + cname;
		b.b += ".";
		b.b += meth == null?"null":"" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null?"null":"" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
haxe_ds_GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe_ds_GenericCell.prototype = {
	__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
haxe_ds_GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe_ds_GenericStack.prototype = {
	__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var c = xml.charCodeAt(_g1++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					buf.b += String.fromCharCode(s.charCodeAt(1) == 120?Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)):Std.parseInt(HxOverrides.substr(s,1,s.length - 1)));
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null?_this.existsReserved(s):_this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null?_this1.getReserved(s):_this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null?i.fileName + ":" + i.lineNumber + ": ":"";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Net = require("net");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var jsonrpc_JsonRpc = function() { };
jsonrpc_JsonRpc.__name__ = ["jsonrpc","JsonRpc"];
jsonrpc_JsonRpc.notification = function(method,params) {
	var message = { jsonrpc : "2.0", method : method};
	if(params != null) {
		message.params = params;
	}
	return message;
};
jsonrpc_JsonRpc.response = function(id,result,error) {
	var response = { jsonrpc : "2.0", id : id};
	if(error != null) {
		response.error = error;
	} else {
		response.result = result;
	}
	return response;
};
jsonrpc_JsonRpc.error = function(code,message,data) {
	var error = { code : code, message : message};
	if(data != null) {
		error.data = data;
	}
	return error;
};
var jsonrpc_Protocol = function(writeMessage) {
	this.writeMessage = writeMessage;
	this.requestTokens = new haxe_ds_StringMap();
};
jsonrpc_Protocol.__name__ = ["jsonrpc","Protocol"];
jsonrpc_Protocol.prototype = {
	handleMessage: function(message) {
		var _gthis = this;
		if(!Object.prototype.hasOwnProperty.call(message,"method")) {
			return;
		}
		if(Object.prototype.hasOwnProperty.call(message,"id")) {
			var request = message;
			var tokenKey = Std.string(request.id);
			var resolve = function(result) {
				_gthis.requestTokens.remove(tokenKey);
				_gthis.writeMessage(jsonrpc_JsonRpc.response(request.id,result,null));
			};
			var reject = function(error) {
				_gthis.requestTokens.remove(tokenKey);
				_gthis.writeMessage(jsonrpc_JsonRpc.response(request.id,null,error));
			};
			var onError = function(message1) {
				reject(jsonrpc_JsonRpc.error(-32603,message1));
				_gthis.logError(message1);
			};
			var v = new jsonrpc_RequestToken(onError);
			var _this = this.requestTokens;
			if(__map_reserved[tokenKey] != null) {
				_this.setReserved(tokenKey,v);
			} else {
				_this.h[tokenKey] = v;
			}
			try {
				this.handleRequest(request,v,resolve,reject);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.requestTokens.remove(tokenKey);
				onError(ErrorUtils.errorToString(e,"Exception while handling request " + request.method + ": "));
			}
		} else {
			var notification = message;
			if(notification.method == "$/cancelRequest") {
				this.cancelRequest(notification.params);
			} else {
				try {
					this.handleNotification(notification);
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
					this.logError(ErrorUtils.errorToString(e1,"Exception while handing notification " + notification.method + ": "));
				}
			}
		}
	}
	,cancelRequest: function(params) {
		var tokenKey = Std.string(params.id);
		var _this = this.requestTokens;
		var token = __map_reserved[tokenKey] != null?_this.getReserved(tokenKey):_this.h[tokenKey];
		if(token != null) {
			token.canceled = true;
			this.requestTokens.remove(tokenKey);
		}
	}
	,handleRequest: function(request,cancelToken,resolve,reject) {
		reject(jsonrpc_JsonRpc.error(-32603,"handleRequest not implemented"));
	}
	,handleNotification: function(notification) {
	}
	,logError: function(message) {
	}
	,__class__: jsonrpc_Protocol
};
var jsonrpc_RequestToken = function(onError) {
	this.canceled = false;
	this.error = onError;
};
jsonrpc_RequestToken.__name__ = ["jsonrpc","RequestToken"];
jsonrpc_RequestToken.prototype = {
	__class__: jsonrpc_RequestToken
};
var jsonrpc_node_MessageReader = function(readable,encoding) {
	if(encoding == null) {
		encoding = "utf-8";
	}
	this.readable = readable;
	this.buffer = new jsonrpc_node__$MessageReader_MessageBuffer(encoding);
};
jsonrpc_node_MessageReader.__name__ = ["jsonrpc","node","MessageReader"];
jsonrpc_node_MessageReader.prototype = {
	listen: function(cb) {
		this.nextMessageLength = -1;
		this.callback = cb;
		this.readable.on("data",$bind(this,this.onData));
	}
	,onData: function(data) {
		this.buffer.append(data);
		while(true) {
			if(this.nextMessageLength == -1) {
				var headers = this.buffer.tryReadHeaders();
				if(headers == null) {
					return;
				}
				var contentLength = __map_reserved["Content-Length"] != null?headers.getReserved("Content-Length"):headers.h["Content-Length"];
				if(contentLength == null) {
					throw new js__$Boot_HaxeError("Header must provide a Content-Length property.");
				}
				var length = Std.parseInt(contentLength);
				if(length == null) {
					throw new js__$Boot_HaxeError("Content-Length value must be a number.");
				}
				this.nextMessageLength = length;
			}
			var msg = this.buffer.tryReadContent(this.nextMessageLength);
			if(msg == null) {
				return;
			}
			this.nextMessageLength = -1;
			var json = JSON.parse(msg);
			this.callback(json);
		}
	}
	,__class__: jsonrpc_node_MessageReader
};
var jsonrpc_node__$MessageReader_MessageBuffer = function(encoding) {
	if(encoding == null) {
		encoding = "utf-8";
	}
	this.encoding = encoding;
	this.index = 0;
	this.buffer = new js_node_buffer_Buffer(8192);
};
jsonrpc_node__$MessageReader_MessageBuffer.__name__ = ["jsonrpc","node","_MessageReader","MessageBuffer"];
jsonrpc_node__$MessageReader_MessageBuffer.prototype = {
	append: function(chunk) {
		var toAppend;
		if(typeof(chunk) == "string") {
			var str = chunk;
			toAppend = new js_node_buffer_Buffer(str.length);
			toAppend.write(str,0,str.length,this.encoding);
		} else {
			toAppend = chunk;
		}
		if(this.buffer.length - this.index >= toAppend.length) {
			toAppend.copy(this.buffer,this.index,0,toAppend.length);
		} else {
			var newSize = (Math.ceil((this.index + toAppend.length) / 8192) + 1) * 8192;
			if(this.index == 0) {
				this.buffer = new js_node_buffer_Buffer(newSize);
				toAppend.copy(this.buffer,0,0,toAppend.length);
			} else {
				this.buffer = js_node_buffer_Buffer.concat([this.buffer.slice(0,this.index),toAppend],newSize);
			}
		}
		this.index += toAppend.length;
	}
	,tryReadHeaders: function() {
		var current = 0;
		while(current + 3 < this.index && (this.buffer[current] != jsonrpc_node__$MessageReader_MessageBuffer.CR || this.buffer[current + 1] != jsonrpc_node__$MessageReader_MessageBuffer.LF || this.buffer[current + 2] != jsonrpc_node__$MessageReader_MessageBuffer.CR || this.buffer[current + 3] != jsonrpc_node__$MessageReader_MessageBuffer.LF)) ++current;
		if(current + 3 >= this.index) {
			return null;
		}
		var result = new haxe_ds_StringMap();
		var headers = this.buffer.toString("ascii",0,current).split("\r\n");
		var _g = 0;
		while(_g < headers.length) {
			var header = headers[_g];
			++_g;
			var index = header.indexOf(":");
			if(index == -1) {
				throw new js__$Boot_HaxeError("Message header must separate key and value using :");
			}
			var key = HxOverrides.substr(header,0,index);
			var value = StringTools.trim(HxOverrides.substr(header,index + 1,null));
			if(__map_reserved[key] != null) {
				result.setReserved(key,value);
			} else {
				result.h[key] = value;
			}
		}
		var nextStart = current + 4;
		this.buffer = this.buffer.slice(nextStart);
		this.index = this.index - nextStart;
		return result;
	}
	,tryReadContent: function(length) {
		if(this.index < length) {
			return null;
		}
		var result = this.buffer.toString(this.encoding,0,length);
		this.buffer.copy(this.buffer,0,length);
		this.index -= length;
		return result;
	}
	,__class__: jsonrpc_node__$MessageReader_MessageBuffer
};
var jsonrpc_node_MessageWriter = function(writable,encoding) {
	if(encoding == null) {
		encoding = "utf8";
	}
	this.writable = writable;
	this.encoding = encoding;
};
jsonrpc_node_MessageWriter.__name__ = ["jsonrpc","node","MessageWriter"];
jsonrpc_node_MessageWriter.prototype = {
	write: function(msg) {
		var json = JSON.stringify(msg);
		var contentLength = js_node_buffer_Buffer.byteLength(json,this.encoding);
		this.writable.write("Content-Length: ","ascii");
		this.writable.write("" + contentLength,"ascii");
		this.writable.write("\r\n");
		this.writable.write("\r\n");
		this.writable.write(json,this.encoding);
	}
	,__class__: jsonrpc_node_MessageWriter
};
var vscode_Protocol = function(writeMessage) {
	jsonrpc_Protocol.call(this,writeMessage);
};
vscode_Protocol.__name__ = ["vscode","Protocol"];
vscode_Protocol.__super__ = jsonrpc_Protocol;
vscode_Protocol.prototype = $extend(jsonrpc_Protocol.prototype,{
	logError: function(message) {
		this.writeMessage(jsonrpc_JsonRpc.notification("window/logMessage",{ type : 2, message : message}));
	}
	,onInitialize: function(params,token,resolve,reject) {
	}
	,onShutdown: function(token,resolve,reject) {
	}
	,onExit: function() {
	}
	,onShowMessage: function(params) {
	}
	,onLogMessage: function(params) {
	}
	,onDidChangeConfiguration: function(params) {
	}
	,onDidOpenTextDocument: function(params) {
	}
	,onDidChangeTextDocument: function(params) {
	}
	,onDidCloseTextDocument: function(params) {
	}
	,onDidSaveTextDocument: function(params) {
	}
	,onDidChangeWatchedFiles: function(params) {
	}
	,onPublishDiagnostics: function(params) {
	}
	,onCompletion: function(params,token,resolve,reject) {
	}
	,onCompletionItemResolve: function(params,token,resolve,reject) {
	}
	,onHover: function(params,token,resolve,reject) {
	}
	,onSignatureHelp: function(params,token,resolve,reject) {
	}
	,onGotoDefinition: function(params,token,resolve,reject) {
	}
	,onFindReferences: function(params,token,resolve,reject) {
	}
	,onDocumentHighlights: function(params,token,resolve,reject) {
	}
	,onDocumentSymbols: function(params,token,resolve,reject) {
	}
	,onWorkspaceSymbols: function(params,token,resolve,reject) {
	}
	,onCodeAction: function(params,token,resolve,reject) {
	}
	,onCodeLens: function(params,token,resolve,reject) {
	}
	,onCodeLensResolve: function(params,token,resolve,reject) {
	}
	,onDocumentFormatting: function(params,token,resolve,reject) {
	}
	,onDocumentRangeFormatting: function(params,token,resolve,reject) {
	}
	,onDocumentOnTypeFormatting: function(params,token,resolve,reject) {
	}
	,onRename: function(params,token,resolve,reject) {
	}
	,handleRequest: function(request,token,resolve,reject) {
		switch(request.method) {
		case "codeLens/resolve":
			this.onCodeLensResolve(request.params,token,resolve,reject);
			break;
		case "completionItem/resolve":
			this.onCompletionItemResolve(request.params,token,resolve,reject);
			break;
		case "initialize":
			this.onInitialize(request.params,token,resolve,reject);
			break;
		case "shutdown":
			this.onShutdown(token,function() {
				resolve(null);
			},reject);
			break;
		case "textDocument/codeAction":
			this.onCodeAction(request.params,token,resolve,reject);
			break;
		case "textDocument/codeLens":
			this.onCodeLens(request.params,token,resolve,reject);
			break;
		case "textDocument/completion":
			this.onCompletion(request.params,token,resolve,reject);
			break;
		case "textDocument/definition":
			this.onGotoDefinition(request.params,token,resolve,reject);
			break;
		case "textDocument/documentHighlight":
			this.onDocumentHighlights(request.params,token,resolve,reject);
			break;
		case "textDocument/documentSymbol":
			this.onDocumentSymbols(request.params,token,resolve,reject);
			break;
		case "textDocument/formatting":
			this.onDocumentFormatting(request.params,token,resolve,reject);
			break;
		case "textDocument/hover":
			this.onHover(request.params,token,resolve,reject);
			break;
		case "textDocument/onTypeFormatting":
			this.onDocumentOnTypeFormatting(request.params,token,resolve,reject);
			break;
		case "textDocument/rangeFormatting":
			this.onDocumentRangeFormatting(request.params,token,resolve,reject);
			break;
		case "textDocument/references":
			this.onFindReferences(request.params,token,resolve,reject);
			break;
		case "textDocument/rename":
			this.onRename(request.params,token,resolve,reject);
			break;
		case "textDocument/signatureHelp":
			this.onSignatureHelp(request.params,token,resolve,reject);
			break;
		case "workspace/symbol":
			this.onWorkspaceSymbols(request.params,token,resolve,reject);
			break;
		default:
			reject(jsonrpc_JsonRpc.error(-32601,"Method '" + request.method + "' not found"));
		}
	}
	,handleNotification: function(notification) {
		switch(notification.method) {
		case "exit":
			this.onExit();
			break;
		case "textDocument/didChange":
			this.onDidChangeTextDocument(notification.params);
			break;
		case "textDocument/didClose":
			this.onDidCloseTextDocument(notification.params);
			break;
		case "textDocument/didOpen":
			this.onDidOpenTextDocument(notification.params);
			break;
		case "textDocument/didSave":
			this.onDidSaveTextDocument(notification.params);
			break;
		case "textDocument/publishDiagnostics":
			this.onPublishDiagnostics(notification.params);
			break;
		case "window/logMessage":
			this.onLogMessage(notification.params);
			break;
		case "window/showMessage":
			this.onShowMessage(notification.params);
			break;
		case "workspace/didChangeConfiguration":
			this.onDidChangeConfiguration(notification.params);
			break;
		case "workspace/didChangeWatchedFiles":
			this.onDidChangeWatchedFiles(notification.params);
			break;
		}
	}
	,__class__: vscode_Protocol
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var __map_reserved = {}
HaxePosition.positionRe = new EReg("^(.+):(\\d+): (?:lines (\\d+)-(\\d+)|character(?:s (\\d+)-| )(\\d+))$","");
HaxePosition.isWindows = Sys.systemName() == "Windows";
HaxeServer.reVersion = new EReg("^(\\d+)\\.(\\d+)\\.(\\d+)(?:\\s.*)?$","");
SignatureHelper.groupRegex = new EReg("\\$(\\d)+","g");
SignatureHelper.parenRegex = new EReg("^\\((.*)\\)$","");
SignatureHelper.argNameRegex = new EReg("^(\\??\\w+) : ","");
SignatureHelper.monomorphRegex = new EReg("^Unknown<\\d+>$","");
SignatureHelper.nullRegex = new EReg("^Null<(\\$\\d+)>$","");
Uri.driveLetterPathRe = new EReg("^/[a-zA-Z]:","");
Uri.upperCaseDriveRe = new EReg("^(/)?([A-Z]:)","");
Uri.uriRe = new EReg("^(([^:/?#]+?):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?","");
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
features_CompletionFeature.reFieldPart = new EReg("\\.(\\w*)$","");
features_SignatureHelpFeature.reEndsWithCall = new EReg("[\\w\\]\\)]\\s*$","");
features_SignatureHelpFeature.reEndsWithFunctionDef = new EReg("\\Wfunction(?:\\s+\\w+)?(?:<[\\w<>, ]+>)?\\s*$","");
features_SignatureHelpFeature.reStartsWithString = new EReg("^\"(?:[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|'(?:[^'\\\\]*(?:\\\\.[^'\\\\]*)*)'","");
features_SignatureHelpFeature.reStartsWithRegex = new EReg("^~/(?:[^/\\\\]*(?:\\\\.[^/\\\\]*)*)/","");
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved.gt != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved.amp != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved.quot != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved.apos != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = { }.toString;
jsonrpc_node__$MessageReader_MessageBuffer.CR = new js_node_buffer_Buffer("\r","ascii")[0];
jsonrpc_node__$MessageReader_MessageBuffer.LF = new js_node_buffer_Buffer("\n","ascii")[0];
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=server.js.map
