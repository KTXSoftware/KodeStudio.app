// Generated by Haxe 3.4.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
haxe_ds_GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
haxe_ds_GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe_ds_GenericStack.prototype = {
	head: null
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,__class__: haxe_ds_IntMap
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.prototype = {
	b: null
	,__class__: haxe_io_Bytes
};
var haxe_io_Path = function() { };
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.normalize = function(path) {
	path = path.split("\\").join("/");
	if(path == "/") {
		return "/";
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split("/");
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join("/");
	var regex_r = new RegExp("([^:])/+","g".split("u").join(""));
	tmp.replace(regex_r,"$1" + "/");
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var _g21 = HxOverrides.cca(tmp,i);
		if(_g21 == null) {
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += Std.string(String.fromCharCode(_g21));
		} else {
			switch(_g21) {
			case 47:
				if(!colon) {
					slashes = true;
				} else {
					colon = false;
					if(slashes) {
						acc_b += "/";
						slashes = false;
					}
					acc_b += Std.string(String.fromCharCode(_g21));
				}
				break;
			case 58:
				acc_b += ":";
				colon = true;
				break;
			default:
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += Std.string(String.fromCharCode(_g21));
			}
		}
	}
	return acc_b;
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = ["haxe","unit","TestCase"];
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestResult = function() {
	this.m_tests = new List();
	this.success = true;
};
haxe_unit_TestResult.__name__ = ["haxe","unit","TestResult"];
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf_b = "";
		var failures = 0;
		var _g_head = this.m_tests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val.success == false) {
				buf_b += "* ";
				buf_b += Std.string(val.classname);
				buf_b += "::";
				buf_b += Std.string(val.method);
				buf_b += "()";
				buf_b += "\n";
				buf_b += "ERR: ";
				if(val.posInfos != null) {
					buf_b += Std.string(val.posInfos.fileName);
					buf_b += ":";
					buf_b += Std.string(val.posInfos.lineNumber);
					buf_b += "(";
					buf_b += Std.string(val.posInfos.className);
					buf_b += ".";
					buf_b += Std.string(val.posInfos.methodName);
					buf_b += ") - ";
				}
				buf_b += Std.string(val.error);
				buf_b += "\n";
				if(val.backtrace != null) {
					buf_b += Std.string(val.backtrace);
					buf_b += "\n";
				}
				buf_b += "\n";
				++failures;
			}
		}
		buf_b += "\n";
		if(failures == 0) {
			buf_b += "OK ";
		} else {
			buf_b += "FAILED ";
		}
		buf_b += Std.string(this.m_tests.length);
		buf_b += " tests, ";
		buf_b += failures == null ? "null" : "" + failures;
		buf_b += " failed, ";
		buf_b += Std.string(this.m_tests.length - failures);
		buf_b += " success";
		buf_b += "\n";
		return buf_b;
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new List();
};
haxe_unit_TestRunner.__name__ = ["haxe","unit","TestRunner"];
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g_head = this.cases.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.runCase(val);
		}
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = t == null ? null : js_Boot.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + Type.getClassName(cl) + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(f,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = Type.getClassName(cl);
				t.currentTest.method = f;
				try {
					var args = [];
					field.apply(t,args);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( $e0 ) {
					haxe_CallStack.lastException = $e0;
					if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
					if( js_Boot.__instanceof($e0,haxe_unit_TestStatus) ) {
						var e = $e0;
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
					var e1 = $e0;
					haxe_unit_TestRunner.print("E");
					if(e1.message != null) {
						t.currentTest.error = "exception thrown : " + Std.string(e1) + " [" + Std.string(e1.message) + "]";
					} else {
						t.currentTest.error = "exception thrown : " + Std.string(e1);
					}
					var tmp1 = haxe_CallStack.exceptionStack();
					t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
haxe_unit_TestStatus.__name__ = ["haxe","unit","TestStatus"];
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var haxeLanguageServer_TestCaseBase = function() {
	haxe_unit_TestCase.call(this);
};
haxeLanguageServer_TestCaseBase.__name__ = ["haxeLanguageServer","TestCaseBase"];
haxeLanguageServer_TestCaseBase.__super__ = haxe_unit_TestCase;
haxeLanguageServer_TestCaseBase.prototype = $extend(haxe_unit_TestCase.prototype,{
	fail: function(pos) {
		this.assertTrue(false,pos);
	}
	,__class__: haxeLanguageServer_TestCaseBase
});
var haxeLanguageServer_TestMain = function() {
	var runner = new haxe_unit_TestRunner();
	runner.add(new haxeLanguageServer_helper_PathHelperTest());
	runner.add(new haxeLanguageServer_helper_ImportHelperTest());
	runner.add(new haxeLanguageServer_helper_TypeHelperTest());
	runner.add(new haxeLanguageServer_helper_PositionHelperTest());
	runner.add(new haxeLanguageServer_helper_RangeHelperTest());
	var success = runner.run();
	process.exit(success ? 0 : 1);
};
haxeLanguageServer_TestMain.__name__ = ["haxeLanguageServer","TestMain"];
haxeLanguageServer_TestMain.main = function() {
	new haxeLanguageServer_TestMain();
};
haxeLanguageServer_TestMain.prototype = {
	__class__: haxeLanguageServer_TestMain
};
var haxeLanguageServer_TextDocument = function(uri,languageId,version,content) {
	this.uri = uri;
	this.fsPath = haxeLanguageServer_Uri.uriToFsPath(uri);
	this.languageId = languageId;
	this.version = version;
	this.content = content;
};
haxeLanguageServer_TextDocument.__name__ = ["haxeLanguageServer","TextDocument"];
haxeLanguageServer_TextDocument.prototype = {
	uri: null
	,fsPath: null
	,languageId: null
	,version: null
	,content: null
	,lineOffsets: null
	,lineAt: function(line) {
		var lineOffsets = this.getLineOffsets();
		if(line >= lineOffsets.length) {
			return "";
		} else if(line == lineOffsets.length - 1) {
			return this.content.substring(lineOffsets[line]);
		} else {
			return this.content.substring(lineOffsets[line],lineOffsets[line + 1]);
		}
	}
	,getLineOffsets: function() {
		if(this.lineOffsets == null) {
			var offsets = [];
			var text = this.content;
			var isLineStart = true;
			var i = 0;
			while(i < text.length) {
				if(isLineStart) {
					offsets.push(i);
					isLineStart = false;
				}
				var ch = HxOverrides.cca(text,i);
				if(ch != 13) {
					isLineStart = ch == 10;
				} else {
					isLineStart = true;
				}
				if(ch == 13 && i + 1 < text.length && HxOverrides.cca(text,i + 1) == 10) {
					++i;
				}
				++i;
			}
			if(isLineStart && text.length > 0) {
				offsets.push(text.length);
			}
			return this.lineOffsets = offsets;
		}
		return this.lineOffsets;
	}
	,__class__: haxeLanguageServer_TextDocument
};
var haxeLanguageServer_Uri = function() { };
haxeLanguageServer_Uri.__name__ = ["haxeLanguageServer","Uri"];
haxeLanguageServer_Uri.uriToFsPath = function(uri) {
	if(!haxeLanguageServer_Uri.uriRe.match(uri) || haxeLanguageServer_Uri.uriRe.matched(2) != "file") {
		throw new js__$Boot_HaxeError("Invalid uri: " + uri);
	}
	var s = haxeLanguageServer_Uri.uriRe.matched(5);
	var path = decodeURIComponent(s.split("+").join(" "));
	if(haxeLanguageServer_Uri.driveLetterPathRe.match(path)) {
		return path.charAt(1).toLowerCase() + HxOverrides.substr(path,2,null);
	} else {
		return path;
	}
};
var haxeLanguageServer_helper_ImportHelper = function() { };
haxeLanguageServer_helper_ImportHelper.__name__ = ["haxeLanguageServer","helper","ImportHelper"];
haxeLanguageServer_helper_ImportHelper.getImportInsertPosition = function(doc) {
	var importLine = haxeLanguageServer_helper_ImportHelper.skipComment(doc);
	var _g1 = importLine;
	var _g = doc.getLineOffsets().length;
	while(_g1 < _g) {
		var i = _g1++;
		var line = doc.lineAt(i);
		var isPackageDecl = haxeLanguageServer_helper_ImportHelper.rePackageDecl.match(line);
		var isNotEmpty = StringTools.trim(line).length > 0;
		if(!isPackageDecl && isNotEmpty) {
			importLine = i;
			break;
		}
	}
	return { line : importLine, character : 0};
};
haxeLanguageServer_helper_ImportHelper.skipComment = function(doc) {
	var retLine = 0;
	var bInComment = false;
	var _g1 = 0;
	var _g = doc.getLineOffsets().length;
	while(_g1 < _g) {
		var i = _g1++;
		var line = StringTools.trim(doc.lineAt(i));
		if(line.length == 0 || StringTools.startsWith(line,"//")) {
			continue;
		}
		if(StringTools.startsWith(line,"/*")) {
			bInComment = true;
		}
		if(bInComment && StringTools.endsWith(line,"*/")) {
			bInComment = false;
			continue;
		}
		if(!bInComment) {
			retLine = i;
			break;
		}
	}
	return retLine;
};
var haxeLanguageServer_helper_ImportHelperTest = function() {
	haxe_unit_TestCase.call(this);
};
haxeLanguageServer_helper_ImportHelperTest.__name__ = ["haxeLanguageServer","helper","ImportHelperTest"];
haxeLanguageServer_helper_ImportHelperTest.__super__ = haxe_unit_TestCase;
haxeLanguageServer_helper_ImportHelperTest.prototype = $extend(haxe_unit_TestCase.prototype,{
	testGetImportInsertPosition: function() {
		var _gthis = this;
		var test = function(file,pos) {
			var line = -1;
			var lines = file.split("\n");
			var _g1 = 0;
			var _g = lines.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(lines[i].indexOf("|") > 0) {
					line = i;
					break;
				}
			}
			if(line == -1) {
				throw new js__$Boot_HaxeError("test case is missing caret: " + file);
			}
			var doc = new haxeLanguageServer_TextDocument("file://dummy","",0,StringTools.replace(file,"|",""));
			var importPos = haxeLanguageServer_helper_ImportHelper.getImportInsertPosition(doc);
			_gthis.assertEquals(0,importPos.character,pos);
			_gthis.assertEquals(line,importPos.line,pos);
		};
		test("\n    package;\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 30, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n    package   ;\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 31, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 32, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n    |class SomeClass {\n    }\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 33, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n    \n    \n    package     test._underscore.____s   ;\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 34, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    /*\n     * Comment\n     */\n\n    " + "\n    package;\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 36, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    /*\n     * Comment\n     */\n\n    " + "\n    package   ;\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 37, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    /*\n     * Comment\n     */\n\n    " + "\n\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 38, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    /*\n     * Comment\n     */\n\n    " + "\n    |class SomeClass {\n    }\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 39, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    /*\n     * Comment\n     */\n\n    " + "\n    \n    \n    package     test._underscore.____s   ;\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 40, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    // Comment\n    // Another comment\n    " + "\n    package;\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 42, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    // Comment\n    // Another comment\n    " + "\n    package   ;\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 43, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    // Comment\n    // Another comment\n    " + "\n\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 44, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    // Comment\n    // Another comment\n    " + "\n    |class SomeClass {\n    }\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 45, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
		test("\n\n    // Comment\n    // Another comment\n    " + "\n    \n    \n    package     test._underscore.____s   ;\n\n    |import haxe.io.Path;\n    ",{ fileName : "ImportHelperTest.hx", lineNumber : 46, className : "haxeLanguageServer.helper.ImportHelperTest", methodName : "testGetImportInsertPosition"});
	}
	,__class__: haxeLanguageServer_helper_ImportHelperTest
});
var haxeLanguageServer_helper_PathHelper = function() { };
haxeLanguageServer_helper_PathHelper.__name__ = ["haxeLanguageServer","helper","PathHelper"];
haxeLanguageServer_helper_PathHelper.matches = function(path,pathFilter) {
	return new EReg(pathFilter,"").match(haxeLanguageServer_helper_PathHelper.normalize(path));
};
haxeLanguageServer_helper_PathHelper.preparePathFilter = function(diagnosticsPathFilter,haxelibPath,workspaceRoot) {
	var path = diagnosticsPathFilter;
	path = StringTools.replace(diagnosticsPathFilter,"${workspaceRoot}",workspaceRoot);
	if(haxelibPath != null) {
		path = StringTools.replace(path,"${haxelibPath}",haxelibPath);
	} else {
		haxe_Log.trace("Could not retrieve haxelib repo path for diagnostics filtering",{ fileName : "PathHelper.hx", lineNumber : 17, className : "haxeLanguageServer.helper.PathHelper", methodName : "preparePathFilter"});
	}
	return haxeLanguageServer_helper_PathHelper.normalize(path);
};
haxeLanguageServer_helper_PathHelper.normalize = function(path) {
	path = haxe_io_Path.normalize(path);
	if(haxeLanguageServer_helper_PathHelper.reUpperCaseDriveLetter.match(path)) {
		var letter = HxOverrides.substr(path,0,1).toLowerCase();
		path = letter + path.substring(1);
	}
	return path;
};
var haxeLanguageServer_helper_PathHelperTest = function() {
	haxe_unit_TestCase.call(this);
};
haxeLanguageServer_helper_PathHelperTest.__name__ = ["haxeLanguageServer","helper","PathHelperTest"];
haxeLanguageServer_helper_PathHelperTest.__super__ = haxe_unit_TestCase;
haxeLanguageServer_helper_PathHelperTest.prototype = $extend(haxe_unit_TestCase.prototype,{
	testMatches: function() {
		var _gthis = this;
		var matches = function(filter,path) {
			var pathFilter = haxeLanguageServer_helper_PathHelper.preparePathFilter(filter,"C:\\HaxeToolkit\\haxe\\lib","c:/projects/vshaxe");
			return haxeLanguageServer_helper_PathHelper.matches(path,pathFilter);
		};
		var match = function(filter1,path1,pos) {
			var match1 = matches(filter1,path1);
			_gthis.assertTrue(match1,pos);
		};
		var fail = function(filter2,path2,pos1) {
			var fail1 = matches(filter2,path2);
			_gthis.assertFalse(fail1,pos1);
		};
		match("${workspaceRoot}","c:/projects/vshaxe",{ fileName : "PathHelperTest.hx", lineNumber : 20, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match("${workspaceRoot}" + "/source","c:/projects/vshaxe" + "/source",{ fileName : "PathHelperTest.hx", lineNumber : 21, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		fail("${workspaceRoot}" + "/source","c:/projects/vshaxe" + "/export",{ fileName : "PathHelperTest.hx", lineNumber : 22, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match("${haxelibPath}","C:\\HaxeToolkit\\haxe\\lib",{ fileName : "PathHelperTest.hx", lineNumber : 24, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match("${haxelibPath}" + "\\flixel","C:\\HaxeToolkit\\haxe\\lib" + "/flixel/git/flixel/FlxG.hx",{ fileName : "PathHelperTest.hx", lineNumber : 25, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match("${haxelibPath}" + "/(flixel|lime)","C:\\HaxeToolkit\\haxe\\lib" + "/flixel/git/flixel/FlxG.hx",{ fileName : "PathHelperTest.hx", lineNumber : 26, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match("${haxelibPath}" + "/(flixel|lime)","C:\\HaxeToolkit\\haxe\\lib" + "/lime/2,9,1/lime/system/System.hx",{ fileName : "PathHelperTest.hx", lineNumber : 27, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		fail("${haxelibPath}" + "/(flixel|lime)","C:\\HaxeToolkit\\haxe\\lib" + "/hscript/2,0,7/hscript/",{ fileName : "PathHelperTest.hx", lineNumber : 28, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match(".*?","c:/projects/vshaxe",{ fileName : "PathHelperTest.hx", lineNumber : 30, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match(".*?","c:/projects/vshaxe" + "/source",{ fileName : "PathHelperTest.hx", lineNumber : 31, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match(".*?","c:/projects/vshaxe" + "/export",{ fileName : "PathHelperTest.hx", lineNumber : 32, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match(".*?","C:\\HaxeToolkit\\haxe\\lib",{ fileName : "PathHelperTest.hx", lineNumber : 33, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match(".*?","C:\\HaxeToolkit\\haxe\\lib" + "/flixel/git/flixel/FlxG.hx",{ fileName : "PathHelperTest.hx", lineNumber : 34, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match(".*?","C:\\HaxeToolkit\\haxe\\lib" + "/lime/2,9,1/lime/system/System.hx",{ fileName : "PathHelperTest.hx", lineNumber : 35, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match(".*?","C:\\HaxeToolkit\\haxe\\lib" + "/hscript/2,0,7/hscript/",{ fileName : "PathHelperTest.hx", lineNumber : 36, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
		match(".*?","~/../../../lib/",{ fileName : "PathHelperTest.hx", lineNumber : 37, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testMatches"});
	}
	,testNormalize: function() {
		var _gthis = this;
		var test = function(expected,path,pos) {
			var test1 = haxeLanguageServer_helper_PathHelper.normalize(path);
			_gthis.assertEquals(expected,test1,pos);
		};
		test("c:/HaxeToolkit/haxe","C:\\HaxeToolkit\\haxe",{ fileName : "PathHelperTest.hx", lineNumber : 45, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testNormalize"});
		test("c:/HaxeToolkit/haxe","c:/HaxeToolkit/haxe",{ fileName : "PathHelperTest.hx", lineNumber : 46, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testNormalize"});
		test("/usr/bin","/usr/bin",{ fileName : "PathHelperTest.hx", lineNumber : 47, className : "haxeLanguageServer.helper.PathHelperTest", methodName : "testNormalize"});
	}
	,__class__: haxeLanguageServer_helper_PathHelperTest
});
var haxeLanguageServer_helper_PositionHelper = function() { };
haxeLanguageServer_helper_PositionHelper.__name__ = ["haxeLanguageServer","helper","PositionHelper"];
haxeLanguageServer_helper_PositionHelper.isEqual = function(pos,other) {
	if(pos.line == other.line) {
		return pos.character == other.character;
	} else {
		return false;
	}
};
var haxeLanguageServer_helper_PositionHelperTest = function() {
	haxeLanguageServer_TestCaseBase.call(this);
};
haxeLanguageServer_helper_PositionHelperTest.__name__ = ["haxeLanguageServer","helper","PositionHelperTest"];
haxeLanguageServer_helper_PositionHelperTest.__super__ = haxeLanguageServer_TestCaseBase;
haxeLanguageServer_helper_PositionHelperTest.prototype = $extend(haxeLanguageServer_TestCaseBase.prototype,{
	positionsEqual: function() {
		var check = function(l1,c1,l2,c2) {
			return haxeLanguageServer_helper_PositionHelper.isEqual({ line : l1, character : c1},{ line : l2, character : c2});
		};
		this.assertTrue(check(0,10,0,10),{ fileName : "PositionHelperTest.hx", lineNumber : 9, className : "haxeLanguageServer.helper.PositionHelperTest", methodName : "positionsEqual"});
		this.assertFalse(check(1,5,5,1),{ fileName : "PositionHelperTest.hx", lineNumber : 10, className : "haxeLanguageServer.helper.PositionHelperTest", methodName : "positionsEqual"});
	}
	,__class__: haxeLanguageServer_helper_PositionHelperTest
});
var haxeLanguageServer_helper_RangeHelper = function() { };
haxeLanguageServer_helper_RangeHelper.__name__ = ["haxeLanguageServer","helper","RangeHelper"];
haxeLanguageServer_helper_RangeHelper.isEmpty = function(range) {
	return haxeLanguageServer_helper_PositionHelper.isEqual(range.end,range.start);
};
var haxeLanguageServer_helper_RangeHelperTest = function() {
	haxeLanguageServer_TestCaseBase.call(this);
};
haxeLanguageServer_helper_RangeHelperTest.__name__ = ["haxeLanguageServer","helper","RangeHelperTest"];
haxeLanguageServer_helper_RangeHelperTest.__super__ = haxeLanguageServer_TestCaseBase;
haxeLanguageServer_helper_RangeHelperTest.prototype = $extend(haxeLanguageServer_TestCaseBase.prototype,{
	testRangeIsEmpty: function() {
		var check = function(l1,c1,l2,c2) {
			return haxeLanguageServer_helper_RangeHelper.isEmpty({ start : { line : l1, character : c1}, end : { line : l2, character : c2}});
		};
		this.assertTrue(check(0,10,0,10),{ fileName : "RangeHelperTest.hx", lineNumber : 9, className : "haxeLanguageServer.helper.RangeHelperTest", methodName : "testRangeIsEmpty"});
		this.assertFalse(check(1,5,5,1),{ fileName : "RangeHelperTest.hx", lineNumber : 10, className : "haxeLanguageServer.helper.RangeHelperTest", methodName : "testRangeIsEmpty"});
	}
	,__class__: haxeLanguageServer_helper_RangeHelperTest
});
var haxeLanguageServer_helper_TypeHelper = function() { };
haxeLanguageServer_helper_TypeHelper.__name__ = ["haxeLanguageServer","helper","TypeHelper"];
haxeLanguageServer_helper_TypeHelper.getCloseChar = function(c) {
	switch(c) {
	case "(":
		return ")";
	case "<":
		return ">";
	case "{":
		return "}";
	default:
		throw new js__$Boot_HaxeError("unknown opening char " + c);
	}
};
haxeLanguageServer_helper_TypeHelper.printFunctionDeclaration = function(args,ret,formatting) {
	return "function" + haxeLanguageServer_helper_TypeHelper.printFunctionSignature(args,ret,formatting);
};
haxeLanguageServer_helper_TypeHelper.printFunctionSignature = function(args,ret,formatting) {
	var result_b = "";
	result_b = "(";
	var first = true;
	var _g = 0;
	while(_g < args.length) {
		var arg = args[_g];
		++_g;
		if(first) {
			first = false;
		} else {
			result_b += ", ";
		}
		result_b += Std.string(haxeLanguageServer_helper_TypeHelper.printSignatureArgument(arg,formatting.argumentTypeHints));
	}
	result_b += ")";
	if(haxeLanguageServer_helper_TypeHelper.shouldPrintReturnType(ret,formatting.returnTypeHint)) {
		result_b += ":";
		result_b += ret == null ? "null" : "" + ret;
	}
	return result_b;
};
haxeLanguageServer_helper_TypeHelper.shouldPrintReturnType = function(ret,option) {
	if(ret == null) {
		return false;
	}
	switch(option) {
	case "always":
		return true;
	case "never":
		return false;
	case "non-void":
		return ret != "Void";
	}
};
haxeLanguageServer_helper_TypeHelper.printSignatureArgument = function(arg,typeHints) {
	var result = arg.name;
	if(arg.opt) {
		result = "?" + result;
	}
	if(arg.type != null && typeHints) {
		result += ":";
		result += arg.type;
	}
	return result;
};
haxeLanguageServer_helper_TypeHelper.parseFunctionArgumentType = function(argument) {
	if(StringTools.startsWith(argument,"?")) {
		argument = HxOverrides.substr(argument,1,null);
	}
	var colonIndex = argument.indexOf(":");
	var argumentType = HxOverrides.substr(argument,colonIndex + 1,null);
	while(StringTools.startsWith(argumentType,"Null<") && StringTools.endsWith(argumentType,">")) argumentType = argumentType.substring("Null<".length,argumentType.length - 1);
	return haxeLanguageServer_helper_TypeHelper.parseDisplayType(argumentType);
};
haxeLanguageServer_helper_TypeHelper.parseDisplayType = function(type) {
	type = StringTools.replace(type," -> ","%");
	var toplevel_b = "";
	var groups = new haxe_ds_IntMap();
	var closeStack = new haxe_ds_GenericStack();
	var depth = 0;
	var groupId = 0;
	var _g1 = 0;
	var _g = type.length;
	while(_g1 < _g) {
		var i = _g1++;
		var $char = type.charAt(i);
		if($char == "(" || $char == "<" || $char == "{") {
			++depth;
			closeStack.head = new haxe_ds_GenericCell(haxeLanguageServer_helper_TypeHelper.getCloseChar($char),closeStack.head);
			if(depth == 1) {
				++groupId;
				var v = new StringBuf();
				groups.h[groupId] = v;
				toplevel_b += $char == null ? "null" : "" + $char;
				toplevel_b += Std.string("$" + groupId);
				continue;
			}
		} else if($char == (closeStack.head == null ? null : closeStack.head.elt)) {
			var k = closeStack.head;
			if(k != null) {
				closeStack.head = k.next;
			}
			--depth;
		}
		if(depth == 0) {
			toplevel_b += $char == null ? "null" : "" + $char;
		} else {
			groups.h[groupId].b += $char == null ? "null" : "" + $char;
		}
	}
	var processType = function(type1) {
		type1 = haxeLanguageServer_helper_TypeHelper.groupRegex.map(type1,function(r) {
			var groupId1 = Std.parseInt(r.matched(1));
			return StringTools.replace(groups.h[groupId1].b,"%","->");
		});
		if(haxeLanguageServer_helper_TypeHelper.parenRegex.match(type1)) {
			type1 = haxeLanguageServer_helper_TypeHelper.parenRegex.matched(1);
		}
		return type1;
	};
	var parts = toplevel_b.split("%");
	var returnType = processType(parts.pop());
	if(haxeLanguageServer_helper_TypeHelper.monomorphRegex.match(returnType)) {
		returnType = null;
	}
	if(parts.length > 0) {
		var args = [];
		var _g11 = 0;
		var _g2 = parts.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var part = parts[i1];
			var name;
			var type2;
			var opt = false;
			if(haxeLanguageServer_helper_TypeHelper.argNameRegex.match(part)) {
				name = haxeLanguageServer_helper_TypeHelper.argNameRegex.matched(1);
				if(HxOverrides.cca(name,0) == 63) {
					name = name.substring(1);
					opt = true;
				}
				type2 = haxeLanguageServer_helper_TypeHelper.argNameRegex.matchedRight();
			} else {
				name = String.fromCharCode(97 + i1);
				type2 = part;
				if(HxOverrides.cca(part,0) == 63) {
					type2 = part.substring(1);
					opt = true;
				}
			}
			if(opt && haxeLanguageServer_helper_TypeHelper.nullRegex.match(type2)) {
				type2 = haxeLanguageServer_helper_TypeHelper.nullRegex.matched(1);
			}
			type2 = processType(type2);
			if(type2 == "Void") {
				continue;
			}
			var arg = { name : name};
			if(!haxeLanguageServer_helper_TypeHelper.monomorphRegex.match(type2)) {
				arg.type = type2;
			}
			if(opt) {
				arg.opt = true;
			}
			args.push(arg);
		}
		return haxeLanguageServer_helper_DisplayType.DTFunction(args,returnType);
	} else {
		return haxeLanguageServer_helper_DisplayType.DTValue(returnType);
	}
};
var haxeLanguageServer_helper_DisplayType = { __ename__ : true, __constructs__ : ["DTValue","DTFunction"] };
haxeLanguageServer_helper_DisplayType.DTValue = function(type) { var $x = ["DTValue",0,type]; $x.__enum__ = haxeLanguageServer_helper_DisplayType; $x.toString = $estr; return $x; };
haxeLanguageServer_helper_DisplayType.DTFunction = function(args,ret) { var $x = ["DTFunction",1,args,ret]; $x.__enum__ = haxeLanguageServer_helper_DisplayType; $x.toString = $estr; return $x; };
var haxeLanguageServer_helper_TypeHelperTest = function() {
	haxeLanguageServer_TestCaseBase.call(this);
};
haxeLanguageServer_helper_TypeHelperTest.__name__ = ["haxeLanguageServer","helper","TypeHelperTest"];
haxeLanguageServer_helper_TypeHelperTest.__super__ = haxeLanguageServer_TestCaseBase;
haxeLanguageServer_helper_TypeHelperTest.prototype = $extend(haxeLanguageServer_TestCaseBase.prototype,{
	testParseFunctionArgumentType: function() {
		var parsed = haxeLanguageServer_helper_TypeHelper.parseFunctionArgumentType("?Callback:Null<flixel.FlxObject -> ?String -> Void>");
		if(parsed[1] == 1) {
			var ret = parsed[3];
			var args = parsed[2];
			this.assertEquals("flixel.FlxObject",args[0].type,{ fileName : "TypeHelperTest.hx", lineNumber : 10, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentType"});
			this.assertFalse(args[0].opt,{ fileName : "TypeHelperTest.hx", lineNumber : 11, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentType"});
			this.assertEquals("String",args[1].type,{ fileName : "TypeHelperTest.hx", lineNumber : 12, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentType"});
			this.assertTrue(args[1].opt,{ fileName : "TypeHelperTest.hx", lineNumber : 13, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentType"});
			this.assertEquals(2,args.length,{ fileName : "TypeHelperTest.hx", lineNumber : 14, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentType"});
			this.assertEquals("Void",ret,{ fileName : "TypeHelperTest.hx", lineNumber : 15, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentType"});
		} else {
			this.assertTrue(false,{ fileName : "TypeHelperTest.hx", lineNumber : 17, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentType"});
		}
	}
	,testParseFunctionArgumentTypeNestedNulls: function() {
		var parsed = haxeLanguageServer_helper_TypeHelper.parseFunctionArgumentType("foo:Null<Null<Null<Null<String -> Void>>>>");
		if(parsed[1] == 1) {
			var ret = parsed[3];
			var args = parsed[2];
			this.assertEquals("String",args[0].type,{ fileName : "TypeHelperTest.hx", lineNumber : 25, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentTypeNestedNulls"});
			this.assertEquals(1,args.length,{ fileName : "TypeHelperTest.hx", lineNumber : 26, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentTypeNestedNulls"});
			this.assertEquals("Void",ret,{ fileName : "TypeHelperTest.hx", lineNumber : 27, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentTypeNestedNulls"});
		} else {
			this.assertTrue(false,{ fileName : "TypeHelperTest.hx", lineNumber : 29, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "testParseFunctionArgumentTypeNestedNulls"});
		}
	}
	,testPrintFunctionDeclaration: function() {
		this.assertPrintedEquals(haxeLanguageServer_helper_TypeHelper.parseFunctionArgumentType,"function(a:flixel.FlxObject, ?b:String):Void","?Callback:Null<flixel.FlxObject -> ?String -> Void>",{ argumentTypeHints : true, returnTypeHint : "always"});
		this.assertPrintedEquals(haxeLanguageServer_helper_TypeHelper.parseDisplayType,"function(a, b)","String -> Bool -> Void>",{ argumentTypeHints : false, returnTypeHint : "never"});
		this.assertPrintedEquals(haxeLanguageServer_helper_TypeHelper.parseDisplayType,"function(a:String, b:Bool)","String -> Bool -> Void",{ argumentTypeHints : true, returnTypeHint : "non-void"});
		this.assertPrintedEquals(haxeLanguageServer_helper_TypeHelper.parseDisplayType,"function():String","Void -> String",{ argumentTypeHints : true, returnTypeHint : "non-void"});
	}
	,assertPrintedEquals: function(parser,expected,functionType,formatting) {
		var parsed = haxeLanguageServer_helper_TypeHelper.parseFunctionArgumentType(functionType);
		if(parsed[1] == 1) {
			var ret = parsed[3];
			var args = parsed[2];
			var decl = haxeLanguageServer_helper_TypeHelper.printFunctionDeclaration(args,ret,formatting);
			this.assertEquals(expected,decl,{ fileName : "TypeHelperTest.hx", lineNumber : 60, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "assertPrintedEquals"});
		} else {
			this.assertTrue(false,{ fileName : "TypeHelperTest.hx", lineNumber : 62, className : "haxeLanguageServer.helper.TypeHelperTest", methodName : "assertPrintedEquals"});
		}
	}
	,__class__: haxeLanguageServer_helper_TypeHelperTest
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
haxeLanguageServer_Uri.driveLetterPathRe = new EReg("^/[a-zA-Z]:","");
haxeLanguageServer_Uri.uriRe = new EReg("^(([^:/?#]+?):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?","");
haxeLanguageServer_helper_ImportHelper.rePackageDecl = new EReg("package\\s*( [\\w\\.]*)?\\s*;","");
haxeLanguageServer_helper_PathHelper.reUpperCaseDriveLetter = new EReg("^([A-Z]:)","");
haxeLanguageServer_helper_TypeHelper.groupRegex = new EReg("\\$(\\d+)","g");
haxeLanguageServer_helper_TypeHelper.parenRegex = new EReg("^\\((.*)\\)$","");
haxeLanguageServer_helper_TypeHelper.argNameRegex = new EReg("^(\\??\\w+) : ","");
haxeLanguageServer_helper_TypeHelper.monomorphRegex = new EReg("^Unknown<\\d+>$","");
haxeLanguageServer_helper_TypeHelper.nullRegex = new EReg("^Null<(\\$\\d+)>$","");
js_Boot.__toStr = ({ }).toString;
haxeLanguageServer_TestMain.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=test.js.map