/// <reference types="through" />
/// <reference types="node" />
import { Map } from './lib';
import { through } from 'event-stream';
import { ThroughStream } from 'through';
export declare function rewriteLocalizeCalls(): through.ThroughStream;
export declare const coreLanguages: string[];
export declare function createAdditionalLanguageFiles(languages: string[], i18nBaseDir: string, baseDir?: string): through.ThroughStream;
/**
 * A stream the creates additional key/value pair files for structured nls files.
 *
 * @param commentSeparator - if provided comments will be joined into one string using
 *  the commentSeparator value. If omitted comments will be includes as a string array.
 */
export declare function createKeyValuePairFile(commentSeparator?: string): through.ThroughStream;
export declare class Line {
    private indent;
    private buffer;
    constructor(indent?: number);
    append(value: string): Line;
    toString(): string;
}
export interface Resource {
    name: string;
    project: string;
}
export interface ParsedXLF {
    messages: Map<string>;
    originalFilePath: string;
    language: string;
}
export declare class XLF {
    project: string;
    private buffer;
    private files;
    constructor(project: string);
    toString(): string;
    addFile(original: string, keys: any[], messages: string[]): void;
    private addStringItem(item);
    private appendHeader();
    private appendFooter();
    private appendNewLine(content, indent?);
    static parse: (xlfString: string) => Promise<ParsedXLF[]>;
}
export declare function prepareXlfFiles(projectName: string, extensionName: string): ThroughStream;
export declare function pushXlfFiles(apiHostname: string, username: string, password: string): ThroughStream;
export declare function pullXlfFiles(apiHostname: string, username: string, password: string, languages: string[], resources: Resource[]): NodeJS.ReadableStream;
export declare function prepareJsonFiles(): ThroughStream;
