/// <reference types="source-map" />
import { RawSourceMap } from 'source-map';
export interface Map<V> {
    [key: string]: V;
}
export interface LocalizeInfo {
    key: string;
    comment: string[];
}
export declare namespace LocalizeInfo {
    function is(value: any): value is LocalizeInfo;
}
export declare type KeyInfo = string | LocalizeInfo;
export interface JavaScriptMessageBundle {
    messages: string[];
    keys: KeyInfo[];
}
export declare namespace JavaScriptMessageBundle {
    function is(value: any): value is JavaScriptMessageBundle;
}
export interface ResolvedJavaScriptMessageBundle {
    messages: string[];
    keys: string[];
    map: Map<string>;
}
export declare namespace ResolvedJavaScriptMessageBundle {
    function is(value: any): value is ResolvedJavaScriptMessageBundle;
    function asTranslatedMessages(bundle: ResolvedJavaScriptMessageBundle, translatedMessages: Map<string>, problems: string[]): string[];
}
export interface PackageJsonMessageBundle {
    [key: string]: string;
}
export declare namespace PackageJsonMessageBundle {
    function asTranslatedMessages(bundle: PackageJsonMessageBundle, translatedMessages: Map<string>, problems: string[]): Map<string>;
}
export declare function processFile(contents: string, sourceMap?: string | RawSourceMap): {
    contents: string;
    sourceMap: string;
    bundle: JavaScriptMessageBundle;
    errors: string[];
};
export declare function resolveMessageBundle(bundle: JavaScriptMessageBundle): ResolvedJavaScriptMessageBundle;
export declare function resolveMessageBundle(bundle: PackageJsonMessageBundle): PackageJsonMessageBundle;
export interface LocalizedMessagesResult {
    messages: string[] | Map<String>;
    problems: string[];
}
export declare function createLocalizedMessages(filename: string, bundle: ResolvedJavaScriptMessageBundle | PackageJsonMessageBundle, language: string, i18nBaseDir: string, baseDir?: string): LocalizedMessagesResult;
export declare function bundle2keyValuePair(bundle: JavaScriptMessageBundle, commentSeparator?: string): any;
