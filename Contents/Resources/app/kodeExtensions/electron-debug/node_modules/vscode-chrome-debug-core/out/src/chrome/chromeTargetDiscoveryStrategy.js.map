{"version":3,"sources":["../src/chrome/chromeTargetDiscoveryStrategy.ts"],"names":[],"mappings":"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","file":"chromeTargetDiscoveryStrategy.js","sourceRoot":"../..","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { Logger } from 'vscode-debugadapter';\nimport * as utils from '../utils';\nimport * as telemetry from '../telemetry';\nimport { IStepStartedEventsEmitter, StepProgressEventsEmitter, IObservableEvents } from '../executionTimingsReporter';\n\nimport * as chromeUtils from './chromeUtils';\n\nimport { ITargetDiscoveryStrategy, ITargetFilter, ITarget } from './chromeConnection';\n\nimport * as nls from 'vscode-nls';\nconst localize = nls.loadMessageBundle();\n\nexport class ChromeTargetDiscovery implements ITargetDiscoveryStrategy, IObservableEvents<IStepStartedEventsEmitter> {\n    private logger: Logger.ILogger;\n    private telemetry: telemetry.ITelemetryReporter;\n    public readonly events = new StepProgressEventsEmitter();\n\n    constructor(_logger: Logger.ILogger, _telemetry: telemetry.ITelemetryReporter) {\n        this.logger = _logger;\n        this.telemetry = _telemetry;\n    }\n\n    async getTarget(address: string, port: number, targetFilter?: ITargetFilter, targetUrl?: string): Promise<ITarget> {\n        const targets = await this.getAllTargets(address, port, targetFilter, targetUrl);\n        if (targets.length > 1) {\n            this.logger.log('Warning: Found more than one valid target page. Attaching to the first one. Available pages: ' + JSON.stringify(targets.map(target => target.url)));\n        }\n\n        const selectedTarget = targets[0];\n\n        this.logger.verbose(`Attaching to target: ${JSON.stringify(selectedTarget)}`);\n        this.logger.verbose(`WebSocket Url: ${selectedTarget.webSocketDebuggerUrl}`);\n\n        return selectedTarget;\n    }\n\n    async getAllTargets(address: string, port: number, targetFilter?: ITargetFilter, targetUrl?: string): Promise<ITarget[]> {\n        const targets = await this._getTargets(address, port);\n        /* __GDPR__\n           \"targetCount\" : {\n              \"numTargets\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n              \"${include}\": [ \"${DebugCommonProperties}\" ]\n           }\n         */\n        this.telemetry.reportEvent('targetCount', { numTargets: targets.length });\n\n        if (!targets.length) {\n            return utils.errP(localize('attach.responseButNoTargets', 'Got a response from the target app, but no target pages found'));\n        }\n\n        return this._getMatchingTargets(targets, targetFilter, targetUrl);\n    }\n\n    private async _getTargets(address: string, port: number): Promise<ITarget[]> {\n        // Temporary workaround till Edge fixes this bug: https://microsoft.visualstudio.com/OS/_workitems?id=15517727&fullScreen=false&_a=edit\n        // Chrome and Node alias /json to /json/list so this should work too\n        const url = `http://${address}:${port}/json/list`;\n        this.logger.log(`Discovering targets via ${url}`);\n\n        /* __GDPR__FRAGMENT__\n           \"StepNames\" : {\n              \"Attach.RequestDebuggerTargetsInformation\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n           }\n         */\n        this.events.emitStepStarted('Attach.RequestDebuggerTargetsInformation');\n        const jsonResponse = await utils.getURL(url, { headers: { Host: 'localhost' } })\n            .catch(e => utils.errP(localize('attach.cannotConnect', 'Cannot connect to the target: {0}', e.message)));\n\n        /* __GDPR__FRAGMENT__\n           \"StepNames\" : {\n              \"Attach.ProcessDebuggerTargetsInformation\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n           }\n         */\n        this.events.emitStepStarted('Attach.ProcessDebuggerTargetsInformation');\n        try {\n            const responseArray = JSON.parse(jsonResponse);\n            if (Array.isArray(responseArray)) {\n                return (responseArray as ITarget[])\n                    .map(target => this._fixRemoteUrl(address, port, target));\n            } else {\n                return utils.errP(localize('attach.invalidResponseArray', 'Response from the target seems invalid: {0}', jsonResponse));\n            }\n        } catch (e) {\n            return utils.errP(localize('attach.invalidResponse', 'Response from the target seems invalid. Error: {0}. Response: {1}', e.message, jsonResponse));\n        }\n    }\n\n    private _getMatchingTargets(targets: ITarget[], targetFilter?: ITargetFilter, targetUrl?: string): ITarget[] {\n        let filteredTargets = targetFilter ?\n            targets.filter(targetFilter) : // Apply the consumer-specific target filter\n            targets;\n\n        // If a url was specified, try to filter to that url\n        filteredTargets = targetUrl ?\n            chromeUtils.getMatchingTargets(filteredTargets, targetUrl) :\n            filteredTargets;\n\n        if (!filteredTargets.length) {\n            throw new Error(localize('attach.noMatchingTarget', \"Can't find a valid target that matches: {0}. Available pages: {1}\", targetUrl, JSON.stringify(targets.map(target => target.url))));\n        }\n\n        // If all possible targets appear to be attached to have some other devtool attached, then fail\n        const targetsWithWSURLs = filteredTargets.filter(target => !!target.webSocketDebuggerUrl);\n        if (!targetsWithWSURLs.length) {\n            throw new Error(localize('attach.devToolsAttached', \"Can't attach to this target that may have Chrome DevTools attached: {0}\", filteredTargets[0].url));\n        }\n\n        return targetsWithWSURLs;\n    }\n\n    private _fixRemoteUrl(remoteAddress: string, remotePort: number, target: ITarget): ITarget {\n        if (target.webSocketDebuggerUrl) {\n            const addressMatch = target.webSocketDebuggerUrl.match(/ws:\\/\\/([^/]+)\\/?/);\n            if (addressMatch) {\n                const replaceAddress = `${remoteAddress}:${remotePort}`;\n                target.webSocketDebuggerUrl = target.webSocketDebuggerUrl.replace(addressMatch[1], replaceAddress);\n            }\n        }\n\n        return target;\n    }\n}\n"]}