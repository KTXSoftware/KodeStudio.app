// Generated by Haxe 4.0.0-preview.4+30798ceea
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}var CheckstyleCodeActions = function() {
};
$hxClasses["CheckstyleCodeActions"] = CheckstyleCodeActions;
CheckstyleCodeActions.__name__ = "CheckstyleCodeActions";
CheckstyleCodeActions.prototype = {
	provideCodeActions: function(document,range,context,token) {
		var commands = [];
		var actions = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = context.diagnostics;
		while(_g < _g1.length) {
			var diag = _g1[_g];
			++_g;
			if(diag.source != "checkstyle") {
				continue;
			}
			if(range.contains(diag.range)) {
				this.makeCheckAction(document,actions,diag);
				continue;
			}
			if(diag.range.contains(range)) {
				this.makeCheckAction(document,actions,diag);
			}
		}
		var name = actions.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			commands.push(__map_reserved[name1] != null ? actions.getReserved(name1) : actions.h[name1]);
		}
		return commands;
	}
	,makeCheckAction: function(document,actions,diag) {
		var index = diag.message.indexOf(" - ");
		if(index <= 0) {
			return;
		}
		var checkName = HxOverrides.substr(diag.message,0,index);
		var message = HxOverrides.substr(diag.message,index + 3,null);
		switch(checkName) {
		case "Dynamic":
			this.makeDynamicAction(document,actions,diag,message);
			break;
		case "EmptyPackage":
			this.makeEmptyPackageAction(document,actions,diag,message);
			break;
		case "Indentation":
			this.makeIndentationAction(document,actions,diag,message);
			break;
		case "RedundantModifier":
			this.makeRedundantModifierAction(document,actions,diag,message);
			break;
		case "StringLiteral":
			this.makeStringLiteralAction(document,actions,diag,message);
			break;
		case "Trace":
			this.makeTraceCheckAction(document,actions,diag,message);
			break;
		case "UnusedImport":
			this.makeUnusedImportAction(document,actions,diag,message);
			break;
		}
	}
	,makeDynamicAction: function(document,actions,diag,message) {
		var replace = StringTools.replace(document.getText(diag.range),"Dynamic","Any");
		this.replaceAction(actions,"Replace with Any",document,diag.range,diag,replace);
	}
	,makeEmptyPackageAction: function(document,actions,diag,message) {
		var code = diag.code;
		switch(code) {
		case "MissingPackage":
			this.insertAction(actions,"Add package declaration",document,diag.range.start,diag,"package;\n");
			break;
		case "RedundantPackage":
			this.deleteAction(actions,"Remove package declaration",document,diag.range,diag);
			break;
		}
	}
	,makeIndentationAction: function(document,actions,diag,message) {
		var reg = new EReg("expected: \"([^\"]+)\"","");
		if(!reg.match(message)) {
			return;
		}
		var replace = reg.matched(1);
		replace = StringTools.replace(replace,"\\t","\t");
		this.replaceAction(actions,"Fix indentation",document,diag.range,diag,replace);
	}
	,makeRedundantModifierAction: function(document,actions,diag,message) {
		var code = diag.code;
		switch(code) {
		case "MissingPrivate":case "MissingPublic":
			var modifier = code == "MissingPublic" ? "public" : "private";
			this.insertAction(actions,"Add public/private modifier",document,diag.range.start,diag,"" + modifier + " ");
			break;
		case "RedundantPrivate":case "RedundantPublic":
			var modifier1 = code == "RedundantPublic" ? "public" : "private";
			var line = document.lineAt(diag.range.start);
			var index = line.text.indexOf("" + modifier1 + " ");
			if(index == -1) {
				return;
			}
			var modifierPos = document.positionAt(document.offsetAt(line.range.start) + index);
			var modifierRange = new vscode_Range(modifierPos,modifierPos.translate(0,modifier1.length + 1));
			this.replaceAction(actions,"Remove public/private modifier",document,modifierRange,diag,"");
			break;
		}
	}
	,makeStringLiteralAction: function(document,actions,diag,message) {
		var code = diag.code;
		var text = null;
		var quote = null;
		switch(code) {
		case "UseDoubleQuotes":
			text = "Change single quotes to double quotes";
			quote = "\"";
			break;
		case "UseSingleQuotes":
			text = "Change double quotes to single quotes";
			quote = "'";
			break;
		}
		if(text == null) {
			return;
		}
		var quoteRange = new vscode_Range(diag.range.start,diag.range.start.translate(0,1));
		this.replaceAction(actions,text,document,quoteRange,diag,quote);
		quoteRange = new vscode_Range(diag.range.end,diag.range.end.translate(0,-1));
		this.replaceAction(actions,text,document,quoteRange,diag,quote);
	}
	,makeTraceCheckAction: function(document,actions,diag,message) {
		this.deleteAction(actions,"Delete trace",document,diag.range,diag);
		var prefix = document.getText(new vscode_Range(diag.range.start.line,0,diag.range.start.line,diag.range.start.character));
		if(new EReg("\\s+","").match(prefix)) {
			prefix = "\n" + prefix;
		} else {
			prefix = " ";
		}
		this.insertAction(actions,"Add suppression",document,diag.range.start,diag,"@SuppressWarning(\"checkstyle:Trace\")" + prefix);
	}
	,makeUnusedImportAction: function(document,actions,diag,message) {
		var line = document.lineAt(diag.range.start);
		var importRange = diag.range;
		if(line.range.isEqual(diag.range)) {
			importRange = new vscode_Range(diag.range.start,new vscode_Position(importRange.end.line + 1,0));
		}
		var code = diag.code;
		switch(code) {
		case "MultiplePackage":
			break;
		case "DuplicateImport":case "SamePackage":case "ToplevelImport":case "UnusedImport":
			this.deleteAction(actions,"Cleanup imports",document,importRange,diag);
			break;
		}
	}
	,createOrGetAction: function(actions,title,diagnostic) {
		if(__map_reserved[title] != null ? actions.existsReserved(title) : actions.h.hasOwnProperty(title)) {
			var action = __map_reserved[title] != null ? actions.getReserved(title) : actions.h[title];
			action.diagnostics.push(diagnostic);
			return action;
		}
		var action1 = new vscode_CodeAction(title,vscode_CodeActionKind.QuickFix);
		action1.diagnostics = [diagnostic];
		action1.edit = new vscode_WorkspaceEdit();
		if(__map_reserved[title] != null) {
			actions.setReserved(title,action1);
		} else {
			actions.h[title] = action1;
		}
		return action1;
	}
	,insertAction: function(actions,title,document,pos,diagnostic,insertText) {
		var action = this.createOrGetAction(actions,title,diagnostic);
		action.edit.insert(document.uri,pos,insertText);
	}
	,replaceAction: function(actions,title,document,range,diagnostic,replaceText) {
		var action = this.createOrGetAction(actions,title,diagnostic);
		action.edit.replace(document.uri,range,replaceText);
	}
	,deleteAction: function(actions,title,document,range,diagnostic) {
		var action = this.createOrGetAction(actions,title,diagnostic);
		action.edit["delete"](document.uri,range);
	}
	,__class__: CheckstyleCodeActions
};
var CompileTime = function() { };
$hxClasses["CompileTime"] = CompileTime;
CompileTime.__name__ = "CompileTime";
var CompileTimeClassList = function() { };
$hxClasses["CompileTimeClassList"] = CompileTimeClassList;
CompileTimeClassList.__name__ = "CompileTimeClassList";
CompileTimeClassList.get = function(id) {
	if(CompileTimeClassList.lists == null) {
		CompileTimeClassList.initialise();
	}
	var _this = CompileTimeClassList.lists;
	if(__map_reserved[id] != null) {
		return _this.getReserved(id);
	} else {
		return _this.h[id];
	}
};
CompileTimeClassList.getTyped = function(id,type) {
	return CompileTimeClassList.get(id);
};
CompileTimeClassList.initialise = function() {
	CompileTimeClassList.lists = new haxe_ds_StringMap();
	var m = haxe_rtti_Meta.getType(CompileTimeClassList);
	if(m.classLists != null) {
		var _g = 0;
		var _g1 = m.classLists;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var array = item;
			var listID = array[0];
			var list = new haxe_ds_List();
			var _g2 = 0;
			var _g3 = array[1].split(",");
			while(_g2 < _g3.length) {
				var typeName = _g3[_g2];
				++_g2;
				var type = $hxClasses[typeName];
				if(type != null) {
					list.push(type);
				}
			}
			var _this = CompileTimeClassList.lists;
			if(__map_reserved[listID] != null) {
				_this.setReserved(listID,list);
			} else {
				_this.h[listID] = list;
			}
		}
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
var Main = function(ctx) {
	this.context = ctx;
	this.diagnostics = Vscode.languages.createDiagnosticCollection("checkstyle");
	this.codeActions = new CheckstyleCodeActions();
	Vscode.languages.registerCodeActionsProvider("haxe",this.codeActions);
	Vscode.workspace.onDidSaveTextDocument($bind(this,this.check));
	Vscode.workspace.onDidOpenTextDocument($bind(this,this.check));
	var _g = 0;
	var _g1 = Vscode.window.visibleTextEditors;
	while(_g < _g1.length) {
		var editor = _g1[_g];
		++_g;
		this.check(editor.document);
	}
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = $hx_exports["activate"] = function(context) {
	new Main(context);
};
Main.prototype = {
	context: null
	,diagnostics: null
	,codeActions: null
	,check: function(event) {
		var fileName = event.fileName;
		if(event.languageId != "haxe" || !sys_FileSystem.exists(fileName)) {
			return;
		}
		var rootFolder = this.determineRootFolder(fileName);
		if(rootFolder == null) {
			return;
		}
		tokentree_TokenStream.MODE = tokentree_TokenStreamMode.RELAXED;
		var checker = new checkstyle_Main();
		checker.configParser.validateMode = checkstyle_config_ConfigValidateMode.RELAXED;
		this.addSourcePaths(checker.configParser);
		if(!this.fileInSourcePaths(fileName,rootFolder,checker.configParser.paths)) {
			return;
		}
		checkstyle_config_ExcludeManager.INSTANCE.clear();
		this.loadConfig(checker,fileName,rootFolder);
		var file = [{ name : fileName, content : null, index : 0}];
		var reporter = new VSCodeReporter(1,checker.configParser.getCheckCount(),checker.checker.checks.length,null,false);
		checkstyle_reporter_ReporterManager.INSTANCE.clear();
		checkstyle_reporter_ReporterManager.INSTANCE.addReporter(reporter);
		checker.checker.process(file);
		this.diagnostics.set(vscode_Uri.file(fileName),reporter.diagnostics);
	}
	,loadConfig: function(checker,fileName,rootFolder) {
		var defaultPath = this.determineConfigFolder(fileName,rootFolder);
		if(defaultPath == null) {
			this.loadConfigFromSettings(checker,rootFolder);
			return;
		}
		try {
			checker.configPath = haxe_io_Path.join([defaultPath,"checkstyle.json"]);
			checker.configParser.loadConfig(checker.configPath);
			try {
				var excludeConfig = haxe_io_Path.join([defaultPath,"checkstyle-excludes.json"]);
				if(sys_FileSystem.exists(excludeConfig)) {
					checker.configParser.loadExcludeConfig(excludeConfig);
				}
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			}
			return;
		} catch( e2 ) {
			haxe_CallStack.lastException = e2;
			var e3 = (e2 instanceof js__$Boot_HaxeError) ? e2.val : e2;
			checker.configPath = null;
		}
		this.loadConfigFromSettings(checker,rootFolder);
	}
	,loadConfigFromSettings: function(checker,rootFolder) {
		var configuration = Vscode.workspace.getConfiguration("haxecheckstyle");
		if(configuration.has("configurationFile") && configuration.get("configurationFile") != "") {
			try {
				var file = configuration.get("configurationFile");
				if(sys_FileSystem.exists(file)) {
					checker.configPath = file;
				} else {
					checker.configPath = haxe_io_Path.join([rootFolder,file]);
				}
				checker.configParser.loadConfig(checker.configPath);
				return;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				checker.configPath = null;
			}
		}
		this.useInternalCheckstyleConfig(checker,rootFolder);
	}
	,determineConfigFolder: function(fileName,rootFolder) {
		var path = haxe_io_Path.directory(fileName);
		while(path.length >= rootFolder.length) {
			var configFile = haxe_io_Path.join([path,"checkstyle.json"]);
			if(sys_FileSystem.exists(configFile)) {
				return path;
			}
			path = haxe_io_Path.normalize(haxe_io_Path.join([path,".."]));
		}
		return null;
	}
	,useInternalCheckstyleConfig: function(checker,rootFolder) {
		var config = { };
		try {
			checker.configParser.parseAndValidateConfig(config,rootFolder);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			checker.configParser.addAllChecks();
		}
	}
	,determineRootFolder: function(fileName) {
		if(Vscode.workspace.workspaceFolders == null) {
			return null;
		}
		var _g1 = 0;
		var _g = Vscode.workspace.workspaceFolders.length;
		while(_g1 < _g) {
			var i = _g1++;
			var workspaceFolder = Vscode.workspace.workspaceFolders[i];
			if(StringTools.startsWith(fileName,workspaceFolder.uri.fsPath)) {
				return workspaceFolder.uri.fsPath;
			}
		}
		return null;
	}
	,addSourcePaths: function(configParser) {
		var configuration = Vscode.workspace.getConfiguration("haxecheckstyle");
		if(!configuration.has("sourceFolders")) {
			return;
		}
		var folders = configuration.get("sourceFolders");
		if(folders == null) {
			return;
		}
		var _g = 0;
		while(_g < folders.length) {
			var folder = folders[_g];
			++_g;
			configParser.paths.push(folder);
		}
	}
	,fileInSourcePaths: function(fileName,rootFolder,paths) {
		fileName = this.normalizePath(fileName);
		var _g = 0;
		while(_g < paths.length) {
			var path = paths[_g];
			++_g;
			var rootPath = this.normalizePath(haxe_io_Path.join([rootFolder,path]));
			if(StringTools.startsWith(fileName,rootPath)) {
				return true;
			}
		}
		return false;
	}
	,normalizePath: function(path) {
		path = haxe_io_Path.normalize(path);
		if(Sys.systemName() == "Windows") {
			path = path.toLowerCase();
		}
		return path;
	}
	,__class__: Main
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Sys = function() { };
$hxClasses["Sys"] = Sys;
Sys.__name__ = "Sys";
Sys.stderr = function() {
	return null;
};
Sys.stdout = function() {
	return null;
};
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		var other = _g;
		return other;
	}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
var checkstyle_reporter_IReporter = function() { };
$hxClasses["checkstyle.reporter.IReporter"] = checkstyle_reporter_IReporter;
checkstyle_reporter_IReporter.__name__ = "checkstyle.reporter.IReporter";
checkstyle_reporter_IReporter.prototype = {
	start: null
	,finish: null
	,fileStart: null
	,fileFinish: null
	,addMessage: null
	,__class__: checkstyle_reporter_IReporter
};
var checkstyle_reporter_BaseReporter = function(fileCount,checkCount,usedCheckCount,path,ns) {
	this.numFiles = fileCount;
	this.numChecks = checkCount;
	this.numUsedChecks = usedCheckCount;
	this.noStyle = ns;
	if(path != null) {
		var folder = haxe_io_Path.directory(path);
		if(folder.length > 0 && !sys_FileSystem.exists(folder)) {
			sys_FileSystem.createDirectory(folder);
		}
		this.file = sys_io_File.write(path);
		this.report = new StringBuf();
	}
};
$hxClasses["checkstyle.reporter.BaseReporter"] = checkstyle_reporter_BaseReporter;
checkstyle_reporter_BaseReporter.__name__ = "checkstyle.reporter.BaseReporter";
checkstyle_reporter_BaseReporter.__interfaces__ = [checkstyle_reporter_IReporter];
checkstyle_reporter_BaseReporter.severityString = function(s) {
	switch(s) {
	case "ERROR":
		return "Error";
	case "IGNORE":
		return "Ignore";
	case "INFO":
		return "Info";
	case "WARNING":
		return "Warning";
	}
};
checkstyle_reporter_BaseReporter.prototype = {
	errors: null
	,warnings: null
	,infos: null
	,total: null
	,report: null
	,file: null
	,numFiles: null
	,numChecks: null
	,numUsedChecks: null
	,noStyle: null
	,start: function() {
		this.errors = 0;
		this.warnings = 0;
		this.infos = 0;
		this.total = 0;
		var inlobj_keywords_0 = "haxe";
		var inlobj_main = "bin/main.js";
		var inlobj_name = "haxe-checkstyle";
		var inlobj_description = "Linter for Haxe files";
		var inlobj_repository_url = "https://github.com/vshaxe/vscode-checkstyle";
		var inlobj_repository_type = "git";
		var inlobj_categories_0 = "Linters";
		var inlobj_publisher = "vshaxe";
		var inlobj_contributes_jsonValidation_0_fileMatch = "checkstyle.json";
		var inlobj_contributes_jsonValidation_0_url = "./resources/checkstyle-schema.json";
		var inlobj_contributes_jsonValidation_1_fileMatch = "checkstyle-excludes.json";
		var inlobj_contributes_jsonValidation_1_url = "./resources/checkstyle-excludes-schema.json";
		var inlobj_contributes_configuration_title = "Haxe Checkstyle";
		var inlobj_contributes_configuration_properties = { "haxecheckstyle.sourceFolders" : { description : "Source folders for code style check", type : "array", "default" : ["src","Source"]}, "haxecheckstyle.configurationFile" : { description : "Configuration file for the code style check", type : "string", "default" : ""}};
		var inlobj_galleryBanner_color = "#A84B38";
		var inlobj_galleryBanner_theme = "dark";
		var inlobj_icon = "logo.png";
		var inlobj_engines = { vscode : "^1.20.0", "nadako.vshaxe" : "*"};
		var inlobj_version = "1.2.0";
		var inlobj_scripts = { "vscode:prepublish" : "haxe build.hxml"};
		var inlobj_activationEvents_0 = "onLanguage:haxe";
		var inlobj_badges_0_description = "Travis CI Status";
		var inlobj_badges_0_url = "https://api.travis-ci.org/vshaxe/vscode-checkstyle.svg?branch=master";
		var inlobj_badges_0_href = "https://travis-ci.org/vshaxe/vscode-checkstyle";
		var inlobj_license = "MIT";
		var inlobj_bugs = "https://github.com/vshaxe/vscode-checkstyle/issues";
		var inlobj_displayName = "Haxe Checkstyle";
		var version = inlobj_version;
		process.stdout.write("");
		process.stdout.write("\n");
		var fileString = this.numFiles == 1 ? "file" : "files";
		var v = this.styleText("Running Checkstyle v" + version + " using " + this.numUsedChecks + "/" + this.numChecks + " checks on " + this.numFiles + " source " + fileString + "...",1);
		process.stdout.write(v);
		process.stdout.write("\n");
		process.stdout.write("");
		process.stdout.write("\n");
	}
	,finish: function() {
		if(this.file != null) {
			this.file.writeString(this.report.b);
			this.file.close();
		}
		this.total = this.errors + this.warnings + this.infos;
		if(this.total > 0) {
			var v = this.styleText("\nTotal Issues: " + this.total + " (",1) + this.styleText("Errors: " + this.errors,91) + this.styleText(", ",1) + this.styleText("Warnings: " + this.warnings,95) + this.styleText(", ",1) + this.styleText("Infos: " + this.infos,94) + this.styleText(")",1);
			process.stdout.write(v);
			process.stdout.write("\n");
		} else {
			var v1 = this.styleText("No issues found.",1);
			process.stdout.write(v1);
			process.stdout.write("\n");
		}
	}
	,fileStart: function(f) {
	}
	,fileFinish: function(f) {
	}
	,addMessage: function(m) {
	}
	,styleText: function(s,style) {
		if(Sys.systemName() == "Windows" || this.noStyle) {
			return s;
		}
		return "\x1B[" + style + "m" + s + "\x1B[0m";
	}
	,applyColour: function(msg,s) {
		switch(s) {
		case "ERROR":
			return this.styleText(msg,91);
		case "IGNORE":
			return this.styleText(msg,94);
		case "INFO":
			return this.styleText(msg,94);
		case "WARNING":
			return this.styleText(msg,95);
		}
	}
	,getMessage: function(m) {
		var sb = new StringBuf();
		sb.b += Std.string(m.fileName);
		sb.b += ":";
		sb.b += Std.string(m.startLine);
		if(m.startColumn >= 0) {
			var isRange = m.startColumn != m.endColumn;
			sb.b += Std.string(": character" + (isRange ? "s" : "") + " ");
			sb.b += Std.string(m.startColumn);
			if(isRange) {
				sb.b += "-";
				sb.b += Std.string(m.endColumn);
			}
			sb.b += " ";
		}
		sb.b += ": ";
		sb.b += Std.string(m.moduleName);
		sb.b += " - ";
		var x = checkstyle_reporter_BaseReporter.severityString(m.severity);
		sb.b += Std.string(x);
		sb.b += ": ";
		sb.b += Std.string(m.message);
		sb.b += "\n";
		return sb;
	}
	,__class__: checkstyle_reporter_BaseReporter
};
var VSCodeReporter = function(fileCount,checkCount,usedCheckCount,path,ns) {
	this.diagnostics = [];
	checkstyle_reporter_BaseReporter.call(this,fileCount,checkCount,usedCheckCount,path,ns);
};
$hxClasses["VSCodeReporter"] = VSCodeReporter;
VSCodeReporter.__name__ = "VSCodeReporter";
VSCodeReporter.__super__ = checkstyle_reporter_BaseReporter;
VSCodeReporter.prototype = $extend(checkstyle_reporter_BaseReporter.prototype,{
	diagnostics: null
	,addMessage: function(m) {
		var range = new vscode_Range(m.startLine - 1,m.startColumn,m.endLine - 1,m.endColumn);
		var diag = new vscode_Diagnostic(range,m.moduleName + " - " + m.message,vscode__$DiagnosticSeverity_DiagnosticSeverity_$Impl_$.Information);
		diag.source = "checkstyle";
		diag.code = m.code;
		this.diagnostics.push(diag);
	}
	,__class__: VSCodeReporter
});
var Vscode = require("vscode");
var byte__$ByteData_ByteData_$Impl_$ = {};
$hxClasses["byte._ByteData.ByteData_Impl_"] = byte__$ByteData_ByteData_$Impl_$;
byte__$ByteData_ByteData_$Impl_$.__name__ = "byte._ByteData.ByteData_Impl_";
byte__$ByteData_ByteData_$Impl_$.get_length = function(this1) {
	return this1.length;
};
byte__$ByteData_ByteData_$Impl_$.readByte = function(this1,i) {
	return this1.b[i];
};
byte__$ByteData_ByteData_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
byte__$ByteData_ByteData_$Impl_$.ofString = function(s) {
	var this1 = haxe_io_Bytes.ofString(s);
	return this1;
};
byte__$ByteData_ByteData_$Impl_$.ofBytes = function(b) {
	var this1 = b;
	return this1;
};
byte__$ByteData_ByteData_$Impl_$.readString = function(this1,pos,len) {
	return this1.getString(pos,len);
};
var checkstyle_Checker = function() {
	this.checks = [];
	this.baseDefines = [];
	this.defineCombinations = [];
	this.linesIdx = [];
};
$hxClasses["checkstyle.Checker"] = checkstyle_Checker;
checkstyle_Checker.__name__ = "checkstyle.Checker";
checkstyle_Checker.prototype = {
	file: null
	,lines: null
	,tokens: null
	,ast: null
	,checks: null
	,baseDefines: null
	,defineCombinations: null
	,linesIdx: null
	,lineSeparator: null
	,tokenTree: null
	,asts: null
	,excludesRanges: null
	,addCheck: function(check) {
		this.checks.push(check);
	}
	,getTokenTree: function() {
		if(this.tokens == null) {
			return null;
		}
		if(this.tokenTree == null) {
			this.tokenTree = tokentree_TokenTreeBuilder.buildTokenTree(this.tokens,this.file.content);
		}
		return this.tokenTree;
	}
	,makePosIndices: function() {
		var code = this.file.content;
		this.linesIdx = [];
		var last = 0;
		var left = false;
		var _g1 = 0;
		var _g = code.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(code.b[i] == 10) {
				this.linesIdx.push({ l : last, r : i});
				last = i + 1;
				left = false;
			}
			left = true;
		}
		if(left) {
			this.linesIdx.push({ l : last, r : code.length});
		}
	}
	,getLinePos: function(off) {
		var lowerBound = 0;
		var upperBound = this.linesIdx.length - 1;
		if(this.linesIdx.length <= 0) {
			throw new js__$Boot_HaxeError("Bad offset");
		}
		if(off < 0) {
			throw new js__$Boot_HaxeError("Bad offset");
		}
		if(off > this.linesIdx[upperBound].r) {
			throw new js__$Boot_HaxeError("Bad offset");
		}
		while(true) {
			if(lowerBound > upperBound) {
				throw new js__$Boot_HaxeError("Bad offset");
			}
			var center = lowerBound + Math.floor((upperBound - lowerBound) / 2);
			var matchLeft = this.linesIdx[center].l <= off;
			var matchRight = this.linesIdx[center].r >= off;
			if(matchLeft && matchRight) {
				return { line : center, ofs : off - this.linesIdx[center].l};
			}
			if(matchLeft) {
				lowerBound = center + 1;
				continue;
			}
			if(matchRight) {
				upperBound = center - 1;
				continue;
			}
		}
	}
	,getString: function(off,off2) {
		var code = this.file.content;
		var len = off2 - off;
		if(off >= code.length || off + len > code.length) {
			return "";
		}
		return code.sub(off,off2 - off).toString();
	}
	,findLineSeparator: function() {
		var codeBytes = this.file.content;
		var code = codeBytes.toString();
		var _g1 = 0;
		var _g = code.length;
		while(_g1 < _g) {
			var i = _g1++;
			var char = code.charAt(i);
			if(char == "\r" || char == "\n") {
				this.lineSeparator = char;
				if(char == "\r" && i + 1 < code.length) {
					char = code.charAt(i + 1);
					if(char == "\n") {
						this.lineSeparator += char;
					}
				}
				return;
			}
		}
		this.lineSeparator = "\n";
	}
	,makeLines: function() {
		var code = this.file.content;
		var textCode = code.toString();
		this.lines = textCode.split(this.lineSeparator);
	}
	,makeTokens: function() {
		try {
			this.tokens = [];
			this.tokenTree = null;
			var lexer = new haxeparser_HaxeLexer(this.file.content,this.file.name);
			var t = lexer.token(haxeparser_HaxeLexer.tok);
			while(t.tok != haxeparser_TokenDef.Eof) {
				this.tokens.push(t);
				t = lexer.token(haxeparser_HaxeLexer.tok);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			checkstyle_utils_ErrorUtils.handleException((e instanceof js__$Boot_HaxeError) ? e.val : e,this.file,"makeTokens");
		}
	}
	,makeASTs: function() {
		this.asts = [];
		var res = this.makeAST(this.baseDefines);
		if(res != null) {
			this.asts.push(res);
		}
		var _g = 0;
		var _g1 = this.defineCombinations;
		while(_g < _g1.length) {
			var combination = _g1[_g];
			++_g;
			var res1 = this.makeAST(combination.concat(this.baseDefines));
			if(res1 != null) {
				this.asts.push(res1);
			}
		}
	}
	,makeAST: function(defines) {
		var parser = new haxeparser_HaxeParser(this.file.content,this.file.name);
		parser.define("cross");
		parser.define("scriptable");
		parser.define("unsafe");
		var _g = 0;
		while(_g < defines.length) {
			var define = defines[_g];
			++_g;
			var flagValue = define.split("=");
			parser.define(flagValue[0],flagValue[1]);
		}
		try {
			return parser.parse();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			checkstyle_utils_ErrorUtils.handleException((e instanceof js__$Boot_HaxeError) ? e.val : e,this.file,"makeAST [" + defines.join(",") + "]");
		}
		return null;
	}
	,process: function(files) {
		var advanceFrame = function() {
		};
		checkstyle_reporter_ReporterManager.INSTANCE.start();
		var _g = 0;
		while(_g < files.length) {
			var checkFile = files[_g];
			++_g;
			this.loadFileContent(checkFile);
			if(this.createContext(checkFile)) {
				this.run();
			}
			this.unloadFileContent(checkFile);
			advanceFrame();
		}
		advanceFrame();
		checkstyle_reporter_ReporterManager.INSTANCE.finish();
		advanceFrame();
	}
	,loadFileContent: function(checkFile) {
		if(checkFile.content == null) {
			checkFile.content = js_node_buffer__$Buffer_Helper.bytesOfBuffer(js_node_Fs.readFileSync(checkFile.name));
		}
	}
	,unloadFileContent: function(checkFile) {
		checkFile.content = null;
	}
	,createContext: function(checkFile) {
		this.file = checkFile;
		checkstyle_reporter_ReporterManager.INSTANCE.fileStart(this.file);
		try {
			this.findLineSeparator();
			this.makeLines();
			this.makePosIndices();
			this.makeTokens();
			this.makeASTs();
			if(this.asts.length <= 0) {
				return false;
			}
			this.getTokenTree();
			this.excludesRanges = checkstyle_config_ExcludeManager.INSTANCE.getPosExcludes(this);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			checkstyle_utils_ErrorUtils.handleException((e instanceof js__$Boot_HaxeError) ? e.val : e,this.file,"createContext");
			return false;
		}
		return true;
	}
	,run: function() {
		var _g = 0;
		var _g1 = this.checks;
		while(_g < _g1.length) {
			var check = _g1[_g];
			++_g;
			var messages = [];
			if(check.type == checkstyle_checks_CheckType.AST) {
				var _g2 = 0;
				var _g3 = this.asts;
				while(_g2 < _g3.length) {
					var ast = _g3[_g2];
					++_g2;
					this.ast = ast;
					messages = messages.concat(this.runCheck(check));
				}
			} else {
				this.ast = this.asts[0];
				messages = messages.concat(this.runCheck(check));
			}
			checkstyle_reporter_ReporterManager.INSTANCE.addMessages(messages);
		}
		checkstyle_reporter_ReporterManager.INSTANCE.fileFinish(this.file);
	}
	,runCheck: function(check) {
		try {
			if(checkstyle_config_ExcludeManager.isExcludedFromCheck(this.file.name,check.getModuleName())) {
				return [];
			}
			return check.run(this);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			checkstyle_utils_ErrorUtils.handleException((e instanceof js__$Boot_HaxeError) ? e.val : e,this.file,check.getModuleName());
			return [];
		}
	}
	,__class__: checkstyle_Checker
};
var checkstyle_ChecksInfo = function() {
	this.checkInfos = new haxe_ds_StringMap();
	var checksClasses = CompileTimeClassList.get("null,true,checkstyle.checks.Check");
	var _g_head = checksClasses.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var cl = val;
		if(checkstyle_ChecksInfo.ignoreClass(cl)) {
			continue;
		}
		var names = checkstyle_ChecksInfo.getCheckNameFromClass(cl);
		var _g1 = 0;
		var _g = names.length;
		while(_g1 < _g) {
			var i = _g1++;
			var desc = this.getCheckDescription(cl);
			var v = { name : names[i], clazz : cl, isAlias : i > 0, description : i == 0 ? desc : desc + " [DEPRECATED, use " + Std.string(names[0]) + " instead]"};
			var _this = this.checkInfos;
			var key = names[i];
			if(__map_reserved[key] != null) {
				_this.setReserved(key,v);
			} else {
				_this.h[key] = v;
			}
		}
	}
};
$hxClasses["checkstyle.ChecksInfo"] = checkstyle_ChecksInfo;
checkstyle_ChecksInfo.__name__ = "checkstyle.ChecksInfo";
checkstyle_ChecksInfo.ignoreClass = function(cl) {
	var meta = haxe_rtti_Meta.getType(cl);
	return meta.ignore != null;
};
checkstyle_ChecksInfo.getCheckNameFromClass = function(cl) {
	var meta = haxe_rtti_Meta.getType(cl);
	if(meta.name == null) {
		throw new js__$Boot_HaxeError("" + cl.__name__ + " has no @name meta.");
	}
	return meta.name;
};
checkstyle_ChecksInfo.getCheckName = function(check) {
	return checkstyle_ChecksInfo.getCheckNameFromClass(check == null ? null : js_Boot.getClass(check))[0];
};
checkstyle_ChecksInfo.prototype = {
	checkInfos: null
	,getCheckDescription: function(cl) {
		return haxe_rtti_Meta.getType(cl).desc[0];
	}
	,checks: function() {
		var _this = this.checkInfos;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,build: function(name) {
		var _this = this.checkInfos;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			return null;
		}
		var _this1 = this.checkInfos;
		var cl = (__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).clazz;
		return Type.createInstance(cl,[]);
	}
	,__class__: checkstyle_ChecksInfo
};
var checkstyle_Main = function() {
	checkstyle_Main.exitCode = 0;
	this.configPath = null;
	this.excludePath = null;
	this.detectConfig = null;
	this.configParser = new checkstyle_config_ConfigParser($bind(this,this.failWith));
	this.checker = this.configParser.checker;
};
$hxClasses["checkstyle.Main"] = checkstyle_Main;
checkstyle_Main.__name__ = "checkstyle.Main";
checkstyle_Main.setExitCode = function(newExitCode) {
	checkstyle_Main.exitCode = newExitCode;
};
checkstyle_Main.main = function() {
	var args;
	var cwd;
	var oldCwd = null;
	try {
		args = process.argv.slice(2);
		cwd = process.cwd();
		if(process.env["HAXELIB_RUN"] != null) {
			cwd = args.pop();
			oldCwd = process.cwd();
		}
		if(oldCwd != null) {
			process.chdir(cwd);
		}
		new checkstyle_Main().run(args);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		Sys.stderr().writeString(Std.string(e1) + "\n");
		Sys.stderr().writeString(haxe_CallStack.toString(haxe_CallStack.exceptionStack()) + "\n");
	}
	if(oldCwd != null) {
		process.chdir(oldCwd);
	}
	process.exit(checkstyle_Main.exitCode);
};
checkstyle_Main.prototype = {
	checker: null
	,configPath: null
	,excludePath: null
	,disableThreads: null
	,detectConfig: null
	,configParser: null
	,run: function(args) {
		var _gthis = this;
		var argHandler_getDoc = function() {
			return "[-s | --source] <path>                      : Set source path to process (multiple allowed)\n[-c | --config] <path>                      : Set config file (default: checkstyle.json)\n[-e | --exclude] <path>                     : Set exclude file (default: checkstyle-exclude.json)\n[-r | --reporter] <name>                    : Set reporter (xml, json or text, default: text)\n[-p | --path] <path>                        : Set reporter output path\n[-x | --xslt] <style>                       : Set reporter style (XSLT)\n[-checkerthreads] <num>                     : Sets the number of checker threads\n[-default-config | --default-config] <path> : Generate a default config and exit\n[-detect] <path>                            : Try to detect your coding style (experimental)\n[-exitcode]                                 : Return number of failed checks in exitcode\n[-list-checks | --list-checks]              : List all available checks and exit\n[-list-reporters | --list-reporters]        : List all available reporters and exit\n[-nostyle]                                  : Omit styling in output summary\n[-nothreads]                                : Do not use checker threads\n[-progress]                                 : Show percentage progress\n[-show-missing-checks]                      : Show checks missing from active config\n[-show-parser-errors]                       : Adds error messages for files that checkstyle fails to parse";
		};
		var argHandler_parse = function(__args) {
			var __index = 0;
			while(__index < __args.length) {
				var _g = __args[__index++];
				switch(_g) {
				case "--default-config":case "-default-config":
					if(__index + 1 > __args.length) {
						if(![false][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
						}
					}
					_gthis.generateDefaultConfig(__args[__index]);
					++__index;
					break;
				case "--reporter":case "-r":
					if(__index + 1 > __args.length) {
						if(![false][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
						}
					}
					checkstyle_Main.REPORT_TYPE = __args[__index];
					++__index;
					break;
				case "--xslt":case "-x":
					if(__index + 1 > __args.length) {
						if(![false][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
						}
					}
					checkstyle_Main.STYLE = __args[__index];
					++__index;
					break;
				case "--config":case "-c":
					if(__index + 1 > __args.length) {
						if(![false][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
						}
					}
					_gthis.configPath = __args[__index];
					++__index;
					break;
				case "-checkerthreads":
					if(__index + 1 > __args.length) {
						if(![false][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
						}
					}
					_gthis.configParser.overrideCheckerThreads = Std.parseInt(__args[__index]);
					++__index;
					break;
				case "-detect":
					if(__index + 1 > __args.length) {
						if(![false][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
						}
					}
					_gthis.detectCodingStyle(__args[__index]);
					++__index;
					break;
				case "--exclude":case "-e":
					if(__index + 1 > __args.length) {
						if(![false][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
						}
					}
					_gthis.excludePath = __args[__index];
					++__index;
					break;
				case "-exitcode":
					if(__index > __args.length) {
						if(![][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
						}
					}
					checkstyle_Main.EXIT_CODE = true;
					__index += 0;
					break;
				case "--list-checks":case "-list-checks":
					if(__index > __args.length) {
						if(![][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
						}
					}
					_gthis.listChecks();
					__index += 0;
					break;
				case "--list-reporters":case "-list-reporters":
					if(__index > __args.length) {
						if(![][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
						}
					}
					_gthis.listReporters();
					__index += 0;
					break;
				case "-nostyle":
					if(__index > __args.length) {
						if(![][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
						}
					}
					checkstyle_Main.NO_STYLE = true;
					__index += 0;
					break;
				case "-nothreads":
					if(__index > __args.length) {
						if(![][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
						}
					}
					_gthis.disableThreads = true;
					__index += 0;
					break;
				case "--path":case "-p":
					if(__index + 1 > __args.length) {
						if(![false][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
						}
					}
					var path = __args[__index];
					checkstyle_Main.XML_PATH = path;
					checkstyle_Main.JSON_PATH = path;
					checkstyle_Main.TEXT_PATH = path;
					++__index;
					break;
				case "-progress":
					if(__index > __args.length) {
						if(![][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
						}
					}
					checkstyle_Main.SHOW_PROGRESS = true;
					__index += 0;
					break;
				case "--source":case "-s":
					if(__index + 1 > __args.length) {
						if(![false][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
						}
					}
					_gthis.configParser.paths.push(__args[__index]);
					++__index;
					break;
				case "-show-missing-checks":
					if(__index > __args.length) {
						if(![][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
						}
					}
					checkstyle_Main.SHOW_MISSING_CHECKS = true;
					__index += 0;
					break;
				case "-show-parser-errors":
					if(__index > __args.length) {
						if(![][__args.length - 1]) {
							throw new js__$Boot_HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
						}
					}
					checkstyle_reporter_ReporterManager.SHOW_PARSE_ERRORS = true;
					__index += 0;
					break;
				default:
					var arg = _g;
					_gthis.failWith("Unknown command: " + arg);
				}
			}
		};
		if(args.length == 0) {
			var v = argHandler_getDoc();
			process.stdout.write(v);
			process.stdout.write("\n");
			process.exit(0);
		}
		argHandler_parse(args);
		if(checkstyle_Main.REPORT_TYPE == checkstyle_Main.CODE_CLIMATE_REPORTER) {
			var defaultConfig = JSON.parse(js_node_Fs.readFileSync("/config.json",{ encoding : "utf8"}));
			if(defaultConfig.include_paths != null && defaultConfig.include_paths.length > 0) {
				var _g1 = 0;
				var _g11 = defaultConfig.include_paths;
				while(_g1 < _g11.length) {
					var s = _g11[_g1];
					++_g1;
					if(s != ".codeclimate.yml") {
						this.configParser.paths.push("/code/" + s);
					}
				}
			} else {
				this.configParser.paths.push("/code");
			}
			this.configParser.validateMode = checkstyle_config_ConfigValidateMode.RELAXED;
			if(defaultConfig.config != null) {
				this.configPath = defaultConfig.config;
			}
			if(defaultConfig.exclude != null) {
				this.excludePath = defaultConfig.exclude;
			}
			if(this.configParser.paths.length > 0) {
				this.processArgs();
			}
		} else {
			this.processArgs();
		}
	}
	,processArgs: function() {
		if(this.configPath == null && sys_FileSystem.exists(checkstyle_Main.DEFAULT_CONFIG) && !sys_FileSystem.isDirectory(checkstyle_Main.DEFAULT_CONFIG)) {
			this.configPath = checkstyle_Main.DEFAULT_CONFIG;
		}
		if(this.excludePath == null && sys_FileSystem.exists(checkstyle_Main.DEFAULT_EXCLUDE_CONFIG) && !sys_FileSystem.isDirectory(checkstyle_Main.DEFAULT_EXCLUDE_CONFIG)) {
			this.excludePath = checkstyle_Main.DEFAULT_EXCLUDE_CONFIG;
		}
		this.configParser.loadConfig(this.configPath);
		if(this.excludePath != null) {
			this.configParser.loadExcludeConfig(this.excludePath);
		}
		this.start();
	}
	,createReporter: function(numFiles) {
		var totalChecks = this.configParser.getCheckCount();
		var checksUsed = this.configParser.getUsedCheckCount();
		var _g = checkstyle_Main.REPORT_TYPE;
		switch(_g) {
		case "codeclimate":
			return new checkstyle_reporter_CodeClimateReporter(numFiles,totalChecks,checksUsed,null,checkstyle_Main.NO_STYLE);
		case "json":
			return new checkstyle_reporter_JSONReporter(numFiles,totalChecks,checksUsed,checkstyle_Main.JSON_PATH,checkstyle_Main.NO_STYLE);
		case "text":
			return new checkstyle_reporter_TextReporter(numFiles,totalChecks,checksUsed,checkstyle_Main.TEXT_PATH,checkstyle_Main.NO_STYLE);
		case "xml":
			return new checkstyle_reporter_XMLReporter(numFiles,totalChecks,checksUsed,checkstyle_Main.XML_PATH,checkstyle_Main.STYLE,checkstyle_Main.NO_STYLE);
		default:
			this.failWith("Unknown reporter: " + checkstyle_Main.REPORT_TYPE);
			return null;
		}
	}
	,listChecks: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.configParser.getSortedCheckInfos();
		while(_g < _g1.length) {
			var check = _g1[_g];
			++_g;
			process.stdout.write(check.name + ":");
			process.stdout.write("\n");
			process.stdout.write("  " + check.description + "\n");
			process.stdout.write("\n");
			if(new EReg("\\[DEPRECATED","").match(check.description)) {
				continue;
			}
			++count;
		}
		process.stdout.write("Total: " + count + " checks");
		process.stdout.write("\n");
		process.exit(0);
	}
	,listReporters: function() {
		process.stdout.write("text - Text reporter (default)");
		process.stdout.write("\n");
		process.stdout.write("xml - XML reporter");
		process.stdout.write("\n");
		process.stdout.write("json - JSON reporter");
		process.stdout.write("\n");
		process.exit(0);
	}
	,generateDefaultConfig: function(path) {
		this.configParser.addAllChecks();
		checkstyle_utils_ConfigUtils.saveConfig(this.checker,path);
		process.exit(0);
	}
	,detectCodingStyle: function(path) {
		var checks = [];
		var checkInfo = this.configParser.info.checks();
		while(checkInfo.hasNext()) {
			var checkInfo1 = checkInfo.next();
			if(checkInfo1.isAlias) {
				continue;
			}
			var check = this.configParser.info.build(checkInfo1.name);
			checks.push(check);
		}
		var detectedChecks = checkstyle_detect_DetectCodingStyle.detectCodingStyle(checks,this.buildFileList());
		if(detectedChecks.length > 0) {
			checkstyle_utils_ConfigUtils.saveCheckConfigList(detectedChecks,path);
		}
		process.exit(0);
	}
	,start: function() {
		if(checkstyle_Main.SHOW_MISSING_CHECKS) {
			this.showMissingChecks();
			process.exit(0);
		}
		var toProcess = this.buildFileList();
		checkstyle_reporter_ReporterManager.INSTANCE.addReporter(this.createReporter(toProcess.length));
		if(checkstyle_Main.SHOW_PROGRESS) {
			checkstyle_reporter_ReporterManager.INSTANCE.addReporter(new checkstyle_reporter_ProgressReporter(toProcess.length));
		}
		if(checkstyle_Main.EXIT_CODE) {
			checkstyle_reporter_ReporterManager.INSTANCE.addReporter(new checkstyle_reporter_ExitCodeReporter());
		}
		this.checker.process(toProcess);
	}
	,buildFileList: function() {
		var files = [];
		var _g = 0;
		var _g1 = this.configParser.paths;
		while(_g < _g1.length) {
			var path = _g1[_g];
			++_g;
			this.traverse(path,files);
		}
		haxe_ds_ArraySort.sort(files,function(a,b) {
			if(a > b) {
				return 1;
			}
			if(a < b) {
				return -1;
			}
			return 0;
		});
		var i = 0;
		var _g2 = [];
		var _g11 = 0;
		while(_g11 < files.length) {
			var file = files[_g11];
			++_g11;
			_g2.push({ name : file, content : null, index : i++});
		}
		return _g2;
	}
	,traverse: function(path,files) {
		try {
			if(sys_FileSystem.isDirectory(path) && !checkstyle_config_ExcludeManager.isExcludedFromAll(path)) {
				var nodes = js_node_Fs.readdirSync(path);
				var _g = 0;
				while(_g < nodes.length) {
					var child = nodes[_g];
					++_g;
					this.traverse(haxe_io_Path.join([path,child]),files);
				}
			} else if(new EReg("(.hx)$","i").match(path) && !checkstyle_config_ExcludeManager.isExcludedFromAll(path)) {
				files.push(path);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			process.stdout.write("\nPath " + path + " not found.");
			process.stdout.write("\n");
		}
	}
	,failWith: function(message) {
		if(checkstyle_Main.REPORT_TYPE == checkstyle_Main.CODE_CLIMATE_REPORTER) {
			return;
		}
		Sys.stderr().writeString(message + "\n");
		process.exit(1);
	}
	,showMissingChecks: function() {
		var configuredChecks = [];
		var missingChecks = [];
		var _g = 0;
		var _g1 = this.checker.checks;
		while(_g < _g1.length) {
			var check = _g1[_g];
			++_g;
			configuredChecks.push(check.getModuleName());
		}
		var check1 = this.configParser.info.checks();
		while(check1.hasNext()) {
			var check2 = check1.next();
			if(configuredChecks.indexOf(check2.name) >= 0) {
				continue;
			}
			if(new EReg("\\[DEPRECATED","").match(check2.description)) {
				continue;
			}
			missingChecks.push(check2);
		}
		if(missingChecks.length <= 0) {
			process.stdout.write("You have no checks missing from your configuration");
			process.stdout.write("\n");
		} else {
			process.stdout.write("The following checks are missing from your configuration:");
			process.stdout.write("\n");
			var _g2 = 0;
			while(_g2 < missingChecks.length) {
				var check3 = missingChecks[_g2];
				++_g2;
				process.stdout.write(check3.name + " - " + check3.description);
				process.stdout.write("\n");
			}
		}
	}
	,__class__: checkstyle_Main
};
var checkstyle_checks_Check = function(type) {
	this.type = type;
	this.severity = "INFO";
	this.categories = ["Style"];
	this.points = 1;
	this.desc = haxe_rtti_Meta.getType(js_Boot.getClass(this)).desc[0];
};
$hxClasses["checkstyle.checks.Check"] = checkstyle_checks_Check;
checkstyle_checks_Check.__name__ = "checkstyle.checks.Check";
checkstyle_checks_Check.prototype = {
	severity: null
	,type: null
	,categories: null
	,points: null
	,desc: null
	,messages: null
	,moduleName: null
	,checker: null
	,reset: function() {
		this.messages = [];
	}
	,configureProperty: function(name,value) {
		this[name] = value;
	}
	,run: function(checker) {
		this.reset();
		this.checker = checker;
		if(this.severity != "IGNORE") {
			try {
				this.actualRun();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				if(typeof(e1) == "string") {
					checkstyle_utils_ErrorUtils.handleException(e1,checker.file,this.getModuleName());
				} else {
					throw e;
				}
			}
		}
		return this.messages;
	}
	,actualRun: function() {
		throw new js__$Boot_HaxeError("Unimplemented");
	}
	,logPos: function(msg,pos,code,sev) {
		this.logRange(msg,pos.min,pos.max,code,sev);
	}
	,logRange: function(msg,startPos,endPos,code,sev) {
		var lpStart = this.checker.getLinePos(startPos);
		var lpEnd = this.checker.getLinePos(endPos);
		var startColumn = this.offsetToColumn(lpStart);
		var endColumn = this.offsetToColumn(lpEnd);
		this.log(msg,lpStart.line + 1,startColumn,lpEnd.line + 1,endColumn,code,sev);
	}
	,offsetToColumn: function(lp) {
		if(this.checker.lines.length <= lp.line) {
			return lp.ofs;
		}
		var line = haxe_io_Bytes.ofString(this.checker.lines[lp.line]);
		return line.getString(0,lp.ofs).length;
	}
	,log: function(msg,startLine,startColumn,endLine,endColumn,code,sev) {
		if(sev == null) {
			sev = this.severity;
		}
		this.messages.push({ fileName : this.checker.file.name, message : msg, code : code, desc : this.desc, startLine : startLine, endLine : endLine, startColumn : startColumn, endColumn : endColumn, severity : sev, moduleName : this.getModuleName(), categories : this.categories, points : this.points});
	}
	,getModuleName: function() {
		if(this.moduleName == null) {
			this.moduleName = checkstyle_ChecksInfo.getCheckName(this);
		}
		return this.moduleName;
	}
	,forEachField: function(cb) {
		if(this.checker.ast.decls == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.checker.ast.decls;
		while(_g < _g1.length) {
			var td = _g1[_g];
			++_g;
			var fields;
			var _g2 = td.decl;
			switch(_g2._hx_index) {
			case 0:
				var d = _g2.d;
				fields = d.data;
				break;
			case 2:
				var a = _g2.a;
				fields = a.data;
				break;
			default:
				fields = null;
			}
			if(fields == null) {
				continue;
			}
			var _g3 = 0;
			while(_g3 < fields.length) {
				var field = fields[_g3];
				++_g3;
				if(!this.isCheckSuppressed(field)) {
					cb(field,checkstyle_utils_FieldUtils.toParentType(td.decl));
				}
			}
		}
	}
	,isCheckSuppressed: function(f) {
		if(f == null) {
			return false;
		}
		return this.isPosSuppressed(f.pos);
	}
	,isLineSuppressed: function(i) {
		if(this.checker.linesIdx.length <= i) {
			return false;
		}
		return this.isCharPosSuppressed(this.checker.linesIdx[i].l);
	}
	,isPosExtern: function(pos) {
		return this.isCharPosExtern(pos.min);
	}
	,isPosSuppressed: function(pos) {
		return this.isCharPosSuppressed(pos.min);
	}
	,isCharPosSuppressed: function(pos) {
		var this1 = this.checker.excludesRanges;
		var key = this.getModuleName();
		var _this = this1;
		var ranges = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(ranges == null) {
			return false;
		}
		if(ranges.length <= 0) {
			return false;
		}
		var _g = 0;
		while(_g < ranges.length) {
			var range = ranges[_g];
			++_g;
			if(range.charPosStart <= pos && range.charPosEnd >= pos) {
				return true;
			}
		}
		return false;
	}
	,isCharPosExtern: function(pos) {
		if(this.checker.ast.decls == null) {
			return false;
		}
		var _g = 0;
		var _g1 = this.checker.ast.decls;
		while(_g < _g1.length) {
			var td = _g1[_g];
			++_g;
			var _g2 = td.decl;
			switch(_g2._hx_index) {
			case 0:
				var d = _g2.d;
				if(pos <= td.pos.max && pos >= td.pos.min) {
					return d.flags.indexOf(haxeparser_ClassFlag.HExtern) != -1;
				}
				break;
			case 1:
				var d1 = _g2.d;
				if(pos <= td.pos.max && pos >= td.pos.min) {
					return d1.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1;
				}
				break;
			case 2:
				var d2 = _g2.a;
				break;
			case 4:
				var d3 = _g2.d;
				if(pos <= td.pos.max && pos >= td.pos.min) {
					return d3.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1;
				}
				var _g21 = d3.data;
				if(_g21._hx_index == 2) {
					var fields = _g21.fields;
					var _g22 = 0;
					while(_g22 < fields.length) {
						var field = fields[_g22];
						++_g22;
						if(pos > field.pos.max) {
							continue;
						}
						if(pos < field.pos.min) {
							continue;
						}
						return d3.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1;
					}
				}
				break;
			default:
			}
		}
		return false;
	}
	,checkSuppressionConst: function(e,search) {
		var _g = e.expr;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			if(c._hx_index == 2) {
				var s = c.s;
				if(s == search) {
					return true;
				}
			}
			break;
		case 6:
			var a = _g.values;
			var _g1 = 0;
			while(_g1 < a.length) {
				var e1 = a[_g1];
				++_g1;
				if(this.checkSuppressionConst(e1,search)) {
					return true;
				}
			}
			break;
		default:
		}
		return false;
	}
	,detectableInstances: function() {
		return [];
	}
	,__class__: checkstyle_checks_Check
};
var checkstyle_checks_CheckType = $hxEnums["checkstyle.checks.CheckType"] = { __ename__ : true, __constructs__ : ["AST","TOKEN","LINE"]
	,AST: {_hx_index:0,__enum__:"checkstyle.checks.CheckType",toString:$estr}
	,TOKEN: {_hx_index:1,__enum__:"checkstyle.checks.CheckType",toString:$estr}
	,LINE: {_hx_index:2,__enum__:"checkstyle.checks.CheckType",toString:$estr}
};
var checkstyle_checks_block_ConditionalCompilationCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.policy = "aligned";
	this.allowSingleline = true;
};
$hxClasses["checkstyle.checks.block.ConditionalCompilationCheck"] = checkstyle_checks_block_ConditionalCompilationCheck;
checkstyle_checks_block_ConditionalCompilationCheck.__name__ = "checkstyle.checks.block.ConditionalCompilationCheck";
checkstyle_checks_block_ConditionalCompilationCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_block_ConditionalCompilationCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	policy: null
	,allowSingleline: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		this.checkSharpIf(root.filter([haxeparser_TokenDef.Sharp("if")],tokentree_TokenFilterMode.ALL));
	}
	,checkSharpIf: function(tokens) {
		var _g = 0;
		while(_g < tokens.length) {
			var tok = tokens[_g];
			++_g;
			if(this.isPosSuppressed(tok.pos)) {
				continue;
			}
			var linePos = this.checker.getLinePos(tok.pos.min);
			if(this.checkSingleLine(tok,linePos.line)) {
				continue;
			}
			this.checkMultiLine(tok,linePos);
		}
	}
	,checkSingleLine: function(tok,line) {
		var endTok = null;
		var _g = 0;
		var _g1 = tok.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			if(_g2._hx_index == 2) {
				if(_g2.s == "end") {
					endTok = child;
					break;
				}
			}
		}
		if(endTok == null) {
			return true;
		}
		var endPos = this.checker.getLinePos(endTok.pos.min);
		var singleLine = endPos.line == line;
		if(!singleLine) {
			return false;
		}
		if(singleLine && this.allowSingleline) {
			return true;
		}
		this.logPos("Single line #if…(#else/#elseif)…#end not allowed",tok.pos);
		return true;
	}
	,checkMultiLine: function(tok,linePos) {
		var line = haxe_io_Bytes.ofString(this.checker.lines[linePos.line]);
		var prefix = line.sub(0,linePos.ofs).toString();
		if(this.checkLine(tok,linePos,line)) {
			return;
		}
		var _g = this.policy;
		switch(_g) {
		case "aligned":
			if(this.checkIndentation(tok,linePos)) {
				return;
			}
			break;
		case "startOfLine":
			if(linePos.ofs != 0) {
				this.logPos("#if should start at beginning of line",tok.pos);
				return;
			}
			break;
		}
		var _g1 = 0;
		var _g2 = tok.children;
		while(_g1 < _g2.length) {
			var childTok = _g2[_g1];
			++_g1;
			var _g3 = childTok.tok;
			if(_g3._hx_index == 2) {
				switch(_g3.s) {
				case "else":case "elseif":case "end":
					var childLinePos = this.checker.getLinePos(childTok.pos.min);
					var childLine = haxe_io_Bytes.ofString(this.checker.lines[childLinePos.line]);
					var childPrefix = childLine.sub(0,childLinePos.ofs).toString();
					if(this.checkLine(childTok,childLinePos,childLine)) {
						continue;
					}
					if(childPrefix == prefix) {
						continue;
					}
					this.logPos("Indentation of " + Std.string(childTok) + " must match corresponding #if",childTok.pos);
					break;
				default:
				}
			}
		}
	}
	,checkLine: function(tok,linePos,line) {
		var r = new EReg("^[ \t]*$","");
		var prefix = line.sub(0,linePos.ofs).toString();
		if(!r.match(prefix)) {
			this.logPos("only whitespace allowed before " + Std.string(tok),tok.pos);
			return true;
		}
		var expr = tok.getFirstChild();
		if(expr == null) {
			return false;
		}
		var linePosAfter = this.checker.getLinePos(expr.getPos().max);
		if(linePosAfter.line == linePos.line) {
			var postfix = line.sub(linePosAfter.ofs,line.length - linePosAfter.ofs).toString();
			if(!r.match(postfix)) {
				this.logPos("only whitespace allowed after " + Std.string(tok),tok.pos);
				return true;
			}
		}
		return false;
	}
	,checkIndentation: function(tok,linePos) {
		var prevLen = -1;
		var nextLen = -1;
		var lineIndex = linePos.line - 1;
		while(lineIndex >= 0) {
			var line = this.checker.lines[lineIndex];
			prevLen = this.getIndentLength(line);
			if(prevLen >= 0) {
				break;
			}
			--lineIndex;
		}
		var lineIndex1 = linePos.line + 1;
		while(lineIndex1 < this.checker.lines.length - 1) {
			var line1 = this.checker.lines[lineIndex1];
			nextLen = this.getIndentLength(line1);
			if(nextLen >= 0) {
				break;
			}
			++lineIndex1;
		}
		if(prevLen < 0) {
			prevLen = linePos.ofs;
		}
		if(nextLen < 0) {
			nextLen = linePos.ofs;
		}
		if(linePos.ofs >= prevLen && linePos.ofs <= nextLen) {
			return false;
		}
		this.logPos("Indentation of " + Std.string(tok) + " should match surrounding lines",tok.pos);
		return true;
	}
	,getIndentLength: function(line) {
		if(new EReg("^[ \t]*$","").match(line)) {
			return -1;
		}
		var r = new EReg("^([ \t]*)","");
		if(r.match(line)) {
			var prefix = r.matched(1);
			return prefix.length;
		}
		return -1;
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "policy", values : ["startOfLine","aligned"]},{ propertyName : "allowSingleline", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_block_ConditionalCompilationCheck
});
var checkstyle_checks_block_EmptyBlockCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.tokens = ["CLASS_DEF","ENUM_DEF","ABSTRACT_DEF","TYPEDEF_DEF","INTERFACE_DEF","OBJECT_DECL","FUNCTION","FOR","IF","WHILE","SWITCH","TRY","CATCH"];
	this.option = "empty";
};
$hxClasses["checkstyle.checks.block.EmptyBlockCheck"] = checkstyle_checks_block_EmptyBlockCheck;
checkstyle_checks_block_EmptyBlockCheck.__name__ = "checkstyle.checks.block.EmptyBlockCheck";
checkstyle_checks_block_EmptyBlockCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_block_EmptyBlockCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	tokens: null
	,option: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var allBrOpen = root.filter([haxeparser_TokenDef.BrOpen],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allBrOpen.length) {
			var brOpen = allBrOpen[_g];
			++_g;
			if(this.isPosSuppressed(brOpen.pos)) {
				continue;
			}
			if(this.filterParentToken(brOpen.parent)) {
				continue;
			}
			var _g1 = this.option;
			switch(_g1) {
			case "empty":
				this.checkForEmpty(brOpen);
				break;
			case "stmt":
				this.checkForStatement(brOpen);
				break;
			case "text":
				this.checkForText(brOpen);
				break;
			default:
				this.checkForText(brOpen);
			}
		}
	}
	,filterParentToken: function(token) {
		if(token == null || token.tok == null) {
			return false;
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return !this.hasToken("FUNCTION");
			case 1:
				return !this.hasToken("CLASS_DEF");
			case 3:case 4:
				return !this.hasToken("IF");
			case 5:
				return !this.hasToken("WHILE");
			case 7:
				return !this.hasToken("FOR");
			case 10:
				return !this.hasToken("OBJECT_DECL");
			case 14:case 15:case 16:
				return !this.hasToken("SWITCH");
			case 20:
				return !this.hasToken("TRY");
			case 21:
				return !this.hasToken("CATCH");
			case 26:
				return !this.hasToken("ENUM_DEF");
			case 27:
				return !this.hasToken("INTERFACE_DEF");
			case 31:
				return !this.hasToken("TYPEDEF_DEF");
			case 39:
				return !this.hasToken("ABSTRACT_DEF");
			default:
				return this.filterParentToken(token.parent);
			}
			break;
		case 3:
			return !this.hasToken("REIFICATION");
		case 5:
			if(_g.op._hx_index == 4) {
				if(token.parent != null && token.parent.parent != null) {
					var _g1 = token.parent.parent.tok;
					if(_g1._hx_index == 0) {
						if(_g1.k._hx_index == 31) {
							return !this.hasToken("TYPEDEF_DEF");
						}
					}
				}
				return !this.hasToken("OBJECT_DECL");
			} else {
				return this.filterParentToken(token.parent);
			}
			break;
		case 14:case 16:case 18:
			return !this.hasToken("OBJECT_DECL");
		default:
			return this.filterParentToken(token.parent);
		}
	}
	,checkForText: function(brOpen) {
		if(brOpen.children.length == 1) {
			this.logPos("Empty block should contain a comment or a statement",brOpen.getPos());
			return;
		}
	}
	,checkForStatement: function(brOpen) {
		if(brOpen.children.length == 1) {
			this.logPos("Empty block should contain a statement",brOpen.getPos());
			return;
		}
		var onlyComments = true;
		var _g = 0;
		var _g1 = brOpen.children;
		_hx_loop1: while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 6:case 7:
				break;
			case 17:
				break;
			default:
				onlyComments = false;
				break _hx_loop1;
			}
		}
		if(onlyComments) {
			this.logPos("Block should contain a statement",brOpen.getPos());
		}
	}
	,checkForEmpty: function(brOpen) {
		if(brOpen.children == null || brOpen.children.length > 1) {
			return;
		}
		var brClose = tokentree_TokenTreeAccessHelper.access(brOpen).firstChild().is(haxeparser_TokenDef.BrClose).token;
		if(brClose == null) {
			return;
		}
		if(brOpen.pos.max != brClose.pos.min) {
			this.logPos("Empty block should be written as \"{}\"",brOpen.getPos());
		}
	}
	,__class__: checkstyle_checks_block_EmptyBlockCheck
});
var checkstyle_checks_block_LeftCurlyCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.tokens = ["CLASS_DEF","ENUM_DEF","ABSTRACT_DEF","TYPEDEF_DEF","INTERFACE_DEF","FUNCTION","FOR","IF","WHILE","SWITCH","TRY","CATCH"];
	this.option = "eol";
	this.ignoreEmptySingleline = true;
};
$hxClasses["checkstyle.checks.block.LeftCurlyCheck"] = checkstyle_checks_block_LeftCurlyCheck;
checkstyle_checks_block_LeftCurlyCheck.__name__ = "checkstyle.checks.block.LeftCurlyCheck";
checkstyle_checks_block_LeftCurlyCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_block_LeftCurlyCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	tokens: null
	,option: null
	,ignoreEmptySingleline: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var allBrOpen = root.filter([haxeparser_TokenDef.BrOpen],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allBrOpen.length) {
			var brOpen = allBrOpen[_g];
			++_g;
			if(this.isPosSuppressed(brOpen.pos)) {
				continue;
			}
			if(this.ignoreEmptySingleline && this.isSingleLine(brOpen)) {
				continue;
			}
			var parent = this.findParentToken(brOpen.parent);
			if(!parent.hasToken) {
				continue;
			}
			this.check(brOpen,this.isParentWrapped(parent.token,brOpen));
		}
	}
	,isSingleLine: function(brOpen) {
		var brClose = brOpen.getLastChild();
		if(brClose != null) {
			return brOpen.pos.max == brClose.pos.min;
		} else {
			return false;
		}
	}
	,findParentToken: function(token) {
		if(token == null || token.tok == null) {
			return { token : token, hasToken : false};
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return { token : token, hasToken : this.hasToken("FUNCTION")};
			case 1:
				return { token : token, hasToken : this.hasToken("CLASS_DEF")};
			case 3:case 4:
				return { token : token, hasToken : this.hasToken("IF")};
			case 5:
				return { token : token, hasToken : this.hasToken("WHILE")};
			case 7:
				if(this.isArrayComprehension(token.parent)) {
					return { token : token, hasToken : this.hasToken("ARRAY_COMPREHENSION")};
				}
				return { token : token, hasToken : this.hasToken("FOR")};
			case 10:
				return { token : token, hasToken : this.hasToken("OBJECT_DECL")};
			case 15:
				return { token : token, hasToken : this.hasToken("OBJECT_DECL")};
			case 14:case 16:
				return { token : token, hasToken : this.hasToken("SWITCH")};
			case 20:
				return { token : token, hasToken : this.hasToken("TRY")};
			case 21:
				return { token : token, hasToken : this.hasToken("CATCH")};
			case 26:
				return { token : token, hasToken : this.hasToken("ENUM_DEF")};
			case 27:
				return { token : token, hasToken : this.hasToken("INTERFACE_DEF")};
			case 31:
				return { token : token, hasToken : this.hasToken("TYPEDEF_DEF")};
			case 39:
				return { token : token, hasToken : this.hasToken("ABSTRACT_DEF")};
			default:
				return this.findParentToken(token.parent);
			}
			break;
		case 3:
			return { token : token, hasToken : this.hasToken("REIFICATION")};
		case 5:
			if(_g.op._hx_index == 4) {
				if(token.parent != null && token.parent.parent != null) {
					var _g1 = token.parent.parent.tok;
					if(_g1._hx_index == 0 && _g1.k._hx_index == 31) {
						return { token : token, hasToken : this.hasToken("TYPEDEF_DEF")};
					}
				}
				return { token : token, hasToken : this.hasToken("OBJECT_DECL")};
			} else {
				return this.findParentToken(token.parent);
			}
			break;
		case 11:
			return this.findParentTokenDblDot(token.parent);
		case 14:case 16:case 18:
			return { token : token, hasToken : this.hasToken("OBJECT_DECL")};
		default:
			return this.findParentToken(token.parent);
		}
	}
	,findParentTokenDblDot: function(token) {
		if(token == null || token.tok == null) {
			return { token : token, hasToken : false};
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 10:
				return { token : token, hasToken : this.hasToken("OBJECT_DECL")};
			case 15:case 16:
				return { token : token, hasToken : this.hasToken("SWITCH")};
			default:
				return this.findParentTokenDblDot(token.parent);
			}
			break;
		case 5:
			if(_g.op._hx_index == 4) {
				if(token.parent != null && token.parent.parent != null) {
					var _g1 = token.parent.parent.tok;
					if(_g1._hx_index == 0) {
						if(_g1.k._hx_index == 31) {
							return { token : token, hasToken : this.hasToken("TYPEDEF_DEF")};
						}
					}
				}
				return { token : token, hasToken : this.hasToken("OBJECT_DECL")};
			} else {
				return this.findParentTokenDblDot(token.parent);
			}
			break;
		case 14:case 16:case 18:
			return { token : token, hasToken : this.hasToken("OBJECT_DECL")};
		default:
			return this.findParentTokenDblDot(token.parent);
		}
	}
	,isParentWrapped: function(parent,brOpen) {
		var lineNumStart = this.checker.getLinePos(parent.pos.min).line;
		var previous = brOpen.previousSibling;
		_hx_loop1: while(previous != null) {
			var _g = previous.tok;
			switch(_g._hx_index) {
			case 6:case 7:case 21:
				previous = previous.previousSibling;
				break;
			default:
				break _hx_loop1;
			}
		}
		var lineNumEnd;
		if(previous == null) {
			lineNumEnd = this.checker.getLinePos(brOpen.parent.pos.max).line;
		} else {
			lineNumEnd = this.checker.getLinePos(previous.getPos().max).line;
		}
		return lineNumStart != lineNumEnd;
	}
	,isArrayComprehension: function(token) {
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return false;
			case 2:
				return false;
			default:
				return this.isArrayComprehension(token.parent);
			}
			break;
		case 14:
			return true;
		default:
			return this.isArrayComprehension(token.parent);
		}
	}
	,check: function(token,wrapped) {
		var lineNum = this.checker.getLinePos(token.pos.min).line;
		var line = this.checker.lines[lineNum];
		this.checkLeftCurly(line,wrapped,token.pos);
	}
	,checkLeftCurly: function(line,wrapped,pos) {
		if(wrapped == null) {
			wrapped = false;
		}
		var curlyAtEOL = new EReg("^\\s*\\S.*\\{\\s*(|/\\*.*|//.*)$","").match(line);
		var curlyOnNL = new EReg("^\\s*\\{","").match(line);
		try {
			if(curlyAtEOL) {
				this.logErrorIf(this.option == "nl","Left curly should be on new line (only whitespace before curly)",pos);
				this.logErrorIf(this.option == "nlow" && wrapped,"Left curly should be on new line (previous expression is split over multiple lines)",pos);
				this.logErrorIf(this.option != "eol" && this.option != "nlow","Left curly unknown option ${option}",pos);
				return;
			}
			this.logErrorIf(this.option == "eol","Left curly should be at EOL (only line break or comment after curly)",pos);
			this.logErrorIf(!curlyOnNL,"Left curly should be on new line (only whitespace before curly)",pos);
			this.logErrorIf(this.option == "nlow" && !wrapped,"Left curly should be at EOL (previous expression is not split over multiple lines)",pos);
			this.logErrorIf(this.option != "nl" && this.option != "nlow","Left curly unknown option ${option}",pos);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				var e2 = e1;
			} else {
				throw e;
			}
		}
	}
	,logErrorIf: function(condition,msg,pos) {
		if(condition) {
			this.logPos(msg,pos);
			throw new js__$Boot_HaxeError("exit");
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [{ propertyName : "tokens", value : ["CLASS_DEF","ENUM_DEF","ABSTRACT_DEF","INTERFACE_DEF","FUNCTION","FOR","IF","WHILE","SWITCH","TRY","CATCH"]}], properties : [{ propertyName : "option", values : ["eol","nlow","nl"]},{ propertyName : "ignoreEmptySingleline", values : [true,false]}]},{ fixed : [{ propertyName : "tokens", value : ["TYPEDEF_DEF"]}], properties : [{ propertyName : "option", values : ["eol","nlow","nl"]},{ propertyName : "ignoreEmptySingleline", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_block_LeftCurlyCheck
});
var checkstyle_checks_block_NeedBracesCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.tokens = ["FOR","IF","ELSE_IF","WHILE","DO_WHILE"];
	this.allowSingleLineStatement = true;
};
$hxClasses["checkstyle.checks.block.NeedBracesCheck"] = checkstyle_checks_block_NeedBracesCheck;
checkstyle_checks_block_NeedBracesCheck.__name__ = "checkstyle.checks.block.NeedBracesCheck";
checkstyle_checks_block_NeedBracesCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_block_NeedBracesCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	tokens: null
	,allowSingleLineStatement: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,actualRun: function() {
		var tokenList = [];
		if(this.hasToken("FUNCTION")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction));
		}
		if(this.hasToken("FOR")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFor));
		}
		if(this.hasToken("IF")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdIf));
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse));
		}
		if(this.hasToken("WHILE")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdWhile));
		}
		if(this.hasToken("DO_WHILE")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo));
		}
		if(this.hasToken("CATCH")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCatch));
		}
		if(tokenList.length <= 0) {
			return;
		}
		var root = this.checker.getTokenTree();
		var allTokens = root.filter(tokenList,tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allTokens.length) {
			var tok = allTokens[_g];
			++_g;
			if(this.isPosSuppressed(tok.pos)) {
				continue;
			}
			var _g1 = tok.tok;
			if(_g1._hx_index == 0) {
				switch(_g1.k._hx_index) {
				case 0:
					this.checkFunctionChild(tok);
					break;
				case 3:
					this.checkIfChild(tok);
					break;
				case 4:
					var firstChild = tok.getFirstChild();
					if(firstChild == null) {
						continue;
					}
					if(firstChild.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdIf))) {
						this.checkIfChild(firstChild);
					} else {
						this.checkLastChild(tok);
					}
					break;
				case 5:
					this.checkWhileChild(tok);
					break;
				case 6:
					this.checkLastChild(tok);
					break;
				default:
					this.checkLastChild(tok);
				}
			} else {
				this.checkLastChild(tok);
			}
		}
	}
	,checkIfChild: function(token) {
		if(token == null || !token.hasChildren()) {
			return;
		}
		var lastChild = token.getLastChild();
		if(Type.enumEq(lastChild.tok,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse))) {
			lastChild = lastChild.previousSibling;
		}
		var _g = lastChild.tok;
		switch(_g._hx_index) {
		case 16:case 18:
			return;
		default:
			this.checkNoBraces(token,lastChild);
		}
	}
	,checkFunctionChild: function(token) {
		if(token == null || !token.hasChildren()) {
			return;
		}
		var accessHelper;
		if(token.children.length == 1) {
			accessHelper = tokentree_TokenTreeAccessHelper.access(token).firstChild();
		} else {
			accessHelper = tokentree_TokenTreeAccessHelper.access(token);
		}
		var lastChild = accessHelper.firstOf(haxeparser_TokenDef.BrOpen).token;
		if(lastChild != null) {
			return;
		}
		lastChild = accessHelper.firstOf(haxeparser_TokenDef.Semicolon).token;
		if(lastChild != null) {
			return;
		}
		lastChild = accessHelper.lastChild().token;
		this.checkNoBraces(token,lastChild);
	}
	,checkWhileChild: function(token) {
		if(token == null || !token.hasChildren() || Type.enumEq(token.parent.tok,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo))) {
			return;
		}
		this.checkLastChild(token);
	}
	,checkLastChild: function(token) {
		if(token == null || !token.hasChildren()) {
			return;
		}
		var lastChild = tokentree_TokenTreeAccessHelper.access(token).firstOf(haxeparser_TokenDef.BrOpen).token;
		if(lastChild != null) {
			return;
		}
		lastChild = tokentree_TokenTreeAccessHelper.access(token).lastChild().token;
		this.checkNoBraces(token,lastChild);
	}
	,checkNoBraces: function(parent,child) {
		if(parent == null || child == null) {
			return;
		}
		var minLine = this.checker.getLinePos(parent.pos.min);
		var maxLine = this.checker.getLinePos(child.getPos().max);
		var singleLine = minLine.line == maxLine.line;
		if(this.allowSingleLineStatement) {
			if(singleLine) {
				return;
			}
			if(this.checkIfElseSingleline(parent,child)) {
				return;
			}
		} else if(singleLine) {
			this.logPos("Body of \"" + Std.string(parent) + "\" on same line",child.getPos());
			return;
		}
		this.logPos("No braces used for body of \"" + Std.string(parent) + "\"",child.getPos());
	}
	,checkIfElseSingleline: function(parent,child) {
		if(!this.hasToken("ELSE_IF")) {
			return false;
		}
		var _g = parent.tok;
		if(_g._hx_index == 0) {
			if(_g.k._hx_index != 4) {
				return false;
			}
		} else {
			return false;
		}
		var _g1 = child.tok;
		if(_g1._hx_index == 0) {
			if(_g1.k._hx_index != 3) {
				return false;
			}
		} else {
			return false;
		}
		var minLine = this.checker.getLinePos(parent.pos.min);
		var maxLine = this.checker.getLinePos(child.getFirstChild().getPos().max);
		return minLine.line == maxLine.line;
	}
	,__class__: checkstyle_checks_block_NeedBracesCheck
});
var checkstyle_checks_block_RightCurlyCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.tokens = ["CLASS_DEF","ENUM_DEF","ABSTRACT_DEF","TYPEDEF_DEF","INTERFACE_DEF","OBJECT_DECL","FUNCTION","FOR","IF","WHILE","SWITCH","TRY","CATCH"];
	this.option = "aloneorsingle";
};
$hxClasses["checkstyle.checks.block.RightCurlyCheck"] = checkstyle_checks_block_RightCurlyCheck;
checkstyle_checks_block_RightCurlyCheck.__name__ = "checkstyle.checks.block.RightCurlyCheck";
checkstyle_checks_block_RightCurlyCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_block_RightCurlyCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	tokens: null
	,option: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var allBrClose = root.filter([haxeparser_TokenDef.BrClose],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allBrClose.length) {
			var brClose = allBrClose[_g];
			++_g;
			if(this.isPosSuppressed(brClose.pos)) {
				continue;
			}
			var brOpen = brClose.parent;
			if(brOpen == null || brOpen.pos == null) {
				continue;
			}
			if(this.filterParentToken(brOpen.parent)) {
				continue;
			}
			this.check(brClose,this.isSingleLine(brOpen.pos.min,brClose.pos.max));
		}
	}
	,filterParentToken: function(token) {
		if(token == null || token.tok == null) {
			return false;
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return !this.hasToken("FUNCTION");
			case 1:
				return !this.hasToken("CLASS_DEF");
			case 3:case 4:
				return !this.hasToken("IF");
			case 5:
				return !this.hasToken("WHILE");
			case 7:
				if(this.isArrayComprehension(token.parent)) {
					return !this.hasToken("ARRAY_COMPREHENSION");
				}
				return !this.hasToken("FOR");
			case 10:
				return !this.hasToken("OBJECT_DECL");
			case 14:case 15:case 16:
				return !this.hasToken("SWITCH");
			case 20:
				return !this.hasToken("TRY");
			case 21:
				return !this.hasToken("CATCH");
			case 26:
				return !this.hasToken("ENUM_DEF");
			case 27:
				return !this.hasToken("INTERFACE_DEF");
			case 31:
				return !this.hasToken("TYPEDEF_DEF");
			case 39:
				return !this.hasToken("ABSTRACT_DEF");
			default:
				return this.filterParentToken(token.parent);
			}
			break;
		case 3:
			return !this.hasToken("REIFICATION");
		case 5:
			if(_g.op._hx_index == 4) {
				if(token.parent != null && token.parent.parent != null) {
					var _g1 = token.parent.parent.tok;
					if(_g1._hx_index == 0) {
						if(_g1.k._hx_index == 31) {
							return !this.hasToken("TYPEDEF_DEF");
						}
					}
				}
				return !this.hasToken("OBJECT_DECL");
			} else {
				return this.filterParentToken(token.parent);
			}
			break;
		case 14:case 16:case 18:
			return !this.hasToken("OBJECT_DECL");
		default:
			return this.filterParentToken(token.parent);
		}
	}
	,isArrayComprehension: function(token) {
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return false;
			case 2:
				return false;
			default:
				return this.isArrayComprehension(token.parent);
			}
			break;
		case 14:
			return true;
		default:
			return this.isArrayComprehension(token.parent);
		}
	}
	,check: function(token,singleLine) {
		var lineNum = this.checker.getLinePos(token.pos.min).line;
		var line = this.checker.lines[lineNum];
		this.checkRightCurly(line,singleLine,token.pos);
	}
	,isSingleLine: function(start,end) {
		var startLine = this.checker.getLinePos(start).line;
		if(end >= this.checker.file.content.length) {
			end = this.checker.file.content.length - 1;
		}
		var endLine = this.checker.getLinePos(end).line;
		return startLine == endLine;
	}
	,checkRightCurly: function(line,singleLine,pos) {
		try {
			var curlyPos = { file : pos.file, min : pos.min, max : pos.max};
			var eof = false;
			if(curlyPos.max >= this.checker.file.content.length) {
				curlyPos.max = this.checker.file.content.length - 1;
				eof = true;
			}
			var linePos = this.checker.getLinePos(curlyPos.max);
			var afterCurly = "";
			if(!eof) {
				var afterLine = haxe_io_Bytes.ofString(this.checker.lines[linePos.line]);
				if(linePos.ofs < afterLine.length) {
					afterCurly = afterLine.sub(linePos.ofs,afterLine.length - linePos.ofs).toString();
				}
			}
			var sameRegex = new EReg("^\\s*(else|catch)","");
			var needsSameOption = sameRegex.match(afterCurly);
			var shouldHaveSameOption = false;
			if(this.checker.lines.length > linePos.line + 1) {
				var nextLine = this.checker.lines[linePos.line + 1];
				shouldHaveSameOption = sameRegex.match(nextLine);
			}
			curlyPos.min = curlyPos.max;
			this.logErrorIf(singleLine && this.option != "aloneorsingle","Right curly should not be on same line as left curly",curlyPos);
			if(singleLine) {
				return;
			}
			var curlyAlone = new EReg("^\\s*\\}[\\)\\],;\\s]*(|//.*)$","").match(line);
			this.logErrorIf(!curlyAlone && (this.option == "aloneorsingle" || this.option == "alone"),"Right curly should be alone on a new line",curlyPos);
			this.logErrorIf(curlyAlone && needsSameOption,"Right curly should be alone on a new line",curlyPos);
			this.logErrorIf(needsSameOption && this.option != "same","Right curly must not be on same line as following block",curlyPos);
			this.logErrorIf(shouldHaveSameOption && this.option == "same","Right curly should be on same line as following block (e.g. \"} else\" or \"} catch\")",curlyPos);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				var e2 = e1;
			} else {
				throw e;
			}
		}
	}
	,logErrorIf: function(condition,msg,pos) {
		if(condition) {
			this.logPos(msg,pos);
			throw new js__$Boot_HaxeError("exit");
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [{ propertyName : "tokens", value : ["CLASS_DEF","ENUM_DEF","ABSTRACT_DEF","TYPEDEF_DEF","INTERFACE_DEF","OBJECT_DECL","FUNCTION","FOR","WHILE","SWITCH","TRY","CATCH"]}], properties : [{ propertyName : "option", values : ["aloneorsingle","alone","same"]}]},{ fixed : [{ propertyName : "tokens", value : ["IF"]}], properties : [{ propertyName : "option", values : ["aloneorsingle","alone","same"]}]},{ fixed : [{ propertyName : "tokens", value : ["OBJECT_DECL"]}], properties : [{ propertyName : "option", values : ["aloneorsingle","alone","same"]}]}];
	}
	,__class__: checkstyle_checks_block_RightCurlyCheck
});
var checkstyle_checks_coding_AvoidInlineConditionalsCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.severity = "IGNORE";
	this.categories = ["Complexity"];
	this.points = 3;
};
$hxClasses["checkstyle.checks.coding.AvoidInlineConditionalsCheck"] = checkstyle_checks_coding_AvoidInlineConditionalsCheck;
checkstyle_checks_coding_AvoidInlineConditionalsCheck.__name__ = "checkstyle.checks.coding.AvoidInlineConditionalsCheck";
checkstyle_checks_coding_AvoidInlineConditionalsCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_AvoidInlineConditionalsCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var _gthis = this;
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			if(_gthis.isPosSuppressed(e.pos)) {
				return;
			}
			var _g = e.expr;
			if(_g._hx_index == 26) {
				var eelse = _g.eelse;
				var eif = _g.eif;
				var econd = _g.econd;
				_gthis.logPos("Avoid inline conditionals",e.pos);
			}
		});
	}
	,__class__: checkstyle_checks_coding_AvoidInlineConditionalsCheck
});
var checkstyle_checks_coding_DefaultComesLastCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.categories = ["Style","Clarity"];
	this.points = 2;
};
$hxClasses["checkstyle.checks.coding.DefaultComesLastCheck"] = checkstyle_checks_coding_DefaultComesLastCheck;
checkstyle_checks_coding_DefaultComesLastCheck.__name__ = "checkstyle.checks.coding.DefaultComesLastCheck";
checkstyle_checks_coding_DefaultComesLastCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_DefaultComesLastCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var root = this.checker.getTokenTree();
		var acceptableTokens = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdSwitch)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < acceptableTokens.length) {
			var token = acceptableTokens[_g];
			++_g;
			var tokens = token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCase),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDefault)],tokentree_TokenFilterMode.FIRST);
			if(tokens[tokens.length - 1].is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDefault))) {
				continue;
			}
			var _g2 = 0;
			var _g1 = tokens.length;
			while(_g2 < _g1) {
				var i = _g2++;
				if(tokens[i].is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDefault)) && i < tokens.length - 1) {
					this.logPos("Default should be last label in the \"switch\"",token.pos);
					continue;
				}
			}
		}
	}
	,__class__: checkstyle_checks_coding_DefaultComesLastCheck
});
var checkstyle_checks_coding_HiddenFieldCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.ignoreConstructorParameter = true;
	this.ignoreSetter = true;
	this.ignoreFormat = "^(main|run)$";
	this.categories = ["Complexity","Clarity","Bug Risk"];
	this.points = 5;
};
$hxClasses["checkstyle.checks.coding.HiddenFieldCheck"] = checkstyle_checks_coding_HiddenFieldCheck;
checkstyle_checks_coding_HiddenFieldCheck.__name__ = "checkstyle.checks.coding.HiddenFieldCheck";
checkstyle_checks_coding_HiddenFieldCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_HiddenFieldCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	ignoreConstructorParameter: null
	,ignoreSetter: null
	,ignoreFormat: null
	,actualRun: function() {
		var ignoreFormatRE = new EReg(this.ignoreFormat,"");
		var root = this.checker.getTokenTree();
		this.checkClasses(root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdClass)],tokentree_TokenFilterMode.ALL),ignoreFormatRE);
	}
	,checkClasses: function(classes,ignoreFormatRE) {
		var _g = 0;
		while(_g < classes.length) {
			var clazz = classes[_g];
			++_g;
			if(this.isPosSuppressed(clazz.pos)) {
				continue;
			}
			var memberNames = this.collectMemberNames(clazz);
			var methods = clazz.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)],tokentree_TokenFilterMode.FIRST);
			var _g1 = 0;
			while(_g1 < methods.length) {
				var method = methods[_g1];
				++_g1;
				if(this.isPosSuppressed(method.pos)) {
					continue;
				}
				this.checkMethod(method,memberNames,ignoreFormatRE);
			}
		}
	}
	,checkMethod: function(method,memberNames,ignoreFormatRE) {
		if(!method.hasChildren()) {
			throw new js__$Boot_HaxeError("function has invalid structure!");
		}
		var methodName = method.children[0];
		if(methodName.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdNew)) && this.ignoreConstructorParameter) {
			return;
		}
		if(this.ignoreSetter && this.isSetterFunction(methodName,memberNames)) {
			return;
		}
		var _g = methodName.tok;
		switch(_g._hx_index) {
		case 0:
			if(_g.k._hx_index == 22) {
				if(ignoreFormatRE.match("new")) {
					return;
				}
			}
			break;
		case 1:
			if(_g.c._hx_index == 3) {
				var name = _g.c.s;
				if(ignoreFormatRE.match(name)) {
					return;
				}
			}
			break;
		default:
		}
		this.checkParams(method,memberNames);
		this.checkVars(method,memberNames);
		this.checkForLoops(method,memberNames);
	}
	,isSetterFunction: function(methodName,memberNames) {
		var _g = methodName.tok;
		if(_g._hx_index == 1) {
			if(_g.c._hx_index == 3) {
				var name = _g.c.s;
				var _g1 = 0;
				while(_g1 < memberNames.length) {
					var member = memberNames[_g1];
					++_g1;
					if("set_" + member.toLowerCase() == name.toLowerCase() || "set" + member.toLowerCase() == name.toLowerCase()) {
						return true;
					}
				}
			}
		}
		return false;
	}
	,checkParams: function(method,memberNames) {
		var paramDef = method.filter([haxeparser_TokenDef.POpen],tokentree_TokenFilterMode.FIRST,2);
		if(paramDef == null || paramDef.length != 1) {
			throw new js__$Boot_HaxeError("function parameters have invalid structure!");
		}
		var paramList = paramDef[0].children;
		var _g = 0;
		while(_g < paramList.length) {
			var param = paramList[_g];
			++_g;
			this.checkName(param,memberNames,"Parameter definition");
		}
	}
	,checkVars: function(method,memberNames) {
		var vars = method.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			if(!v.hasChildren()) {
				throw new js__$Boot_HaxeError("var has invalid structure!");
			}
			this.checkName(v.children[0],memberNames,"Variable definition");
		}
	}
	,checkForLoops: function(method,memberNames) {
		var fors = method.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFor)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < fors.length) {
			var f = fors[_g];
			++_g;
			var popens = f.filter([haxeparser_TokenDef.POpen],tokentree_TokenFilterMode.FIRST,2);
			if(popens.length <= 0) {
				continue;
			}
			var pOpen = popens[0];
			if(!pOpen.hasChildren()) {
				continue;
			}
			this.checkName(pOpen.children[0],memberNames,"For loop definition");
		}
	}
	,checkName: function(token,memberNames,logText) {
		var _g = token.tok;
		if(_g._hx_index == 1) {
			if(_g.c._hx_index == 3) {
				var name = _g.c.s;
				if(memberNames.indexOf(name) != -1) {
					this.logPos("" + logText + " of \"" + name + "\" masks member of same name",token.pos);
				}
			}
		}
	}
	,collectMemberNames: function(clazz) {
		var memberNames = [];
		var varFields = clazz.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar)],tokentree_TokenFilterMode.FIRST,3);
		var _g = 0;
		while(_g < varFields.length) {
			var member = varFields[_g];
			++_g;
			if(!member.hasChildren()) {
				continue;
			}
			var _g1 = member.children[0].tok;
			if(_g1._hx_index == 1) {
				if(_g1.c._hx_index == 3) {
					var name = _g1.c.s;
					memberNames.push(name);
				}
			}
		}
		return memberNames;
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "ignoreConstructorParameter", values : [true,false]},{ propertyName : "ignoreSetter", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_coding_HiddenFieldCheck
});
var checkstyle_checks_coding_InnerAssignmentCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.ignoreReturnAssignments = false;
	this.categories = ["Complexity","Clarity","Bug Risk"];
	this.points = 5;
};
$hxClasses["checkstyle.checks.coding.InnerAssignmentCheck"] = checkstyle_checks_coding_InnerAssignmentCheck;
checkstyle_checks_coding_InnerAssignmentCheck.__name__ = "checkstyle.checks.coding.InnerAssignmentCheck";
checkstyle_checks_coding_InnerAssignmentCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_InnerAssignmentCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	ignoreReturnAssignments: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var allAssignments = root.filter([haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAdd)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpSub)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpDiv)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMult)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShl)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpUShr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAnd)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpOr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpXor))],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allAssignments.length) {
			var assignToken = allAssignments[_g];
			++_g;
			if(this.isPosSuppressed(assignToken.pos) || !this.filterAssignment(assignToken)) {
				continue;
			}
			this.logPos("Inner assignment detected",assignToken.pos);
		}
	}
	,filterAssignment: function(token) {
		if(token == null || token.tok == null) {
			return false;
		}
		if(token.previousSibling != null) {
			if(token.previousSibling.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt))) {
				return false;
			}
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return false;
			case 2:
				return false;
			case 10:
				return this.filterReturn(token);
			case 14:
				return true;
			default:
				return this.filterAssignment(token.parent);
			}
			break;
		case 11:case 16:
			return false;
		case 18:
			return this.filterPOpen(token.parent);
		default:
			return this.filterAssignment(token.parent);
		}
	}
	,filterPOpen: function(token) {
		if(token == null || token.tok == null) {
			return false;
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				return false;
			case 2:
				return false;
			case 5:
				return false;
			case 10:
				return true;
			case 22:
				return !Type.enumEq(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction),token.parent.tok);
			default:
				return true;
			}
			break;
		case 1:case 18:
			return this.filterPOpen(token.parent);
		default:
			return true;
		}
	}
	,filterReturn: function(token) {
		if(!this.ignoreReturnAssignments) {
			return true;
		}
		var allBinops = token.filterCallback(function(token1,depth) {
			if(token1.tok == null) {
				return tokentree_FilterResult.GO_DEEPER;
			}
			var _g = token1.tok;
			switch(_g._hx_index) {
			case 4:
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			case 5:
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			case 14:case 16:case 18:
				return tokentree_FilterResult.FOUND_GO_DEEPER;
			default:
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		if(allBinops.length != 1) {
			return true;
		}
		var parent;
		if(Type.enumEq(token.parent.tok,haxeparser_TokenDef.BrOpen)) {
			var brOpen = token.parent;
			if(brOpen.children.length > 2) {
				return true;
			}
			parent = brOpen.parent;
		} else {
			parent = token.parent;
			if(parent.getLastChild() != token) {
				return true;
			}
		}
		if(!Type.enumEq(parent.parent.tok,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction))) {
			return true;
		}
		var _g1 = parent.tok;
		if(_g1._hx_index == 1) {
			if(_g1.c._hx_index == 3) {
				var name = _g1.c.s;
				if(!StringTools.startsWith(name,"set_")) {
					return true;
				}
			} else {
				return true;
			}
		} else {
			return true;
		}
		return false;
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "ignoreReturnAssignments", values : [false,true]}]}];
	}
	,__class__: checkstyle_checks_coding_InnerAssignmentCheck
});
var checkstyle_checks_coding_MagicNumberCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.ignoreNumbers = [-1,0,1,2];
	this.categories = ["Clarity","Complexity"];
	this.points = 3;
};
$hxClasses["checkstyle.checks.coding.MagicNumberCheck"] = checkstyle_checks_coding_MagicNumberCheck;
checkstyle_checks_coding_MagicNumberCheck.__name__ = "checkstyle.checks.coding.MagicNumberCheck";
checkstyle_checks_coding_MagicNumberCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_MagicNumberCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	ignoreNumbers: null
	,actualRun: function() {
		var ignore = false;
		this.forEachField(function(field,parent) {
			ignore = parent.kind == checkstyle_utils_FieldParentKind.ENUM_ABSTRACT;
			return;
		});
		if(ignore) {
			return;
		}
		var root = this.checker.getTokenTree();
		var allNumbers = root.filterCallback(function(token,depth) {
			if(token.tok == null) {
				return tokentree_FilterResult.GO_DEEPER;
			}
			var _g = token.tok;
			if(_g._hx_index == 1) {
				switch(_g.c._hx_index) {
				case 0:
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				case 1:
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				default:
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < allNumbers.length) {
			var numberToken = allNumbers[_g1];
			++_g1;
			if(this.isPosSuppressed(numberToken.pos)) {
				continue;
			}
			if(!this.filterNumber(numberToken)) {
				continue;
			}
			var _g11 = numberToken.tok;
			if(_g11._hx_index == 1) {
				switch(_g11.c._hx_index) {
				case 0:
					var n = _g11.c.v;
					var number = Std.parseInt(n);
					if(this.ignoreNumbers.indexOf(number) != -1) {
						continue;
					}
					this.logPos("\"" + n + "\" is a magic number",numberToken.pos);
					break;
				case 1:
					var n1 = _g11.c.f;
					var number1 = parseFloat(n1);
					if(this.ignoreNumbers.indexOf(number1) != -1) {
						continue;
					}
					this.logPos("\"" + n1 + "\" is a magic number",numberToken.pos);
					break;
				default:
				}
			}
		}
	}
	,filterNumber: function(token) {
		if(token == null || token.tok == null) {
			return true;
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			if(_g.k._hx_index == 2) {
				if(token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdStatic)],tokentree_TokenFilterMode.FIRST).length > 0) {
					return false;
				} else {
					return true;
				}
			} else {
				return this.filterNumber(token.parent);
			}
			break;
		case 21:
			return false;
		default:
			return this.filterNumber(token.parent);
		}
	}
	,__class__: checkstyle_checks_coding_MagicNumberCheck
});
var checkstyle_checks_coding_MultipleVariableDeclarationsCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.categories = ["Style","Clarity","Complexity"];
	this.points = 2;
};
$hxClasses["checkstyle.checks.coding.MultipleVariableDeclarationsCheck"] = checkstyle_checks_coding_MultipleVariableDeclarationsCheck;
checkstyle_checks_coding_MultipleVariableDeclarationsCheck.__name__ = "checkstyle.checks.coding.MultipleVariableDeclarationsCheck";
checkstyle_checks_coding_MultipleVariableDeclarationsCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_MultipleVariableDeclarationsCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var root = this.checker.getTokenTree();
		var acceptableTokens = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar)],tokentree_TokenFilterMode.ALL);
		var lastVarLineNo = -1;
		var _g = 0;
		while(_g < acceptableTokens.length) {
			var v = acceptableTokens[_g];
			++_g;
			var curVarLineNo = this.checker.getLinePos(v.pos.min).line;
			if(lastVarLineNo > 0 && lastVarLineNo == curVarLineNo) {
				this.logPos("Only one variable definition per line allowed",v.pos);
			}
			lastVarLineNo = curVarLineNo;
			var count = 0;
			var _g1 = 0;
			var _g2 = v.children;
			while(_g1 < _g2.length) {
				var c = _g2[_g1];
				++_g1;
				var _g3 = c.tok;
				if(_g3._hx_index == 1) {
					if(_g3.c._hx_index == 3) {
						var name = _g3.c.s;
						++count;
					}
				}
			}
			if(count > 1) {
				this.logPos("Each variable declaration must be in its own statement",v.pos);
			}
		}
	}
	,__class__: checkstyle_checks_coding_MultipleVariableDeclarationsCheck
});
var checkstyle_checks_coding_NestedForDepthCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.max = 1;
	this.categories = ["Complexity"];
	this.points = 8;
};
$hxClasses["checkstyle.checks.coding.NestedForDepthCheck"] = checkstyle_checks_coding_NestedForDepthCheck;
checkstyle_checks_coding_NestedForDepthCheck.__name__ = "checkstyle.checks.coding.NestedForDepthCheck";
checkstyle_checks_coding_NestedForDepthCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_NestedForDepthCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	max: null
	,actualRun: function() {
		var _gthis = this;
		this.forEachField(function(f,_) {
			var _g = f.kind;
			if(_g._hx_index == 1) {
				var fun = _g.f;
				_gthis.scanBlock(fun.expr,-1);
			}
		});
	}
	,scanBlock: function(e,depth) {
		if(e == null) {
			return;
		}
		if(depth > this.max) {
			this.warnNestedForDepth(depth,e.pos);
			return;
		}
		var _g = e.expr;
		if(_g._hx_index == 12) {
			var exprs = _g.exprs;
			this.scanExprs(exprs,depth);
		}
	}
	,scanExprs: function(exprs,depth) {
		var _g = 0;
		while(_g < exprs.length) {
			var e = exprs[_g];
			++_g;
			var _g1 = e.expr;
			switch(_g1._hx_index) {
			case 13:
				var expr = _g1.expr;
				this.scanBlock(expr,depth + 1);
				break;
			case 15:
				var expr1 = _g1.e;
				this.scanBlock(expr1,depth + 1);
				break;
			default:
			}
		}
	}
	,warnNestedForDepth: function(depth,pos) {
		this.logPos("Nested loop depth is " + depth + " (max allowed is " + this.max + ")",pos);
	}
	,detectableInstances: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 5) {
			var i = _g1++;
			_g.push(i);
		}
		return [{ fixed : [], properties : [{ propertyName : "max", values : _g}]}];
	}
	,__class__: checkstyle_checks_coding_NestedForDepthCheck
});
var checkstyle_checks_coding_NestedIfDepthCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.max = 1;
	this.categories = ["Complexity"];
	this.points = 8;
};
$hxClasses["checkstyle.checks.coding.NestedIfDepthCheck"] = checkstyle_checks_coding_NestedIfDepthCheck;
checkstyle_checks_coding_NestedIfDepthCheck.__name__ = "checkstyle.checks.coding.NestedIfDepthCheck";
checkstyle_checks_coding_NestedIfDepthCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_NestedIfDepthCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	max: null
	,actualRun: function() {
		var _gthis = this;
		this.forEachField(function(f,_) {
			var _g = f.kind;
			if(_g._hx_index == 1) {
				var fun = _g.f;
				_gthis.scanBlock(fun.expr,-1);
			}
		});
	}
	,scanBlock: function(e,depth) {
		if(e == null) {
			return;
		}
		if(depth > this.max) {
			this.warnNestedIfDepth(depth,e.pos);
			return;
		}
		var _g = e.expr;
		if(_g._hx_index == 12) {
			var exprs = _g.exprs;
			this.scanExprs(exprs,depth);
		}
	}
	,scanExprs: function(exprs,depth) {
		var _g = 0;
		while(_g < exprs.length) {
			var e = exprs[_g];
			++_g;
			var _g1 = e.expr;
			if(_g1._hx_index == 14) {
				var elsePart = _g1.eelse;
				var ifPart = _g1.eif;
				this.scanBlock(ifPart,depth + 1);
				this.scanBlock(elsePart,depth + 1);
			}
		}
	}
	,warnNestedIfDepth: function(depth,pos) {
		this.logPos("Nested if-else depth is " + depth + " (max allowed is " + this.max + ")",pos);
	}
	,detectableInstances: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 10) {
			var i = _g1++;
			_g.push(i);
		}
		return [{ fixed : [], properties : [{ propertyName : "max", values : _g}]}];
	}
	,__class__: checkstyle_checks_coding_NestedIfDepthCheck
});
var checkstyle_checks_coding_NestedTryDepthCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.max = 1;
	this.categories = ["Complexity"];
	this.points = 5;
};
$hxClasses["checkstyle.checks.coding.NestedTryDepthCheck"] = checkstyle_checks_coding_NestedTryDepthCheck;
checkstyle_checks_coding_NestedTryDepthCheck.__name__ = "checkstyle.checks.coding.NestedTryDepthCheck";
checkstyle_checks_coding_NestedTryDepthCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_NestedTryDepthCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	max: null
	,actualRun: function() {
		var _gthis = this;
		this.forEachField(function(f,_) {
			var _g = f.kind;
			if(_g._hx_index == 1) {
				var fun = _g.f;
				_gthis.scanBlock(fun.expr,-1);
			}
		});
	}
	,scanBlock: function(e,depth) {
		if(e == null) {
			return;
		}
		if(depth > this.max) {
			this.warnNestedTryDepth(depth,e.pos);
			return;
		}
		var _g = e.expr;
		if(_g._hx_index == 12) {
			var exprs = _g.exprs;
			this.scanExprs(exprs,depth);
		}
	}
	,scanExprs: function(exprs,depth) {
		var _g = 0;
		while(_g < exprs.length) {
			var e = exprs[_g];
			++_g;
			var _g1 = e.expr;
			if(_g1._hx_index == 17) {
				var catches = _g1.catches;
				var expr = _g1.e;
				this.scanBlock(expr,depth + 1);
				this.scanCatches(catches,depth + 1);
			}
		}
	}
	,scanCatches: function(catches,depth) {
		var _g = 0;
		while(_g < catches.length) {
			var c = catches[_g];
			++_g;
			this.scanBlock(c.expr,depth);
		}
	}
	,warnNestedTryDepth: function(depth,pos) {
		this.logPos("Nested try depth is " + depth + " (max allowed is " + this.max + ")",pos);
	}
	,detectableInstances: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 5) {
			var i = _g1++;
			_g.push(i);
		}
		return [{ fixed : [], properties : [{ propertyName : "max", values : _g}]}];
	}
	,__class__: checkstyle_checks_coding_NestedTryDepthCheck
});
var checkstyle_checks_coding_NullableParameterCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.option = "questionMark";
};
$hxClasses["checkstyle.checks.coding.NullableParameterCheck"] = checkstyle_checks_coding_NullableParameterCheck;
checkstyle_checks_coding_NullableParameterCheck.__name__ = "checkstyle.checks.coding.NullableParameterCheck";
checkstyle_checks_coding_NullableParameterCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_NullableParameterCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	option: null
	,actualRun: function() {
		var _gthis = this;
		this.forEachField(function(field,_) {
			var _g = field.kind;
			if(_g._hx_index == 1) {
				var f = _g.f;
				var _g1 = 0;
				var _g11 = f.args;
				while(_g1 < _g11.length) {
					var arg = _g11[_g1];
					++_g1;
					_gthis.checkArgument(arg,field.pos);
				}
			}
		});
	}
	,checkArgument: function(arg,pos) {
		var hasNullDefault = haxe_macro_ExprTools.toString(arg.value) == "null";
		if(!hasNullDefault && arg.value != null) {
			return;
		}
		var formatted = this.formatArguments(arg.opt,arg.name,hasNullDefault);
		var _g = this.option;
		switch(_g) {
		case "nullDefault":
			if(arg.opt) {
				this.logRange("Function parameter " + formatted + " should be " + this.formatArguments(false,arg.name,true),pos.min,pos.min);
			}
			break;
		case "questionMark":
			if(hasNullDefault) {
				this.logRange("Function parameter " + formatted + " should be " + this.formatArguments(true,arg.name,false),pos.min,pos.min);
			}
			break;
		}
	}
	,formatArguments: function(opt,name,nullDefault) {
		return "\"" + (opt ? "?" : "") + name + (nullDefault ? " = null" : "") + "\"";
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "option", values : ["questionMark","nullDefault"]}]}];
	}
	,__class__: checkstyle_checks_coding_NullableParameterCheck
});
var checkstyle_checks_coding_ReturnCountCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.max = 2;
	this.ignoreFormat = "^$";
	this.categories = ["Complexity"];
	this.points = 5;
};
$hxClasses["checkstyle.checks.coding.ReturnCountCheck"] = checkstyle_checks_coding_ReturnCountCheck;
checkstyle_checks_coding_ReturnCountCheck.__name__ = "checkstyle.checks.coding.ReturnCountCheck";
checkstyle_checks_coding_ReturnCountCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_ReturnCountCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	max: null
	,ignoreFormat: null
	,actualRun: function() {
		var ignoreFormatRE = new EReg(this.ignoreFormat,"");
		var root = this.checker.getTokenTree();
		var functions = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < functions.length) {
			var fn = functions[_g];
			++_g;
			if(fn.children == null) {
				continue;
			}
			var _g1 = fn.getFirstChild().tok;
			if(_g1._hx_index == 1) {
				if(_g1.c._hx_index == 3) {
					var name = _g1.c.s;
					if(ignoreFormatRE.match(name)) {
						continue;
					}
				}
			}
			if(this.isPosSuppressed(fn.pos)) {
				continue;
			}
			if(!fn.hasChildren()) {
				throw new js__$Boot_HaxeError("function has invalid structure!");
			}
			var returns = fn.filterCallback($bind(this,this.filterReturns));
			if(returns.length > this.max) {
				this.logPos("Return count is " + returns.length + " (max allowed is " + this.max + ")",fn.pos);
			}
		}
	}
	,filterReturns: function(token,depth) {
		var _g = token.tok;
		if(_g._hx_index == 0) {
			switch(_g.k._hx_index) {
			case 0:
				if(depth == 0) {
					return tokentree_FilterResult.GO_DEEPER;
				} else {
					return tokentree_FilterResult.SKIP_SUBTREE;
				}
				break;
			case 10:
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			default:
				return tokentree_FilterResult.GO_DEEPER;
			}
		} else {
			return tokentree_FilterResult.GO_DEEPER;
		}
	}
	,detectableInstances: function() {
		var _g = [];
		var _g1 = 2;
		while(_g1 < 20) {
			var i = _g1++;
			_g.push(i);
		}
		return [{ fixed : [], properties : [{ propertyName : "max", values : _g}]}];
	}
	,__class__: checkstyle_checks_coding_ReturnCountCheck
});
var checkstyle_checks_coding_SimplifyBooleanExpressionCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.categories = ["Complexity"];
	this.points = 3;
};
$hxClasses["checkstyle.checks.coding.SimplifyBooleanExpressionCheck"] = checkstyle_checks_coding_SimplifyBooleanExpressionCheck;
checkstyle_checks_coding_SimplifyBooleanExpressionCheck.__name__ = "checkstyle.checks.coding.SimplifyBooleanExpressionCheck";
checkstyle_checks_coding_SimplifyBooleanExpressionCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_SimplifyBooleanExpressionCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var root = this.checker.getTokenTree();
		var acceptableTokens = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTrue),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFalse),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpEq),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpNotEq),haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNot),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpOr),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolOr),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolAnd)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < acceptableTokens.length) {
			var token = acceptableTokens[_g];
			++_g;
			if(this.isPosSuppressed(token.pos)) {
				continue;
			}
			if(token.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTrue)) || token.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFalse))) {
				this.checkToken(token);
			}
		}
	}
	,checkToken: function(token) {
		var parent = token.parent;
		if(parent.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpEq)) || parent.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpNotEq)) || parent.is(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNot)) || parent.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpOr)) || parent.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd)) || parent.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolOr)) || parent.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolAnd))) {
			this.logPos("Boolean expression can be simplified",token.pos);
		}
	}
	,__class__: checkstyle_checks_coding_SimplifyBooleanExpressionCheck
});
var checkstyle_checks_coding_SimplifyBooleanReturnCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.categories = ["Complexity"];
	this.points = 2;
};
$hxClasses["checkstyle.checks.coding.SimplifyBooleanReturnCheck"] = checkstyle_checks_coding_SimplifyBooleanReturnCheck;
checkstyle_checks_coding_SimplifyBooleanReturnCheck.__name__ = "checkstyle.checks.coding.SimplifyBooleanReturnCheck";
checkstyle_checks_coding_SimplifyBooleanReturnCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_SimplifyBooleanReturnCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var root = this.checker.getTokenTree();
		var acceptableTokens = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdIf)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < acceptableTokens.length) {
			var token = acceptableTokens[_g];
			++_g;
			var elseLiteral = token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse)],tokentree_TokenFilterMode.FIRST)[0];
			if(elseLiteral == null) {
				continue;
			}
			var elseStatement = elseLiteral.getFirstChild();
			var thenStatement = token.children[1];
			if(this.canReturnOnlyBooleanLiteral(thenStatement) && this.canReturnOnlyBooleanLiteral(elseStatement)) {
				this.logPos("Conditional logic can be removed",token.pos);
			}
		}
	}
	,canReturnOnlyBooleanLiteral: function(tkn) {
		if(this.isBooleanLiteralReturnStatement(tkn)) {
			return true;
		}
		return this.isBooleanLiteralReturnStatement(tkn.getFirstChild());
	}
	,isBooleanLiteralReturnStatement: function(tkn) {
		var booleanReturnStatement = false;
		if(tkn != null && tkn.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdReturn))) {
			var expr = tkn.getFirstChild();
			booleanReturnStatement = this.isBooleanLiteralType(expr);
		}
		return booleanReturnStatement;
	}
	,isBooleanLiteralType: function(tkn) {
		if(!tkn.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTrue))) {
			return tkn.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFalse));
		} else {
			return true;
		}
	}
	,__class__: checkstyle_checks_coding_SimplifyBooleanReturnCheck
});
var checkstyle_checks_coding_TraceCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.severity = "IGNORE";
};
$hxClasses["checkstyle.checks.coding.TraceCheck"] = checkstyle_checks_coding_TraceCheck;
checkstyle_checks_coding_TraceCheck.__name__ = "checkstyle.checks.coding.TraceCheck";
checkstyle_checks_coding_TraceCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_TraceCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var root = this.checker.getTokenTree();
		var traces = root.filter([haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent("trace"))],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < traces.length) {
			var tr = traces[_g];
			++_g;
			var _g1 = tr.getFirstChild().tok;
			if(_g1._hx_index != 18) {
				continue;
			}
			if(this.filterTrace(tr.parent)) {
				continue;
			}
			if(this.isPosSuppressed(tr.pos)) {
				continue;
			}
			this.logPos("Trace detected",tr.getPos());
		}
	}
	,filterTrace: function(token) {
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			if(_g.k._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 10:
			return true;
		default:
			return false;
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_coding_TraceCheck
});
var checkstyle_checks_coding_UnusedLocalVarCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
};
$hxClasses["checkstyle.checks.coding.UnusedLocalVarCheck"] = checkstyle_checks_coding_UnusedLocalVarCheck;
checkstyle_checks_coding_UnusedLocalVarCheck.__name__ = "checkstyle.checks.coding.UnusedLocalVarCheck";
checkstyle_checks_coding_UnusedLocalVarCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_UnusedLocalVarCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var root = this.checker.getTokenTree();
		var functions = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < functions.length) {
			var f = functions[_g];
			++_g;
			if(this.isPosSuppressed(f.pos)) {
				continue;
			}
			var skipFirstFunction = [true];
			var localVars = f.filterCallback((function(skipFirstFunction1) {
				return function(tok,depth) {
					var _g1 = tok.tok;
					if(_g1._hx_index == 0) {
						switch(_g1.k._hx_index) {
						case 0:
							if(skipFirstFunction1[0]) {
								skipFirstFunction1[0] = false;
								return tokentree_FilterResult.GO_DEEPER;
							} else {
								return tokentree_FilterResult.SKIP_SUBTREE;
							}
							break;
						case 2:
							return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
						default:
							return tokentree_FilterResult.GO_DEEPER;
						}
					} else {
						return tokentree_FilterResult.GO_DEEPER;
					}
				};
			})(skipFirstFunction));
			this.checkLocalVars(f,localVars);
		}
	}
	,checkLocalVars: function(f,localVars) {
		var _g = 0;
		while(_g < localVars.length) {
			var localVar = localVars[_g];
			++_g;
			var _g1 = 0;
			var _g2 = localVar.children;
			while(_g1 < _g2.length) {
				var child = _g2[_g1];
				++_g1;
				var _g3 = child.tok;
				if(_g3._hx_index == 1) {
					if(_g3.c._hx_index == 3) {
						var name = _g3.c.s;
						this.checkLocalVar(f,child,name);
					}
				}
			}
		}
	}
	,checkLocalVar: function(f,v,name) {
		var _gthis = this;
		var ignoreFunctionSignature = true;
		var nameList = f.filterCallback(function(tok,depth) {
			if(ignoreFunctionSignature) {
				var _g = tok.tok;
				switch(_g._hx_index) {
				case 0:
					switch(_g.k._hx_index) {
					case 18:case 19:
						return tokentree_FilterResult.SKIP_SUBTREE;
					default:
						return tokentree_FilterResult.GO_DEEPER;
					}
					break;
				case 6:case 7:
					return tokentree_FilterResult.SKIP_SUBTREE;
				case 18:
					ignoreFunctionSignature = false;
					return tokentree_FilterResult.SKIP_SUBTREE;
				case 21:
					return tokentree_FilterResult.SKIP_SUBTREE;
				default:
					return tokentree_FilterResult.GO_DEEPER;
				}
			}
			var _g1 = tok.tok;
			if(_g1._hx_index == 1) {
				switch(_g1.c._hx_index) {
				case 2:
					var s = _g1.c.s;
					return _gthis.checkStringInterpolation(tok,name,s);
				case 3:
					var n = _g1.c.s;
					if(n == name) {
						return tokentree_FilterResult.FOUND_GO_DEEPER;
					} else {
						return tokentree_FilterResult.GO_DEEPER;
					}
					break;
				default:
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		if(nameList.length > 1) {
			return;
		}
		this.logPos("Unused local variable " + name,v.parent.getPos());
	}
	,checkStringInterpolation: function(tok,name,s) {
		if(!checkstyle_utils_StringUtils.isStringInterpolation(s,this.checker.file.content,tok.pos)) {
			return tokentree_FilterResult.GO_DEEPER;
		}
		var format = "\\$" + name + "([^_0-9a-zA-Z]|$)";
		var r = new EReg(format,"");
		if(r.match(s)) {
			return tokentree_FilterResult.FOUND_GO_DEEPER;
		}
		format = "\\$\\{(|.*[^_0-9a-zA-Z])" + name + "([^_0-9a-zA-Z].*|)\\}";
		r = new EReg(format,"");
		if(r.match(s)) {
			return tokentree_FilterResult.FOUND_GO_DEEPER;
		}
		return tokentree_FilterResult.GO_DEEPER;
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_coding_UnusedLocalVarCheck
});
var checkstyle_checks_coding_VariableInitialisationCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.categories = ["Style","Clarity"];
	this.points = 2;
};
$hxClasses["checkstyle.checks.coding.VariableInitialisationCheck"] = checkstyle_checks_coding_VariableInitialisationCheck;
checkstyle_checks_coding_VariableInitialisationCheck.__name__ = "checkstyle.checks.coding.VariableInitialisationCheck";
checkstyle_checks_coding_VariableInitialisationCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_coding_VariableInitialisationCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		this.forEachField($bind(this,this.checkField));
	}
	,checkField: function(f,p) {
		if(f.name == "new" || p.kind == checkstyle_utils_FieldParentKind.INTERFACE || p.kind == checkstyle_utils_FieldParentKind.ENUM_ABSTRACT) {
			return;
		}
		var isPrivate = false;
		var isPublic = false;
		var isInline = false;
		var isStatic = false;
		if(f.access.indexOf(haxe_macro_Access.AInline) != -1) {
			isInline = true;
		} else if(f.access.indexOf(haxe_macro_Access.AStatic) != -1) {
			isStatic = true;
		} else if(f.access.indexOf(haxe_macro_Access.APublic) != -1) {
			isPublic = true;
		} else {
			isPrivate = true;
		}
		if(isPrivate || isPublic) {
			var _g = f.kind;
			if(_g._hx_index == 0) {
				var e = _g.e;
				var t = _g.t;
				if(e == null) {
					return;
				}
				this.warnVarInit(f.name,f.pos);
			}
		}
	}
	,warnVarInit: function(name,pos) {
		this.logPos("Invalid variable \"" + name + "\" initialisation (move initialisation to constructor or function)",pos);
	}
	,__class__: checkstyle_checks_coding_VariableInitialisationCheck
});
var checkstyle_checks_comments_DocCommentStyleCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.startStyle = "twostars";
	this.lineStyle = "none";
};
$hxClasses["checkstyle.checks.comments.DocCommentStyleCheck"] = checkstyle_checks_comments_DocCommentStyleCheck;
checkstyle_checks_comments_DocCommentStyleCheck.__name__ = "checkstyle.checks.comments.DocCommentStyleCheck";
checkstyle_checks_comments_DocCommentStyleCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_comments_DocCommentStyleCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	startStyle: null
	,lineStyle: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var docTokens = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdAbstract),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdClass),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdEnum),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdInterface),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < docTokens.length) {
			var token = docTokens[_g];
			++_g;
			if(this.isPosSuppressed(token.pos)) {
				continue;
			}
			var prevToken = token.previousSibling;
			if(prevToken == null) {
				continue;
			}
			var _g1 = prevToken.tok;
			if(_g1._hx_index == 6) {
				var text = _g1.s;
				this.checkCommentStyle(prevToken,text);
			}
		}
	}
	,checkCommentStyle: function(token,text) {
		if(text.length <= 0) {
			return;
		}
		var _g = this.startStyle;
		switch(_g) {
		case "ignore":
			break;
		case "none":case "onestar":
			if(text.indexOf("*") == 0 || text.lastIndexOf("*") == text.length - 1) {
				this.logPos("Comment should use '/*…*/'",token.pos,"OneStarStart");
			}
			break;
		case "twostars":
			if(text.indexOf("*") != 0 || text.lastIndexOf("*") != text.length - 1) {
				this.logPos("Comment should use '/**…**/'",token.pos,"TwoStarsStart");
			}
			break;
		}
		if(this.lineStyle == "ignore") {
			return;
		}
		var lines = text.split(this.checker.lineSeparator);
		var oneStar = new EReg("^\\s*\\*","");
		var twoStar = new EReg("^\\s*\\*\\*","");
		var _g2 = 1;
		var _g1 = lines.length - 1;
		while(_g2 < _g1) {
			var i = _g2++;
			var line = lines[i];
			var _g3 = this.lineStyle;
			switch(_g3) {
			case "ignore":
				break;
			case "none":
				if(oneStar.match(line)) {
					this.logPos("Comment lines should not start with '*'",token.pos,"NoStarsLine");
				}
				break;
			case "onestar":
				if(!oneStar.match(line)) {
					this.logPos("Comment lines should start with '*'",token.pos,"OneStarLine");
				}
				break;
			case "twostars":
				if(!twoStar.match(line)) {
					this.logPos("Comment lines should start with '**'",token.pos,"TwoStarsLine");
				}
				break;
			}
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "startStyle", values : ["onestar","twostars"]},{ propertyName : "lineStyle", values : ["none","onestar","twostars"]}]}];
	}
	,__class__: checkstyle_checks_comments_DocCommentStyleCheck
});
var checkstyle_checks_comments_FieldDocCommentCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.tokens = ["ABSTRACT_DEF","CLASS_DEF","ENUM_DEF","INTERFACE_DEF","TYPEDEF_DEF"];
	this.fieldType = "BOTH";
	this.modifier = "PUBLIC";
	this.requireParams = true;
	this.requireReturn = true;
	this.excludeNames = ["new","toString"];
	this.ignoreOverride = true;
};
$hxClasses["checkstyle.checks.comments.FieldDocCommentCheck"] = checkstyle_checks_comments_FieldDocCommentCheck;
checkstyle_checks_comments_FieldDocCommentCheck.__name__ = "checkstyle.checks.comments.FieldDocCommentCheck";
checkstyle_checks_comments_FieldDocCommentCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_comments_FieldDocCommentCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	tokens: null
	,fieldType: null
	,modifier: null
	,requireParams: null
	,requireReturn: null
	,ignoreOverride: null
	,excludeNames: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var typeTokenDefs = [];
		if(this.hasToken("ABSTRACT_DEF")) {
			typeTokenDefs.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdAbstract));
		}
		if(this.hasToken("CLASS_DEF")) {
			typeTokenDefs.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdClass));
		}
		if(this.hasToken("ENUM_DEF")) {
			typeTokenDefs.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdEnum));
		}
		if(this.hasToken("INTERFACE_DEF")) {
			typeTokenDefs.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdInterface));
		}
		if(this.hasToken("TYPEDEF_DEF")) {
			typeTokenDefs.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef));
		}
		var typeTokens = root.filter(typeTokenDefs,tokentree_TokenFilterMode.ALL);
		var fieldTokenDefs = [];
		if(this.fieldType == "VARS" || this.fieldType == "BOTH") {
			fieldTokenDefs.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar));
		}
		if(this.fieldType == "FUNCTIONS" || this.fieldType == "BOTH") {
			fieldTokenDefs.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction));
		}
		var _g = 0;
		while(_g < typeTokens.length) {
			var typeToken = typeTokens[_g];
			++_g;
			if(this.isPosSuppressed(typeToken.pos)) {
				continue;
			}
			var fieldTokens = typeToken.filter(fieldTokenDefs,tokentree_TokenFilterMode.FIRST);
			var _g1 = 0;
			while(_g1 < fieldTokens.length) {
				var token = fieldTokens[_g1];
				++_g1;
				this.checkField(token,this.isDefaultPublic(typeToken));
			}
		}
	}
	,isDefaultPublic: function(token) {
		var _g = token.tok;
		if(_g._hx_index == 0) {
			switch(_g.k._hx_index) {
			case 27:
				return true;
			case 31:
				return true;
			case 39:
				return true;
			default:
				return false;
			}
		} else {
			return false;
		}
	}
	,checkField: function(token,defaultPublic) {
		if(this.isPosSuppressed(token.pos)) {
			return;
		}
		if(!this.matchesModifier(token,defaultPublic)) {
			return;
		}
		if(this.checkIgnoreOverride(token)) {
			return;
		}
		var name = this.getTypeName(token);
		if(this.excludeNames.indexOf(name) >= 0) {
			return;
		}
		var prevToken = token.previousSibling;
		if(prevToken == null || !prevToken.isComment()) {
			this.logPos("Field \"" + name + "\" should have documentation",token.getPos());
			return;
		}
		var _g = prevToken.tok;
		if(_g._hx_index == 6) {
			var text = _g.s;
			this.checkComment(name,token,prevToken,text);
		}
	}
	,checkIgnoreOverride: function(token) {
		if(!this.ignoreOverride) {
			return false;
		}
		var ignoreTokens = token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdOverride)],tokentree_TokenFilterMode.FIRST);
		return ignoreTokens.length > 0;
	}
	,matchesModifier: function(token,defaultPublic) {
		if(this.modifier == "BOTH") {
			return true;
		}
		var modifierList = token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdPublic),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdPrivate)],tokentree_TokenFilterMode.FIRST);
		var isPublic = defaultPublic;
		var _g = 0;
		while(_g < modifierList.length) {
			var modToken = modifierList[_g];
			++_g;
			var _g1 = modToken.tok;
			if(_g1._hx_index == 0) {
				switch(_g1.k._hx_index) {
				case 18:
					isPublic = true;
					break;
				case 19:
					isPublic = false;
					break;
				default:
				}
			}
		}
		if(this.modifier == "PUBLIC") {
			return isPublic;
		}
		return !isPublic;
	}
	,getTypeName: function(token) {
		var nameTok = tokentree_TokenTreeAccessHelper.access(token).firstChild().token;
		if(nameTok == null) {
			return "<unknown>";
		}
		var _g = nameTok.tok;
		switch(_g._hx_index) {
		case 0:
			if(_g.k._hx_index == 22) {
				return "new";
			} else {
				return "<unknown>";
			}
			break;
		case 1:
			if(_g.c._hx_index == 3) {
				var text = _g.c.s;
				return text;
			} else {
				return "<unknown>";
			}
			break;
		default:
			return "<unknown>";
		}
	}
	,checkComment: function(name,token,docToken,text) {
		if(text == null || StringTools.trim(text).length <= 0) {
			this.logPos("Documentation for field \"" + name + "\" should contain text",docToken.pos);
			return;
		}
		var lines = text.split(this.checker.lineSeparator);
		if(lines.length < 3) {
			this.logPos("Documentation for field \"" + name + "\" should have at least one extra line of text",docToken.pos);
			return;
		}
		var firstLine = StringTools.trim(lines[1]);
		if(firstLine == "" || firstLine == "*") {
			this.logPos("Documentation for field \"" + name + "\" should have at least one extra line of text",docToken.pos);
		}
		var _g = token.tok;
		if(_g._hx_index == 0) {
			if(_g.k._hx_index == 0) {
				this.checkFunctionComment(name,token,docToken,text);
			}
		}
	}
	,checkFunctionComment: function(name,token,docToken,text) {
		if(this.requireParams) {
			this.checkParams(name,token,docToken,text);
		}
		if(!this.requireReturn) {
			return;
		}
		var access = tokentree_TokenTreeAccessHelper.access(token).firstChild().firstOf(haxeparser_TokenDef.DblDot);
		var dblDotToken = access.token;
		if(dblDotToken == null) {
			return;
		}
		var identToken = access.firstChild().is(haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent("Void"))).token;
		if(identToken != null) {
			return;
		}
		this.checkReturn(name,docToken,text);
	}
	,checkParams: function(fieldName,token,docToken,text) {
		var popenToken = tokentree_TokenTreeAccessHelper.access(token).firstChild().firstOf(haxeparser_TokenDef.POpen).token;
		if(popenToken == null) {
			return;
		}
		var params = [];
		if(popenToken.children != null) {
			var _g = 0;
			var _g1 = popenToken.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var _g2 = child.tok;
				if(_g2._hx_index == 1) {
					if(_g2.c._hx_index == 3) {
						var ident = _g2.c.s;
						params.push(ident);
					}
				}
			}
		}
		this.checkParamsAndOrder(fieldName,params,docToken,text);
	}
	,checkParamsAndOrder: function(fieldName,params,docToken,text) {
		if(params.length <= 0) {
			return;
		}
		var lines = text.split(this.checker.lineSeparator);
		var paramOrder = [];
		var missingParams = [];
		var _g = 0;
		while(_g < params.length) {
			var param = params[_g];
			++_g;
			var search = "@param " + param + " ";
			var index = 0;
			var found = false;
			while(index < lines.length) {
				var line = lines[index++];
				var pos = line.indexOf(search);
				if(pos >= 0) {
					paramOrder.push(index);
					var desc = HxOverrides.substr(line,pos + search.length,null);
					found = !new EReg("^[\\-\\s]*$","").match(desc);
					break;
				}
			}
			if(!found) {
				missingParams.push(param);
			}
		}
		if(missingParams.length > 0) {
			this.logMissingParams(fieldName,missingParams,docToken);
		} else {
			this.checkParamOrder(fieldName,params,paramOrder,docToken);
		}
	}
	,checkParamOrder: function(fieldName,params,paramOrder,docToken) {
		var start = 0;
		var _g1 = 0;
		var _g = paramOrder.length;
		while(_g1 < _g) {
			var index = _g1++;
			var value = paramOrder[index];
			if(value > start) {
				start = value;
				continue;
			}
			var param = params[index];
			this.logPos("Incorrect order of documentation for parameter \"" + param + "\" of field \"" + fieldName + "\"",docToken.pos);
		}
	}
	,logMissingParams: function(fieldName,params,docToken) {
		var _g = 0;
		while(_g < params.length) {
			var param = params[_g];
			++_g;
			this.logPos("Documentation for parameter \"" + param + "\" of field \"" + fieldName + "\" missing",docToken.pos);
		}
	}
	,checkReturn: function(name,docToken,text) {
		var search = "@return ";
		var pos = text.indexOf(search);
		if(pos < 0) {
			this.logPos("Documentation for return value of field \"" + name + "\" missing",docToken.pos);
			return;
		}
		var desc = HxOverrides.substr(text,pos + search.length,null);
		var lines = desc.split(this.checker.lineSeparator);
		if(lines.length < 0) {
			this.logPos("Documentation for return value of field \"" + name + "\" missing",docToken.pos);
			return;
		}
		if(!new EReg("^[\\-\\s]*$","").match(lines[0])) {
			return;
		}
		this.logPos("Documentation for return value of field \"" + name + "\" missing",docToken.pos);
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "tokens", values : [["ABSTRACT_DEF","CLASS_DEF","ENUM_DEF","INTERFACE_DEF","TYPEDEF_DEF"]]},{ propertyName : "excludeNames", values : [["new","toString"]]},{ propertyName : "modifier", values : ["PUBLIC","BOTH","PRIVATE"]},{ propertyName : "fieldType", values : ["BOTH","FUNCTIONS","VARS"]},{ propertyName : "requireParams", values : [true,false]},{ propertyName : "requireReturn", values : [true,false]},{ propertyName : "ignoreOverride", values : [false,true]}]}];
	}
	,__class__: checkstyle_checks_comments_FieldDocCommentCheck
});
var checkstyle_checks_comments_TODOCommentCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.LINE);
	this.severity = "IGNORE";
	this.format = "^\\s*(TODO|FIXME|HACK|XXX|BUG)";
	this.categories = ["Bug Risk"];
	this.points = 8;
};
$hxClasses["checkstyle.checks.comments.TODOCommentCheck"] = checkstyle_checks_comments_TODOCommentCheck;
checkstyle_checks_comments_TODOCommentCheck.__name__ = "checkstyle.checks.comments.TODOCommentCheck";
checkstyle_checks_comments_TODOCommentCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_comments_TODOCommentCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	format: null
	,actualRun: function() {
		var re = new EReg(this.format,"");
		var _g = 0;
		var _g1 = this.checker.tokens;
		while(_g < _g1.length) {
			var tk = _g1[_g];
			++_g;
			var _g2 = tk.tok;
			switch(_g2._hx_index) {
			case 6:
				var s = _g2.s;
				if(re.match(s)) {
					this.logPos("TODO comment:" + s,tk.pos);
				}
				break;
			case 7:
				var s1 = _g2.s;
				if(re.match(s1)) {
					this.logPos("TODO comment:" + s1,tk.pos);
				}
				break;
			default:
			}
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "format", values : ["^\\s*(TODO|FIXME|HACK|XXX|BUG)"]}]}];
	}
	,__class__: checkstyle_checks_comments_TODOCommentCheck
});
var checkstyle_checks_comments_TypeDocCommentCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.tokens = ["ABSTRACT_DEF","CLASS_DEF","ENUM_DEF","INTERFACE_DEF","TYPEDEF_DEF"];
};
$hxClasses["checkstyle.checks.comments.TypeDocCommentCheck"] = checkstyle_checks_comments_TypeDocCommentCheck;
checkstyle_checks_comments_TypeDocCommentCheck.__name__ = "checkstyle.checks.comments.TypeDocCommentCheck";
checkstyle_checks_comments_TypeDocCommentCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_comments_TypeDocCommentCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	tokens: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var tokenList = [];
		if(this.hasToken("ABSTRACT_DEF")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdAbstract));
		}
		if(this.hasToken("CLASS_DEF")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdClass));
		}
		if(this.hasToken("ENUM_DEF")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdEnum));
		}
		if(this.hasToken("INTERFACE_DEF")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdInterface));
		}
		if(this.hasToken("TYPEDEF_DEF")) {
			tokenList.push(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef));
		}
		var docTokens = root.filter(tokenList,tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < docTokens.length) {
			var token = docTokens[_g];
			++_g;
			if(this.isPosSuppressed(token.pos)) {
				continue;
			}
			var prevToken = token.previousSibling;
			var name = this.getTypeName(token);
			if(prevToken == null || !prevToken.isComment()) {
				this.logPos("Type \"" + name + "\" should have documentation",token.pos);
				continue;
			}
			var _g1 = prevToken.tok;
			if(_g1._hx_index == 6) {
				var text = _g1.s;
				this.checkComment(name,prevToken,text);
			}
		}
	}
	,getTypeName: function(token) {
		var nameTok = tokentree_TokenTreeAccessHelper.access(token).firstChild().token;
		if(nameTok == null) {
			return "<unknown>";
		}
		var _g = nameTok.tok;
		if(_g._hx_index == 1) {
			if(_g.c._hx_index == 3) {
				var text = _g.c.s;
				return text;
			} else {
				return "<unknown>";
			}
		} else {
			return "<unknown>";
		}
	}
	,checkComment: function(name,token,text) {
		if(text == null || StringTools.trim(text).length <= 0) {
			this.logPos("Documentation for type \"" + name + "\" should contain text",token.pos);
			return;
		}
		var lines = text.split(this.checker.lineSeparator);
		if(lines.length < 3) {
			this.logPos("Documentation for type \"" + name + "\" should have at least one extra line of text",token.pos);
			return;
		}
		var firstLine = StringTools.trim(lines[1]);
		if(firstLine == "" || firstLine == "*") {
			this.logPos("Documentation for type \"" + name + "\" should have at least one extra line of text",token.pos);
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "tokens", values : [["ABSTRACT_DEF","CLASS_DEF","ENUM_DEF","INTERFACE_DEF","TYPEDEF_DEF"]]}]}];
	}
	,__class__: checkstyle_checks_comments_TypeDocCommentCheck
});
var checkstyle_checks_design_EmptyPackageCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.enforceEmptyPackage = false;
};
$hxClasses["checkstyle.checks.design.EmptyPackageCheck"] = checkstyle_checks_design_EmptyPackageCheck;
checkstyle_checks_design_EmptyPackageCheck.__name__ = "checkstyle.checks.design.EmptyPackageCheck";
checkstyle_checks_design_EmptyPackageCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_design_EmptyPackageCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	enforceEmptyPackage: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var packageTokens = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdPackage)],tokentree_TokenFilterMode.ALL);
		if(this.enforceEmptyPackage) {
			if(packageTokens.length == 0) {
				this.log("Missing package declaration",1,0,1,0,"MissingPackage");
			}
		} else {
			this.checkPackageNames(packageTokens);
		}
	}
	,checkPackageNames: function(entries) {
		var _g = 0;
		while(_g < entries.length) {
			var entry = entries[_g];
			++_g;
			var firstChild = entry.getFirstChild();
			if(firstChild.is(haxeparser_TokenDef.Semicolon)) {
				this.logRange("Found empty package",entry.pos.min,firstChild.pos.max,"RedundantPackage");
			}
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "enforceEmptyPackage", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_design_EmptyPackageCheck
});
var checkstyle_checks_design_InterfaceCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.allowMarkerInterfaces = true;
	this.allowProperties = false;
	this.categories = ["Complexity","Style"];
	this.points = 13;
};
$hxClasses["checkstyle.checks.design.InterfaceCheck"] = checkstyle_checks_design_InterfaceCheck;
checkstyle_checks_design_InterfaceCheck.__name__ = "checkstyle.checks.design.InterfaceCheck";
checkstyle_checks_design_InterfaceCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_design_InterfaceCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	allowMarkerInterfaces: null
	,allowProperties: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var interfaces = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdInterface)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < interfaces.length) {
			var intr = interfaces[_g];
			++_g;
			var functions = intr.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)],tokentree_TokenFilterMode.ALL);
			var vars = intr.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar)],tokentree_TokenFilterMode.ALL);
			if(functions.length == 0 && vars.length == 0) {
				if(this.allowMarkerInterfaces) {
					continue;
				} else {
					this.logPos("Marker interfaces are not allowed",intr.pos);
				}
			}
			if(!this.allowProperties && vars.length > 0) {
				this.logPos("Properties are not allowed in interfaces",intr.pos);
			}
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "allowMarkerInterfaces", values : [true,false]},{ propertyName : "allowProperties", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_design_InterfaceCheck
});
var checkstyle_checks_design_UnnecessaryConstructorCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.categories = ["Bug Risk"];
	this.points = 3;
};
$hxClasses["checkstyle.checks.design.UnnecessaryConstructorCheck"] = checkstyle_checks_design_UnnecessaryConstructorCheck;
checkstyle_checks_design_UnnecessaryConstructorCheck.__name__ = "checkstyle.checks.design.UnnecessaryConstructorCheck";
checkstyle_checks_design_UnnecessaryConstructorCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_design_UnnecessaryConstructorCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var root = this.checker.getTokenTree();
		var classes = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdClass)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < classes.length) {
			var cls = classes[_g];
			++_g;
			if(this.extendsBaseClass(cls)) {
				continue;
			}
			var acceptableTokens = cls.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar)],tokentree_TokenFilterMode.FIRST);
			var haveConstructor = false;
			var staticTokens = 0;
			var constructorPos = null;
			var _g1 = 0;
			while(_g1 < acceptableTokens.length) {
				var token = acceptableTokens[_g1];
				++_g1;
				if(token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdNew)],tokentree_TokenFilterMode.FIRST,2).length > 0) {
					haveConstructor = true;
					constructorPos = token.getPos();
					continue;
				}
				if(token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdStatic)],tokentree_TokenFilterMode.FIRST,2).length > 0) {
					++staticTokens;
					continue;
				}
			}
			if(haveConstructor && acceptableTokens.length > 1 && acceptableTokens.length == staticTokens + 1) {
				this.logPos("Unnecessary constructor found",constructorPos);
			}
		}
	}
	,extendsBaseClass: function(cls) {
		var clsName = cls.getFirstChild();
		var _g = 0;
		var _g1 = clsName.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdExtends))) {
				return true;
			}
		}
		return false;
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_design_UnnecessaryConstructorCheck
});
var checkstyle_checks_imports_AvoidStarImportCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.categories = ["Style","Clarity"];
	this.points = 2;
};
$hxClasses["checkstyle.checks.imports.AvoidStarImportCheck"] = checkstyle_checks_imports_AvoidStarImportCheck;
checkstyle_checks_imports_AvoidStarImportCheck.__name__ = "checkstyle.checks.imports.AvoidStarImportCheck";
checkstyle_checks_imports_AvoidStarImportCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_imports_AvoidStarImportCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var root = this.checker.getTokenTree();
		this.checkImports(root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdImport)],tokentree_TokenFilterMode.ALL));
	}
	,checkImports: function(importEntries) {
		var _g = 0;
		while(_g < importEntries.length) {
			var entry = importEntries[_g];
			++_g;
			var stars = entry.filter([haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMult)],tokentree_TokenFilterMode.ALL);
			if(stars.length <= 0) {
				continue;
			}
			this.logPos("Using the \".*\" form of import should be avoided",entry.getPos());
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_imports_AvoidStarImportCheck
});
var checkstyle_checks_imports_UnusedImportCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.ignoreModules = [];
	this.moduleTypeMap = { };
	this.categories = ["Style","Clarity","Duplication"];
	this.points = 1;
};
$hxClasses["checkstyle.checks.imports.UnusedImportCheck"] = checkstyle_checks_imports_UnusedImportCheck;
checkstyle_checks_imports_UnusedImportCheck.__name__ = "checkstyle.checks.imports.UnusedImportCheck";
checkstyle_checks_imports_UnusedImportCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_imports_UnusedImportCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	ignoreModules: null
	,moduleTypeMap: null
	,actualRun: function() {
		var _gthis = this;
		var seenModules = [];
		if(this.isImportHx()) {
			return;
		}
		var root = this.checker.getTokenTree();
		var packageName = this.detectPackageName(root);
		var imports = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdImport)],tokentree_TokenFilterMode.ALL);
		var idents = root.filterCallback(function(token,depth) {
			var _g = token.tok;
			if(_g._hx_index == 1) {
				if(_g.c._hx_index == 3) {
					if(tokentree_utils_TokenTreeCheckUtils.isImport(token)) {
						return tokentree_FilterResult.GO_DEEPER;
					}
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				}
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
		var stringLiterals = root.filterCallback(function(token1,depth1) {
			var _g1 = token1.tok;
			if(_g1._hx_index == 1) {
				if(_g1.c._hx_index == 2) {
					var text = _g1.c.s;
					if(_gthis.checker.getString(token1.pos.min,token1.pos.min + 1) != "'") {
						return tokentree_FilterResult.GO_DEEPER;
					}
					if(new EReg("\\$\\{[^\\}]+\\.[^\\}]+\\}","").match(text)) {
						return tokentree_FilterResult.FOUND_GO_DEEPER;
					}
				}
			}
			return tokentree_FilterResult.GO_DEEPER;
		});
		var _g2 = 0;
		while(_g2 < imports.length) {
			var imp = imports[_g2];
			++_g2;
			var typeName = this.detectTypeName(imp);
			var moduleName = this.detectModuleName(imp);
			if(typeName == null || moduleName == null) {
				continue;
			}
			if(this.ignoreModules.indexOf(moduleName) != -1) {
				continue;
			}
			if(packageName != null && !this.hasMapping(moduleName) && "" + packageName + "." + typeName == moduleName) {
				this.logPos("Detected import \"" + moduleName + "\" from same package \"" + packageName + "\"",imp.getPos(),"SamePackage");
				continue;
			}
			if(!new EReg("\\.","").match(moduleName)) {
				this.logPos("Unnecessary toplevel import \"" + moduleName + "\" detected",imp.getPos(),"ToplevelImport");
				continue;
			}
			if(seenModules.indexOf(moduleName) != -1) {
				this.logPos("Duplicate import \"" + moduleName + "\" detected",imp.getPos(),"DuplicateImport");
				continue;
			}
			seenModules.push(moduleName);
			this.checkUsage(typeName,moduleName,imp,idents,stringLiterals);
		}
	}
	,isImportHx: function() {
		var fileName = haxe_io_Path.withoutDirectory(this.checker.file.name);
		return fileName == "import.hx";
	}
	,detectPackageName: function(root) {
		var packageToken = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdPackage)],tokentree_TokenFilterMode.ALL);
		if(packageToken == null || packageToken.length <= 0) {
			return null;
		}
		var packageName = this.detectModuleName(packageToken[0]);
		if(packageName == "") {
			packageName = null;
		}
		if(packageToken.length > 1) {
			this.logPos("Multiple package declarations found",packageToken[1].getPos(),"MultiplePackage");
		}
		return packageName;
	}
	,detectModuleName: function(token) {
		var moduleName_b = "";
		while(true) {
			var _g = token.tok;
			switch(_g._hx_index) {
			case 0:
				switch(_g.k._hx_index) {
				case 13:
					break;
				case 33:
					break;
				default:
					moduleName_b += Std.string(token.toString());
				}
				break;
			case 1:
				if(_g.c._hx_index == 3) {
					if(_g.c.s == "as") {
						var _g1 = token.parent.tok;
						if(_g1._hx_index == 10) {
							moduleName_b += Std.string(token.toString());
						} else {
							moduleName_b += " as ";
						}
					} else {
						moduleName_b += Std.string(token.toString());
					}
				} else {
					moduleName_b += Std.string(token.toString());
				}
				break;
			case 5:
				switch(_g.op._hx_index) {
				case 1:
					return null;
				case 23:
					var _g2 = token.parent.tok;
					if(_g2._hx_index == 10) {
						moduleName_b += Std.string(token.toString());
					} else {
						moduleName_b += " in ";
					}
					break;
				default:
					moduleName_b += Std.string(token.toString());
				}
				break;
			case 9:
				return moduleName_b;
			default:
				moduleName_b += Std.string(token.toString());
			}
			token = token.getFirstChild();
		}
	}
	,detectTypeName: function(token) {
		var lastName = null;
		while(true) {
			var _g = token.tok;
			switch(_g._hx_index) {
			case 1:
				if(_g.c._hx_index == 3) {
					var name = _g.c.s;
					lastName = name;
				}
				break;
			case 5:
				if(_g.op._hx_index == 1) {
					return null;
				}
				break;
			case 9:
				return lastName;
			default:
			}
			token = token.getFirstChild();
		}
	}
	,checkUsage: function(typeName,moduleName,importTok,idents,stringLiterals) {
		var _g = 0;
		while(_g < idents.length) {
			var ident = idents[_g];
			++_g;
			var name = ident.toString();
			if(!this.checkName(typeName,moduleName,name)) {
				continue;
			}
			var _g1 = ident.parent.tok;
			switch(_g1._hx_index) {
			case 0:
				switch(_g1.k._hx_index) {
				case 1:case 26:case 27:case 31:case 39:
					continue;
				default:
					return;
				}
				break;
			case 10:
				continue;
			default:
				return;
			}
		}
		var _g2 = 0;
		while(_g2 < stringLiterals.length) {
			var literal = stringLiterals[_g2];
			++_g2;
			var names = this.extractLiteralNames(literal.toString());
			var _g11 = 0;
			while(_g11 < names.length) {
				var name1 = names[_g11];
				++_g11;
				if(this.checkName(typeName,moduleName,name1)) {
					return;
				}
			}
		}
		this.logPos("Unused import \"" + moduleName + "\" detected",importTok.getPos(),"UnusedImport");
	}
	,extractLiteralNames: function(text) {
		var names = [];
		var interpols = [];
		var interpolRegEx = new EReg("\\$\\{([^\\}]+)\\}","g");
		while(interpolRegEx.match(text)) {
			interpols.push(interpolRegEx.matched(1));
			text = interpolRegEx.matchedRight();
		}
		var namesRegEx = new EReg("([A-Z][A-Za-z0-9_]*)","g");
		var _g = 0;
		while(_g < interpols.length) {
			var interpol = interpols[_g];
			++_g;
			while(namesRegEx.match(interpol)) {
				names.push(namesRegEx.matched(1));
				interpol = namesRegEx.matchedRight();
			}
		}
		return names;
	}
	,hasMapping: function(moduleName) {
		var mappedTypes = Reflect.field(this.moduleTypeMap,moduleName);
		if(mappedTypes != null) {
			return mappedTypes.length > 0;
		} else {
			return false;
		}
	}
	,checkName: function(typeName,moduleName,identName) {
		var mappedTypes = Reflect.field(this.moduleTypeMap,moduleName);
		if(mappedTypes == null || mappedTypes.length <= 0) {
			return typeName == identName;
		}
		var _g = 0;
		while(_g < mappedTypes.length) {
			var mappedType = mappedTypes[_g];
			++_g;
			if(mappedType == identName) {
				return true;
			}
		}
		return typeName == identName;
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_imports_UnusedImportCheck
});
var checkstyle_checks_literal_ArrayLiteralCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.literal.ArrayLiteralCheck"] = checkstyle_checks_literal_ArrayLiteralCheck;
checkstyle_checks_literal_ArrayLiteralCheck.__name__ = "checkstyle.checks.literal.ArrayLiteralCheck";
checkstyle_checks_literal_ArrayLiteralCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_literal_ArrayLiteralCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var _gthis = this;
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			var _g = e.expr;
			if(_g._hx_index == 8) {
				if(_g.t.name == "Array") {
					if(_g.t.pack.length == 0) {
						_gthis.logPos("Bad array instantiation, use the array literal notation \"[]\" which is shorter and cleaner",e.pos);
					}
				}
			}
		});
	}
	,__class__: checkstyle_checks_literal_ArrayLiteralCheck
});
var checkstyle_checks_literal_ERegLiteralCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.literal.ERegLiteralCheck"] = checkstyle_checks_literal_ERegLiteralCheck;
checkstyle_checks_literal_ERegLiteralCheck.__name__ = "checkstyle.checks.literal.ERegLiteralCheck";
checkstyle_checks_literal_ERegLiteralCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_literal_ERegLiteralCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		var _gthis = this;
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			if(_gthis.isPosSuppressed(e.pos)) {
				return;
			}
			var _g = e.expr;
			if(_g._hx_index == 8) {
				if(_g.t.name == "EReg") {
					if(_g.t.pack.length == 0) {
						if(_g.params.length == 2) {
							if(_g.params[0].expr._hx_index == 0) {
								if(_g.params[0].expr.c._hx_index == 2) {
									if(_g.params[1].expr._hx_index == 0) {
										if(_g.params[1].expr.c._hx_index == 2) {
											var re = _g.params[0].expr.c.s;
											var opt = _g.params[1].expr.c.s;
											if(new EReg("\\$\\{.+\\}","").match(re)) {
												return;
											}
											_gthis.logPos("Bad EReg instantiation, define expression between \"~/\" and \"/\"",e.pos);
										}
									}
								}
							}
						}
					}
				}
			}
		});
	}
	,__class__: checkstyle_checks_literal_ERegLiteralCheck
});
var checkstyle_checks_literal_HexadecimalLiteralCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.option = "upperCase";
	this.categories = ["Style","Clarity"];
	this.points = 1;
};
$hxClasses["checkstyle.checks.literal.HexadecimalLiteralCheck"] = checkstyle_checks_literal_HexadecimalLiteralCheck;
checkstyle_checks_literal_HexadecimalLiteralCheck.__name__ = "checkstyle.checks.literal.HexadecimalLiteralCheck";
checkstyle_checks_literal_HexadecimalLiteralCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_literal_HexadecimalLiteralCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	option: null
	,actualRun: function() {
		var _gthis = this;
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			var _g = e.expr;
			if(_g._hx_index == 0) {
				if(_g.c._hx_index == 0) {
					var s = _g.c.v;
					_gthis.checkString(s,e.pos);
				}
			}
		});
	}
	,checkString: function(s,p) {
		var prefix = HxOverrides.substr(s,0,2);
		if(prefix.toLowerCase() == "0x") {
			var bodyActual = HxOverrides.substr(s,2,null);
			var bodyExpected = bodyActual;
			if(this.option == "lowerCase") {
				bodyExpected = bodyExpected.toLowerCase();
			} else {
				bodyExpected = bodyExpected.toUpperCase();
			}
			if(bodyExpected != bodyActual) {
				this.logPos("Bad hexadecimal literal, use " + this.option,p);
			}
		}
	}
	,__class__: checkstyle_checks_literal_HexadecimalLiteralCheck
});
var checkstyle_checks_literal_MultipleStringLiteralsCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.ignore = "^\\s+$";
	this.allowDuplicates = 2;
	this.minLength = 2;
	this.categories = ["Style","Clarity"];
	this.points = 2;
};
$hxClasses["checkstyle.checks.literal.MultipleStringLiteralsCheck"] = checkstyle_checks_literal_MultipleStringLiteralsCheck;
checkstyle_checks_literal_MultipleStringLiteralsCheck.__name__ = "checkstyle.checks.literal.MultipleStringLiteralsCheck";
checkstyle_checks_literal_MultipleStringLiteralsCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_literal_MultipleStringLiteralsCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	allowDuplicates: null
	,minLength: null
	,ignore: null
	,ignoreRE: null
	,actualRun: function() {
		this.ignoreRE = new EReg(this.ignore,"");
		var root = this.checker.getTokenTree();
		var allLiterals = new haxe_ds_StringMap();
		var allStringLiterals = root.filterCallback(function(token,depth) {
			if(token.tok == null) {
				return tokentree_FilterResult.GO_DEEPER;
			}
			var _g = token.tok;
			if(_g._hx_index == 1) {
				if(_g.c._hx_index == 2) {
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < allStringLiterals.length) {
			var literalToken = allStringLiterals[_g1];
			++_g1;
			if(!this.filterLiteral(literalToken.parent)) {
				continue;
			}
			var _g11 = literalToken.parent.tok;
			if(_g11._hx_index == 16) {
				continue;
			}
			if(this.isPosSuppressed(literalToken.pos)) {
				continue;
			}
			var _g2 = literalToken.tok;
			if(_g2._hx_index == 1) {
				if(_g2.c._hx_index == 2) {
					var s = _g2.c.s;
					if(checkstyle_utils_StringUtils.isStringInterpolation(s,this.checker.file.content,literalToken.pos)) {
						continue;
					}
					if(this.ignoreRE.match(s)) {
						continue;
					}
					if(s.length < this.minLength) {
						continue;
					}
					if(this.checkLiteralCount(s,allLiterals)) {
						this.logPos("String \"" + s + "\" appears " + (__map_reserved[s] != null ? allLiterals.getReserved(s) : allLiterals.h[s]) + " times in the file",literalToken.pos);
					}
				}
			}
		}
	}
	,checkLiteralCount: function(literal,map) {
		if(!(__map_reserved[literal] != null ? map.existsReserved(literal) : map.h.hasOwnProperty(literal))) {
			if(__map_reserved[literal] != null) {
				map.setReserved(literal,1);
			} else {
				map.h[literal] = 1;
			}
		} else {
			var value = (__map_reserved[literal] != null ? map.getReserved(literal) : map.h[literal]) + 1;
			if(__map_reserved[literal] != null) {
				map.setReserved(literal,value);
			} else {
				map.h[literal] = value;
			}
		}
		return (__map_reserved[literal] != null ? map.getReserved(literal) : map.h[literal]) > this.allowDuplicates;
	}
	,filterLiteral: function(token) {
		if(token == null || token.tok == null) {
			return true;
		}
		var _g = token.tok;
		switch(_g._hx_index) {
		case 0:
			if(_g.k._hx_index == 2) {
				return token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdStatic)],tokentree_TokenFilterMode.FIRST).length <= 0;
			} else {
				return this.filterLiteral(token.parent);
			}
			break;
		case 21:
			return false;
		default:
			return this.filterLiteral(token.parent);
		}
	}
	,__class__: checkstyle_checks_literal_MultipleStringLiteralsCheck
});
var checkstyle_checks_literal_StringLiteralCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.policy = "doubleAndInterpolation";
	this.allowException = true;
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.literal.StringLiteralCheck"] = checkstyle_checks_literal_StringLiteralCheck;
checkstyle_checks_literal_StringLiteralCheck.__name__ = "checkstyle.checks.literal.StringLiteralCheck";
checkstyle_checks_literal_StringLiteralCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_literal_StringLiteralCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	policy: null
	,allowException: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var allStringLiterals = root.filterCallback(function(token,depth) {
			if(token.tok == null) {
				return tokentree_FilterResult.GO_DEEPER;
			}
			var _g = token.tok;
			if(_g._hx_index == 1) {
				if(_g.c._hx_index == 2) {
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < allStringLiterals.length) {
			var literalToken = allStringLiterals[_g1];
			++_g1;
			var _g11 = literalToken.tok;
			if(_g11._hx_index == 1) {
				if(_g11.c._hx_index == 2) {
					var s = _g11.c.s;
					if(this.isPosSuppressed(literalToken.pos)) {
						continue;
					}
					this.checkLiteral(s,literalToken.pos);
				}
			}
		}
	}
	,checkLiteral: function(s,pos) {
		var quote = this.checker.getString(pos.min,pos.min + 1);
		var singleQuote = quote == "'";
		var _g = this.policy;
		switch(_g) {
		case "doubleAndInterpolation":
			if(!singleQuote) {
				return;
			}
			if(checkstyle_utils_StringUtils.isStringInterpolation(s,this.checker.file.content,pos)) {
				return;
			}
			if(this.allowException && new EReg("\"","").match(s)) {
				return;
			}
			this.logPos("String \"" + s + "\" uses single quotes instead of double quotes",pos,"UseDoubleQuotes");
			break;
		case "onlyDouble":
			if(!singleQuote) {
				return;
			}
			if(this.allowException && new EReg("\"","").match(s)) {
				return;
			}
			this.logPos("String \"" + s + "\" uses single quotes instead of double quotes",pos,"UseDoubleQuotes");
			break;
		case "onlySingle":
			if(singleQuote) {
				return;
			}
			if(this.allowException && new EReg("'","").match(s)) {
				return;
			}
			this.logPos("String \"" + s + "\" uses double quotes instead of single quotes",pos,"UseSingleQuotes");
			break;
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "policy", values : ["doubleAndInterpolation","onlySingle","onlyDouble"]},{ propertyName : "allowException", values : [false,true]}]}];
	}
	,__class__: checkstyle_checks_literal_StringLiteralCheck
});
var checkstyle_checks_meta_RedundantAccessMetaBase = function(metaName) {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.metaName = metaName;
	this.prohibitMeta = false;
};
$hxClasses["checkstyle.checks.meta.RedundantAccessMetaBase"] = checkstyle_checks_meta_RedundantAccessMetaBase;
checkstyle_checks_meta_RedundantAccessMetaBase.__name__ = "checkstyle.checks.meta.RedundantAccessMetaBase";
checkstyle_checks_meta_RedundantAccessMetaBase.__super__ = checkstyle_checks_Check;
checkstyle_checks_meta_RedundantAccessMetaBase.prototype = $extend(checkstyle_checks_Check.prototype,{
	prohibitMeta: null
	,metaName: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var docTokens = root.filter([haxeparser_TokenDef.At],tokentree_TokenFilterMode.ALL);
		var infos = [];
		var _g = 0;
		while(_g < docTokens.length) {
			var token = docTokens[_g];
			++_g;
			if(this.isPosSuppressed(token.pos)) {
				continue;
			}
			var target = tokentree_TokenTreeAccessHelper.access(token).firstChild().is(haxeparser_TokenDef.DblDot).firstChild().is(haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent(this.metaName))).firstChild().is(haxeparser_TokenDef.POpen).firstChild().token;
			if(target == null) {
				continue;
			}
			if(this.prohibitMeta) {
				this.logForbidden(token,this.getTargetName(target));
				continue;
			}
			var parent = token.parent;
			if(parent == null) {
				continue;
			}
			var info = { name : this.getTargetName(target), ident : parent.toString(), token : token, pos : parent.getPos()};
			if(this.filerParent(parent,info)) {
				continue;
			}
			this.checkAndAdd(infos,info);
		}
	}
	,filerParent: function(parent,info) {
		return false;
	}
	,checkAndAdd: function(infos,newInfo) {
		var _g = 0;
		while(_g < infos.length) {
			var info = infos[_g];
			++_g;
			if(info.pos.min >= newInfo.pos.max || info.pos.max <= newInfo.pos.min) {
				continue;
			}
			if(newInfo.name == info.name || StringTools.startsWith(newInfo.name,"" + info.name + ".")) {
				this.logPos("Redundant \"@:" + this.metaName + "(" + newInfo.name + ")\" for field \"" + newInfo.ident + "\" detected",newInfo.token.getPos());
				break;
			}
		}
		infos.push(newInfo);
	}
	,logForbidden: function(token,name) {
		this.logPos("Consider removing \"@:" + this.metaName + "(" + name + ")\"",token.getPos());
	}
	,getTargetName: function(token) {
		var result = "";
		while(token != null) {
			result += token.toString();
			token = token.getFirstChild();
		}
		return result;
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_meta_RedundantAccessMetaBase
});
var checkstyle_checks_meta_RedundantAccessMetaCheck = function() {
	checkstyle_checks_meta_RedundantAccessMetaBase.call(this,"access");
};
$hxClasses["checkstyle.checks.meta.RedundantAccessMetaCheck"] = checkstyle_checks_meta_RedundantAccessMetaCheck;
checkstyle_checks_meta_RedundantAccessMetaCheck.__name__ = "checkstyle.checks.meta.RedundantAccessMetaCheck";
checkstyle_checks_meta_RedundantAccessMetaCheck.__super__ = checkstyle_checks_meta_RedundantAccessMetaBase;
checkstyle_checks_meta_RedundantAccessMetaCheck.prototype = $extend(checkstyle_checks_meta_RedundantAccessMetaBase.prototype,{
	__class__: checkstyle_checks_meta_RedundantAccessMetaCheck
});
var checkstyle_checks_meta_RedundantAllowMetaCheck = function() {
	checkstyle_checks_meta_RedundantAccessMetaBase.call(this,"allow");
};
$hxClasses["checkstyle.checks.meta.RedundantAllowMetaCheck"] = checkstyle_checks_meta_RedundantAllowMetaCheck;
checkstyle_checks_meta_RedundantAllowMetaCheck.__name__ = "checkstyle.checks.meta.RedundantAllowMetaCheck";
checkstyle_checks_meta_RedundantAllowMetaCheck.__super__ = checkstyle_checks_meta_RedundantAccessMetaBase;
checkstyle_checks_meta_RedundantAllowMetaCheck.prototype = $extend(checkstyle_checks_meta_RedundantAccessMetaBase.prototype,{
	filerParent: function(parent,info) {
		var access = tokentree_TokenTreeAccessHelper.access(parent).firstOf(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdPublic));
		if(access.token == null) {
			return false;
		}
		this.logPos("Redundant \"@:allow(" + info.name + ")\" for public field \"" + info.ident + "\" detected",info.token.getPos());
		return true;
	}
	,__class__: checkstyle_checks_meta_RedundantAllowMetaCheck
});
var checkstyle_checks_metrics_CyclomaticComplexityCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.thresholds = [{ severity : "WARNING", complexity : checkstyle_checks_metrics_CyclomaticComplexityCheck.DEFAULT_COMPLEXITY_WARNING},{ severity : "ERROR", complexity : checkstyle_checks_metrics_CyclomaticComplexityCheck.DEFAULT_COMPLEXITY_ERROR}];
	this.categories = ["Complexity"];
	this.points = 13;
};
$hxClasses["checkstyle.checks.metrics.CyclomaticComplexityCheck"] = checkstyle_checks_metrics_CyclomaticComplexityCheck;
checkstyle_checks_metrics_CyclomaticComplexityCheck.__name__ = "checkstyle.checks.metrics.CyclomaticComplexityCheck";
checkstyle_checks_metrics_CyclomaticComplexityCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_metrics_CyclomaticComplexityCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	thresholds: null
	,actualRun: function() {
		var _gthis = this;
		this.forEachField(function(field,_) {
			var _g = field.kind;
			if(_g._hx_index == 1) {
				var f = _g.f;
				_gthis.calculateComplexity({ name : field.name, expr : f.expr, pos : field.pos});
			}
		});
	}
	,calculateComplexity: function(method) {
		var complexity = 1 + this.evaluateExpr(method.expr);
		var risk = this.thresholds.filter(function(t) {
			if(complexity >= t.complexity) {
				return t.severity != "IGNORE";
			} else {
				return false;
			}
		}).pop();
		if(risk != null) {
			this.notify(method,complexity,risk);
		}
	}
	,evaluateExpr: function(e) {
		var _gthis = this;
		if(e == null || e.expr == null) {
			return 0;
		}
		var _g = e.expr;
		switch(_g._hx_index) {
		case 1:
			var e2 = _g.e2;
			var e1 = _g.e1;
			return this.evaluateExpr(e1) + this.evaluateExpr(e2);
		case 2:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			var tmp = this.evaluateExpr(e11) + this.evaluateExpr(e21);
			var tmp1;
			switch(op._hx_index) {
			case 14:
				tmp1 = 1;
				break;
			case 15:
				tmp1 = 1;
				break;
			default:
				tmp1 = 0;
			}
			return tmp + tmp1;
		case 4:
			var e3 = _g.e;
			return this.evaluateExpr(e3);
		case 5:
			var fields = _g.fields;
			return Lambda.fold(fields.map(function(f) {
				return f.expr;
			}),function(e4,total) {
				return total + _gthis.evaluateExpr(e4);
			},0);
		case 6:
			var values = _g.values;
			return Lambda.fold(values,function(e5,total1) {
				return total1 + _gthis.evaluateExpr(e5);
			},0);
		case 12:
			var exprs = _g.exprs;
			return Lambda.fold(exprs,function(e6,total2) {
				return total2 + _gthis.evaluateExpr(e6);
			},0);
		case 13:
			var e7 = _g.expr;
			var it = _g.it;
			return 1 + this.evaluateExpr(it) + this.evaluateExpr(e7);
		case 14:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			return 1 + this.evaluateExpr(econd) + this.evaluateExpr(eif) + this.evaluateExpr(eelse);
		case 15:
			var e8 = _g.e;
			var econd1 = _g.econd;
			return 1 + this.evaluateExpr(econd1) + this.evaluateExpr(e8);
		case 16:
			var def = _g.edef;
			var cases = _g.cases;
			var e9 = _g.e;
			return this.evaluateExpr(def) + Lambda.fold(cases.map(function(c) {
				return c.expr;
			}),function(e10,total3) {
				return total3 + 1 + _gthis.evaluateExpr(e10);
			},0);
		case 17:
			var catches = _g.catches;
			var e12 = _g.e;
			return Lambda.fold(catches.map(function(c1) {
				return c1.expr;
			}),function(e13,total4) {
				return total4 + 1 + _gthis.evaluateExpr(e13);
			},0);
		case 18:
			var e14 = _g.e;
			if(e14 != null) {
				return this.evaluateExpr(e14);
			} else {
				return 0;
			}
			break;
		case 21:
			var e15 = _g.e;
			return this.evaluateExpr(e15);
		case 22:
			var e16 = _g.e;
			return this.evaluateExpr(e16);
		case 23:
			var e17 = _g.e;
			return this.evaluateExpr(e17);
		case 24:
			var e18 = _g.e;
			return this.evaluateExpr(e18);
		case 26:
			var eelse1 = _g.eelse;
			var eif1 = _g.eif;
			var econd2 = _g.econd;
			return 1 + this.evaluateExpr(econd2) + this.evaluateExpr(eif1) + this.evaluateExpr(eelse1);
		case 27:
			var e19 = _g.e;
			return this.evaluateExpr(e19);
		default:
			return 0;
		}
	}
	,notify: function(method,complexity,risk) {
		this.logPos("Method \"" + method.name + "\" is too complex (score: " + complexity + ").",method.pos,null,risk.severity);
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "thresholds", values : [[{ severity : "WARNING", complexity : 6},{ severity : "ERROR", complexity : 16}],[{ severity : "WARNING", complexity : 11},{ severity : "ERROR", complexity : 21}],[{ severity : "WARNING", complexity : 16},{ severity : "ERROR", complexity : 26}],[{ severity : "WARNING", complexity : 21},{ severity : "ERROR", complexity : 31}]]}]}];
	}
	,__class__: checkstyle_checks_metrics_CyclomaticComplexityCheck
});
var checkstyle_checks_modifier_ModifierOrderCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.modifiers = ["MACRO","OVERRIDE","PUBLIC_PRIVATE","STATIC","INLINE","DYNAMIC"];
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.modifier.ModifierOrderCheck"] = checkstyle_checks_modifier_ModifierOrderCheck;
checkstyle_checks_modifier_ModifierOrderCheck.__name__ = "checkstyle.checks.modifier.ModifierOrderCheck";
checkstyle_checks_modifier_ModifierOrderCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_modifier_ModifierOrderCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	modifiers: null
	,actualRun: function() {
		this.forEachField($bind(this,this.checkField));
	}
	,checkField: function(f,_) {
		var lastIndex = -1;
		var index;
		var _g = 0;
		var _g1 = f.access;
		while(_g < _g1.length) {
			var access = _g1[_g];
			++_g;
			var modifier = checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.fromAccess(access);
			index = this.modifiers.indexOf(modifier);
			if(index < lastIndex) {
				var pos = this.calcPos(f);
				this.warnOrder(f.name,modifier,pos);
				return;
			}
			lastIndex = index;
		}
	}
	,calcPos: function(f) {
		var _g = f.kind;
		switch(_g._hx_index) {
		case 1:
			var fun = _g.f;
			if(fun.expr == null) {
				return f.pos;
			}
			return haxe_macro_PositionTools.make({ min : f.pos.min, max : fun.expr.pos.min, file : f.pos.file});
		case 0:case 2:
			return f.pos;
		}
	}
	,warnOrder: function(name,modifier,pos) {
		this.logPos("\"" + name + "\" modifier order is invalid (modifier: \"" + modifier + "\")",pos);
	}
	,__class__: checkstyle_checks_modifier_ModifierOrderCheck
});
var checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$ = {};
$hxClasses["checkstyle.checks.modifier._ModifierOrderCheck.ModifierOrderCheckModifier_Impl_"] = checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$;
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.__name__ = "checkstyle.checks.modifier._ModifierOrderCheck.ModifierOrderCheckModifier_Impl_";
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.fromAccess = function(access) {
	switch(access._hx_index) {
	case 0:case 1:
		return "PUBLIC_PRIVATE";
	case 2:
		return "STATIC";
	case 3:
		return "OVERRIDE";
	case 4:
		return "DYNAMIC";
	case 5:
		return "INLINE";
	case 6:
		return "MACRO";
	case 7:
		return "FINAL";
	case 8:
		return "EXTERN";
	}
};
var checkstyle_checks_modifier_PublicAccessorCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.categories = ["Style","Clarity"];
	this.points = 1;
};
$hxClasses["checkstyle.checks.modifier.PublicAccessorCheck"] = checkstyle_checks_modifier_PublicAccessorCheck;
checkstyle_checks_modifier_PublicAccessorCheck.__name__ = "checkstyle.checks.modifier.PublicAccessorCheck";
checkstyle_checks_modifier_PublicAccessorCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_modifier_PublicAccessorCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		this.forEachField($bind(this,this.checkField));
	}
	,checkField: function(f,p) {
		var _g = f.kind;
		if(_g._hx_index != 1) {
			return;
		}
		if(!StringTools.startsWith(f.name,"set_") && !StringTools.startsWith(f.name,"get_")) {
			return;
		}
		var isDefaultPrivate = checkstyle_utils_FieldUtils.isDefaultPrivate(f,p);
		if(isDefaultPrivate && f.access.indexOf(haxe_macro_Access.APublic) == -1) {
			return;
		} else if(!isDefaultPrivate && f.access.indexOf(haxe_macro_Access.APrivate) != -1) {
			return;
		}
		this.logPos("Accessor method should not be public",f.pos);
	}
	,__class__: checkstyle_checks_modifier_PublicAccessorCheck
});
var checkstyle_checks_modifier_RedundantModifierCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.enforcePublicPrivate = false;
	this.enforcePublic = false;
	this.enforcePrivate = false;
	this.categories = ["Style","Clarity"];
	this.points = 1;
};
$hxClasses["checkstyle.checks.modifier.RedundantModifierCheck"] = checkstyle_checks_modifier_RedundantModifierCheck;
checkstyle_checks_modifier_RedundantModifierCheck.__name__ = "checkstyle.checks.modifier.RedundantModifierCheck";
checkstyle_checks_modifier_RedundantModifierCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_modifier_RedundantModifierCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	enforcePublicPrivate: null
	,enforcePublic: null
	,enforcePrivate: null
	,actualRun: function() {
		var _gthis = this;
		var forcePrivate = this.enforcePrivate;
		var forcePublic = this.enforcePublic;
		if(this.enforcePublicPrivate) {
			forcePrivate = true;
			forcePublic = true;
		}
		this.forEachField(function(f,p) {
			_gthis.checkField(f,p,forcePrivate,forcePublic);
		});
	}
	,checkField: function(f,p,forcePrivate,forcePublic) {
		var isDefaultPrivate = checkstyle_utils_FieldUtils.isDefaultPrivate(f,p);
		var implicitAccess = isDefaultPrivate ? "private" : "public";
		var missingCode = isDefaultPrivate ? "MissingPrivate" : "MissingPublic";
		var redundantCode = isDefaultPrivate ? "RedundantPrivate" : "RedundantPublic";
		if(f.access.indexOf(haxe_macro_Access.APublic) == -1 && f.access.indexOf(haxe_macro_Access.APrivate) == -1) {
			if(!isDefaultPrivate && forcePublic || isDefaultPrivate && forcePrivate) {
				this.logPos("Missing \"" + implicitAccess + "\" keyword for \"" + f.name + "\"",f.pos,missingCode);
			}
		}
		if(!forcePrivate && isDefaultPrivate && f.access.indexOf(haxe_macro_Access.APrivate) != -1 || !forcePublic && !isDefaultPrivate && f.access.indexOf(haxe_macro_Access.APublic) != -1) {
			this.logPos("\"" + implicitAccess + "\" keyword is redundant for \"" + f.name + "\"",f.pos,redundantCode);
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "enforcePrivate", values : [true,false]},{ propertyName : "enforcePublic", values : [true,false]},{ propertyName : "enforcePublicPrivate", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_modifier_RedundantModifierCheck
});
var checkstyle_checks_naming_CatchParameterNameCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.format = "^(e|t|ex|[a-z][a-z][a-zA-Z]+)$";
};
$hxClasses["checkstyle.checks.naming.CatchParameterNameCheck"] = checkstyle_checks_naming_CatchParameterNameCheck;
checkstyle_checks_naming_CatchParameterNameCheck.__name__ = "checkstyle.checks.naming.CatchParameterNameCheck";
checkstyle_checks_naming_CatchParameterNameCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_naming_CatchParameterNameCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	format: null
	,actualRun: function() {
		var formatRE = new EReg(this.format,"");
		var root = this.checker.getTokenTree();
		var catchTokens = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCatch)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < catchTokens.length) {
			var tkn = catchTokens[_g];
			++_g;
			var _g1 = 0;
			var _g2 = tkn.children;
			while(_g1 < _g2.length) {
				var item = _g2[_g1];
				++_g1;
				var child = item.getFirstChild();
				if(child == null) {
					continue;
				}
				var _g3 = child.tok;
				if(_g3._hx_index == 1) {
					if(_g3.c._hx_index == 3) {
						var name = _g3.c.s;
						if(item.is(haxeparser_TokenDef.POpen)) {
							if(!formatRE.match(name)) {
								this.logPos("\"" + name + "\" must match pattern \"~/" + this.format + "/\"",item.pos);
							}
							continue;
						}
					}
				}
			}
		}
	}
	,__class__: checkstyle_checks_naming_CatchParameterNameCheck
});
var checkstyle_checks_naming_NameCheckBase = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.format = "^.*$";
	this.tokens = [];
	this.ignoreExtern = true;
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.naming.NameCheckBase"] = checkstyle_checks_naming_NameCheckBase;
checkstyle_checks_naming_NameCheckBase.__name__ = "checkstyle.checks.naming.NameCheckBase";
checkstyle_checks_naming_NameCheckBase.__super__ = checkstyle_checks_Check;
checkstyle_checks_naming_NameCheckBase.prototype = $extend(checkstyle_checks_Check.prototype,{
	format: null
	,tokens: null
	,ignoreExtern: null
	,formatRE: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,actualRun: function() {
		this.formatRE = new EReg(this.format,"");
		this.checkClassFields();
	}
	,checkClassFields: function() {
		var _g = 0;
		var _g1 = this.checker.ast.decls;
		while(_g < _g1.length) {
			var td = _g1[_g];
			++_g;
			var _g2 = td.decl;
			switch(_g2._hx_index) {
			case 0:
				var d = _g2.d;
				this.checkClassType(td.decl,d,td.pos);
				break;
			case 1:
				var d1 = _g2.d;
				this.checkEnumType(td.decl,d1,td.pos);
				break;
			case 2:
				var d2 = _g2.a;
				this.checkAbstractType(td.decl,d2,td.pos);
				break;
			case 4:
				var d3 = _g2.d;
				this.checkTypedefType(td.decl,d3,td.pos);
				break;
			default:
			}
		}
	}
	,checkClassType: function(decl,d,pos) {
	}
	,checkEnumType: function(decl,d,pos) {
	}
	,checkAbstractType: function(decl,d,pos) {
	}
	,checkTypedefType: function(decl,d,pos) {
	}
	,matchTypeName: function(type,name,pos) {
		if(!this.formatRE.match(name)) {
			this.warn(type,name,pos);
		}
	}
	,warn: function(type,name,pos) {
		this.logPos("Invalid " + type + " signature: \"" + name + "\" (name should be \"~/" + this.format + "/\")",pos);
	}
	,__class__: checkstyle_checks_naming_NameCheckBase
});
var checkstyle_checks_naming_ConstantNameCheck = function() {
	checkstyle_checks_naming_NameCheckBase.call(this);
	this.format = "^[A-Z][A-Z0-9]*(_[A-Z0-9_]+)*$";
};
$hxClasses["checkstyle.checks.naming.ConstantNameCheck"] = checkstyle_checks_naming_ConstantNameCheck;
checkstyle_checks_naming_ConstantNameCheck.__name__ = "checkstyle.checks.naming.ConstantNameCheck";
checkstyle_checks_naming_ConstantNameCheck.__super__ = checkstyle_checks_naming_NameCheckBase;
checkstyle_checks_naming_ConstantNameCheck.prototype = $extend(checkstyle_checks_naming_NameCheckBase.prototype,{
	checkClassType: function(decl,d,pos) {
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_ClassFlag.HExtern) != -1) {
			return;
		}
		this.checkFields(d.data,checkstyle_utils_FieldUtils.toParentType(decl));
	}
	,checkEnumType: function(decl,d,pos) {
	}
	,checkAbstractType: function(decl,d,pos) {
		this.checkFields(d.data,checkstyle_utils_FieldUtils.toParentType(decl));
	}
	,checkTypedefType: function(decl,d,pos) {
	}
	,checkFields: function(d,p) {
		var _g = 0;
		while(_g < d.length) {
			var field = d[_g];
			++_g;
			if(this.isCheckSuppressed(field)) {
				continue;
			}
			var _g1 = field.kind;
			if(_g1._hx_index == 0) {
				var e = _g1.e;
				var t = _g1.t;
				this.checkField(field,t,e,p);
			}
		}
	}
	,checkField: function(f,t,e,p) {
		if(e == null || e.expr == null || !checkstyle_utils_FieldUtils.isStatic(f,p)) {
			return;
		}
		if(!this.hasToken("INLINE") && checkstyle_utils_FieldUtils.isInline(f,p)) {
			return;
		}
		if(!this.hasToken("NOTINLINE") && !checkstyle_utils_FieldUtils.isInline(f,p)) {
			return;
		}
		this.matchTypeName("const",f.name,f.pos);
	}
	,detectableInstances: function() {
		var instanceInline = { fixed : [{ propertyName : "tokens", value : ["INLINE"]}], properties : [{ propertyName : "format", values : ["^[A-Z][A-Z0-9]*(_[A-Z0-9_]+)*$","^[A-Z]+[a-zA-Z0-9]*$","^[a-z][a-zA-Z0-9]*$"]},{ propertyName : "ignoreExtern", values : [true,false]}]};
		var instanceNotInline = { fixed : [{ propertyName : "tokens", value : ["NOTINLINE"]}], properties : [{ propertyName : "format", values : ["^[A-Z][A-Z0-9]*(_[A-Z0-9_]+)*$","^[A-Z]+[a-zA-Z0-9]*$","^[a-z][a-zA-Z0-9]*$"]},{ propertyName : "ignoreExtern", values : [true,false]}]};
		return [instanceInline,instanceNotInline];
	}
	,__class__: checkstyle_checks_naming_ConstantNameCheck
});
var checkstyle_checks_naming_ListenerNameCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.listeners = ["addEventListener","addListener","on","once"];
	this.format = "^_?[a-z][a-zA-Z0-9]*$";
};
$hxClasses["checkstyle.checks.naming.ListenerNameCheck"] = checkstyle_checks_naming_ListenerNameCheck;
checkstyle_checks_naming_ListenerNameCheck.__name__ = "checkstyle.checks.naming.ListenerNameCheck";
checkstyle_checks_naming_ListenerNameCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_naming_ListenerNameCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	listeners: null
	,format: null
	,formatRE: null
	,actualRun: function() {
		var _gthis = this;
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			if(_gthis.isPosSuppressed(e.pos)) {
				return;
			}
			var _g = e.expr;
			if(_g._hx_index == 7) {
				var params = _g.params;
				var e1 = _g.e;
				_gthis.searchCall(e1,params);
			}
		});
	}
	,searchCall: function(e,p) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			if(this.searchLeftCall(e,listener)) {
				this.searchCallParam(p);
			}
		}
	}
	,searchLeftCall: function(e,name) {
		var _g = e.expr;
		switch(_g._hx_index) {
		case 0:
			if(_g.c._hx_index == 3) {
				var ident = _g.c.s;
				return ident == name;
			} else {
				return false;
			}
			break;
		case 3:
			var field = _g.field;
			var e2 = _g.e;
			return field == name;
		default:
			return false;
		}
	}
	,searchCallParam: function(p) {
		if(p.length < 2) {
			return;
		}
		var listener = p[1];
		var _g = listener.expr;
		if(_g._hx_index == 0) {
			if(_g.c._hx_index == 3) {
				var ident = _g.c.s;
				this.checkListenerName(ident,listener.pos);
			}
		}
	}
	,checkListenerName: function(name,pos) {
		this.formatRE = new EReg(this.format,"");
		var match = this.formatRE.match(name);
		if(!match) {
			this.logPos("Wrong listener name: \"" + name + "\" (should be \"~/" + this.format + "/\")",pos);
		}
	}
	,__class__: checkstyle_checks_naming_ListenerNameCheck
});
var checkstyle_checks_naming_LocalVariableNameCheck = function() {
	checkstyle_checks_naming_NameCheckBase.call(this);
	this.format = "^[a-z][a-zA-Z0-9]*$";
};
$hxClasses["checkstyle.checks.naming.LocalVariableNameCheck"] = checkstyle_checks_naming_LocalVariableNameCheck;
checkstyle_checks_naming_LocalVariableNameCheck.__name__ = "checkstyle.checks.naming.LocalVariableNameCheck";
checkstyle_checks_naming_LocalVariableNameCheck.__super__ = checkstyle_checks_naming_NameCheckBase;
checkstyle_checks_naming_LocalVariableNameCheck.prototype = $extend(checkstyle_checks_naming_NameCheckBase.prototype,{
	actualRun: function() {
		var _gthis = this;
		this.formatRE = new EReg(this.format,"");
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			var _g = e.expr;
			if(_g._hx_index == 10) {
				var vars = _g.vars;
				if(_gthis.ignoreExtern && _gthis.isPosExtern(e.pos)) {
					return;
				}
				if(_gthis.isPosSuppressed(e.pos)) {
					return;
				}
				var _g1 = 0;
				while(_g1 < vars.length) {
					var v = vars[_g1];
					++_g1;
					_gthis.matchTypeName("local var",v.name,e.pos);
				}
			}
		});
	}
	,__class__: checkstyle_checks_naming_LocalVariableNameCheck
});
var checkstyle_checks_naming_MemberNameCheck = function() {
	checkstyle_checks_naming_NameCheckBase.call(this);
	this.format = "^[a-z][a-zA-Z0-9]*$";
};
$hxClasses["checkstyle.checks.naming.MemberNameCheck"] = checkstyle_checks_naming_MemberNameCheck;
checkstyle_checks_naming_MemberNameCheck.__name__ = "checkstyle.checks.naming.MemberNameCheck";
checkstyle_checks_naming_MemberNameCheck.__super__ = checkstyle_checks_naming_NameCheckBase;
checkstyle_checks_naming_MemberNameCheck.prototype = $extend(checkstyle_checks_naming_NameCheckBase.prototype,{
	checkClassType: function(decl,d,pos) {
		if(!this.hasToken("CLASS")) {
			if(this.hasToken("ABSTRACT")) {
				return;
			}
			if(!this.hasToken("PUBLIC") && !this.hasToken("PRIVATE")) {
				return;
			}
		}
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_ClassFlag.HExtern) != -1) {
			return;
		}
		this.checkFields(d.data,checkstyle_utils_FieldUtils.toParentType(decl));
	}
	,checkEnumType: function(decl,d,pos) {
		if(!this.hasToken("ENUM")) {
			return;
		}
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1) {
			return;
		}
		if(this.isPosSuppressed(pos)) {
			return;
		}
		this.checkEnumFields(d.data);
	}
	,checkAbstractType: function(decl,d,pos) {
		if(!this.hasToken("ABSTRACT")) {
			if(this.hasToken("CLASS")) {
				return;
			}
			if(!this.hasToken("PUBLIC") && !this.hasToken("PRIVATE")) {
				return;
			}
		}
		this.checkFields(d.data,checkstyle_utils_FieldUtils.toParentType(decl));
	}
	,checkTypedefType: function(decl,d,pos) {
		if(!this.hasToken("TYPEDEF")) {
			return;
		}
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1) {
			return;
		}
		var _g = d.data;
		if(_g._hx_index == 2) {
			var f = _g.fields;
			this.checkTypedefFields(f);
		}
	}
	,checkFields: function(d,p) {
		var _g = 0;
		while(_g < d.length) {
			var field = d[_g];
			++_g;
			if(this.isCheckSuppressed(field)) {
				continue;
			}
			var _g1 = field.kind;
			switch(_g1._hx_index) {
			case 0:
				var e = _g1.e;
				var t = _g1.t;
				this.checkField(field,t,e,p);
				break;
			case 2:
				var e1 = _g1.e;
				var t1 = _g1.t;
				this.checkField(field,t1,e1,p);
				break;
			default:
			}
		}
	}
	,checkTypedefFields: function(d) {
		var _g = 0;
		while(_g < d.length) {
			var field = d[_g];
			++_g;
			if(this.isCheckSuppressed(field)) {
				continue;
			}
			var _g1 = field.kind;
			if(_g1._hx_index == 0) {
				var e = _g1.e;
				var t = _g1.t;
				this.checkTypedefField(field,t,e);
			}
		}
	}
	,checkEnumFields: function(d) {
		var _g = 0;
		while(_g < d.length) {
			var field = d[_g];
			++_g;
			this.matchTypeName("enum member",field.name,field.pos);
		}
	}
	,checkField: function(f,t,e,p) {
		if(checkstyle_utils_FieldUtils.isStatic(f,p)) {
			return;
		}
		if(this.hasToken("PUBLIC") || this.hasToken("PRIVATE")) {
			if(!this.hasToken("PUBLIC") && checkstyle_utils_FieldUtils.isPublic(f,p)) {
				return;
			}
			if(!this.hasToken("PRIVATE") && checkstyle_utils_FieldUtils.isPrivate(f,p)) {
				return;
			}
		}
		this.matchTypeName("member",f.name,f.pos);
	}
	,checkTypedefField: function(f,t,e) {
		this.matchTypeName("typedef member",f.name,f.pos);
	}
	,__class__: checkstyle_checks_naming_MemberNameCheck
});
var checkstyle_checks_naming_MethodNameCheck = function() {
	checkstyle_checks_naming_NameCheckBase.call(this);
	this.format = "^[a-z][a-zA-Z0-9]*$";
};
$hxClasses["checkstyle.checks.naming.MethodNameCheck"] = checkstyle_checks_naming_MethodNameCheck;
checkstyle_checks_naming_MethodNameCheck.__name__ = "checkstyle.checks.naming.MethodNameCheck";
checkstyle_checks_naming_MethodNameCheck.__super__ = checkstyle_checks_naming_NameCheckBase;
checkstyle_checks_naming_MethodNameCheck.prototype = $extend(checkstyle_checks_naming_NameCheckBase.prototype,{
	checkClassType: function(decl,d,pos) {
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_ClassFlag.HExtern) != -1) {
			return;
		}
		if(d.flags.indexOf(haxeparser_ClassFlag.HInterface) != -1) {
			return;
		}
		this.checkFields(d.data,checkstyle_utils_FieldUtils.toParentType(decl));
	}
	,checkAbstractType: function(decl,d,pos) {
		this.checkFields(d.data,checkstyle_utils_FieldUtils.toParentType(decl));
	}
	,checkTypedefType: function(decl,d,pos) {
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1) {
			return;
		}
		var p = checkstyle_utils_FieldUtils.toParentType(decl);
		var _g = d.data;
		if(_g._hx_index == 2) {
			var f = _g.fields;
			this.checkFields(f,p);
		}
	}
	,checkFields: function(d,p) {
		var _g = 0;
		while(_g < d.length) {
			var field = d[_g];
			++_g;
			if(this.isCheckSuppressed(field)) {
				continue;
			}
			var _g1 = field.kind;
			if(_g1._hx_index == 1) {
				var f = _g1.f;
				this.checkField(field,p);
			}
		}
	}
	,checkField: function(f,p) {
		if(StringTools.startsWith(f.name,"get_") || StringTools.startsWith(f.name,"set_")) {
			return;
		}
		if(this.hasToken("NOTINLINE") && !this.hasToken("INLINE") && checkstyle_utils_FieldUtils.isInline(f,p)) {
			return;
		}
		if(this.hasToken("INLINE") && !this.hasToken("NOTINLINE") && !checkstyle_utils_FieldUtils.isInline(f,p)) {
			return;
		}
		if(this.hasToken("NOTSTATIC") && !this.hasToken("STATIC") && checkstyle_utils_FieldUtils.isStatic(f,p)) {
			return;
		}
		if(this.hasToken("STATIC") && !this.hasToken("NOTSTATIC") && !checkstyle_utils_FieldUtils.isStatic(f,p)) {
			return;
		}
		if(this.hasToken("PUBLIC") && !this.hasToken("PRIVATE") && !checkstyle_utils_FieldUtils.isPublic(f,p)) {
			return;
		}
		if(this.hasToken("PRIVATE") && !this.hasToken("PUBLIC") && !checkstyle_utils_FieldUtils.isPrivate(f,p)) {
			return;
		}
		this.matchTypeName("method name",f.name,f.pos);
	}
	,__class__: checkstyle_checks_naming_MethodNameCheck
});
var checkstyle_checks_naming_ParameterNameCheck = function() {
	checkstyle_checks_naming_NameCheckBase.call(this);
	this.format = "^(_|[a-z][a-zA-Z0-9]*$)";
};
$hxClasses["checkstyle.checks.naming.ParameterNameCheck"] = checkstyle_checks_naming_ParameterNameCheck;
checkstyle_checks_naming_ParameterNameCheck.__name__ = "checkstyle.checks.naming.ParameterNameCheck";
checkstyle_checks_naming_ParameterNameCheck.__super__ = checkstyle_checks_naming_NameCheckBase;
checkstyle_checks_naming_ParameterNameCheck.prototype = $extend(checkstyle_checks_naming_NameCheckBase.prototype,{
	checkClassType: function(decl,d,pos) {
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_ClassFlag.HExtern) != -1) {
			return;
		}
		this.checkFields(d.data);
	}
	,checkEnumType: function(decl,d,pos) {
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1) {
			return;
		}
		this.checkEnumFields(d.data);
	}
	,checkAbstractType: function(decl,d,pos) {
		this.checkFields(d.data);
	}
	,checkTypedefType: function(decl,d,pos) {
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1) {
			return;
		}
		var _g = d.data;
		if(_g._hx_index == 2) {
			var f = _g.fields;
			this.checkFields(f);
		}
	}
	,checkFields: function(d) {
		var _g = 0;
		while(_g < d.length) {
			var field = d[_g];
			++_g;
			if(this.isCheckSuppressed(field)) {
				continue;
			}
			var _g1 = field.kind;
			if(_g1._hx_index == 1) {
				var f = _g1.f;
				this.checkField(f.args,field.pos);
			}
		}
	}
	,checkEnumFields: function(d) {
		var _g = 0;
		while(_g < d.length) {
			var field = d[_g];
			++_g;
			var _g1 = 0;
			var _g2 = field.args;
			while(_g1 < _g2.length) {
				var arg = _g2[_g1];
				++_g1;
				this.matchTypeName("parameter name",arg.name,field.pos);
			}
		}
	}
	,checkField: function(args,pos) {
		if(args == null || args.length <= 0) {
			return;
		}
		var _g = 0;
		while(_g < args.length) {
			var arg = args[_g];
			++_g;
			this.matchTypeName("parameter name",arg.name,pos);
		}
	}
	,__class__: checkstyle_checks_naming_ParameterNameCheck
});
var checkstyle_checks_naming_TypeNameCheck = function() {
	checkstyle_checks_naming_NameCheckBase.call(this);
	this.format = "^[A-Z]+[a-zA-Z0-9]*$";
};
$hxClasses["checkstyle.checks.naming.TypeNameCheck"] = checkstyle_checks_naming_TypeNameCheck;
checkstyle_checks_naming_TypeNameCheck.__name__ = "checkstyle.checks.naming.TypeNameCheck";
checkstyle_checks_naming_TypeNameCheck.__super__ = checkstyle_checks_naming_NameCheckBase;
checkstyle_checks_naming_TypeNameCheck.prototype = $extend(checkstyle_checks_naming_NameCheckBase.prototype,{
	checkClassType: function(decl,d,pos) {
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_ClassFlag.HExtern) != -1) {
			return;
		}
		var isInterface = d.flags.indexOf(haxeparser_ClassFlag.HInterface) != -1;
		if(!this.hasToken("INTERFACE") && isInterface) {
			return;
		}
		if(!this.hasToken("CLASS") && !isInterface) {
			return;
		}
		if(isInterface) {
			this.matchTypeName("interface",d.name,pos);
		} else {
			this.matchTypeName("class",d.name,pos);
		}
	}
	,checkEnumType: function(decl,d,pos) {
		if(!this.hasToken("ENUM")) {
			return;
		}
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1) {
			return;
		}
		this.matchTypeName("enum",d.name,pos);
	}
	,checkAbstractType: function(decl,d,pos) {
		if(!this.hasToken("ABSTRACT")) {
			return;
		}
		this.matchTypeName("abstract",d.name,pos);
	}
	,checkTypedefType: function(decl,d,pos) {
		if(!this.hasToken("TYPEDEF")) {
			return;
		}
		if(this.ignoreExtern && d.flags.indexOf(haxeparser_EnumFlag.EExtern) != -1) {
			return;
		}
		this.matchTypeName("typedef",d.name,pos);
	}
	,__class__: checkstyle_checks_naming_TypeNameCheck
});
var checkstyle_checks_size_FileLengthCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.LINE);
	this.max = checkstyle_checks_size_FileLengthCheck.DEFAULT_MAX_LENGTH;
	this.categories = ["Complexity","Clarity"];
	this.points = 21;
};
$hxClasses["checkstyle.checks.size.FileLengthCheck"] = checkstyle_checks_size_FileLengthCheck;
checkstyle_checks_size_FileLengthCheck.__name__ = "checkstyle.checks.size.FileLengthCheck";
checkstyle_checks_size_FileLengthCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_size_FileLengthCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	max: null
	,actualRun: function() {
		var _g = 0;
		var _g1 = this.checker.ast.decls;
		while(_g < _g1.length) {
			var td = _g1[_g];
			++_g;
			var _g2 = td.decl;
			if(_g2._hx_index == 0) {
				var d = _g2.d;
				var _g21 = 0;
				var _g3 = d.data;
				while(_g21 < _g3.length) {
					var field = _g3[_g21];
					++_g21;
					if(this.isCheckSuppressed(field)) {
						return;
					}
				}
			}
		}
		if(this.checker.lines.length > this.max) {
			this.log("File length is " + this.checker.lines.length + " lines (max allowed is " + this.max + ")",this.checker.lines.length,0,this.checker.lines.length,0);
		}
	}
	,detectableInstances: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 10) {
			var i = _g1++;
			_g.push(400 + i * 200);
		}
		return [{ fixed : [], properties : [{ propertyName : "max", values : _g}]}];
	}
	,__class__: checkstyle_checks_size_FileLengthCheck
});
var checkstyle_checks_size_LineLengthCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.LINE);
	this.max = checkstyle_checks_size_LineLengthCheck.DEFAULT_MAX_LENGTH;
	this.ignorePattern = "^$";
	this.categories = ["Complexity","Clarity"];
	this.points = 2;
};
$hxClasses["checkstyle.checks.size.LineLengthCheck"] = checkstyle_checks_size_LineLengthCheck;
checkstyle_checks_size_LineLengthCheck.__name__ = "checkstyle.checks.size.LineLengthCheck";
checkstyle_checks_size_LineLengthCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_size_LineLengthCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	max: null
	,ignorePattern: null
	,actualRun: function() {
		var ignoreRE = new EReg(this.ignorePattern,"");
		var _g1 = 0;
		var _g = this.checker.lines.length;
		while(_g1 < _g) {
			var i = _g1++;
			var line = this.checker.lines[i];
			if(line.length > this.max) {
				if(ignoreRE.match(line) || this.isLineSuppressed(i)) {
					continue;
				}
				this.log("Line is longer than " + this.max + " characters (found " + line.length + ")",i + 1,0,i + 1,line.length);
			}
		}
	}
	,detectableInstances: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 7) {
			var i = _g1++;
			_g.push(80 + i * 20);
		}
		return [{ fixed : [], properties : [{ propertyName : "max", values : _g}]}];
	}
	,__class__: checkstyle_checks_size_LineLengthCheck
});
var checkstyle_checks_size_MethodCountCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.maxTotal = checkstyle_checks_size_MethodCountCheck.DEFAULT_MAX_COUNT;
	this.maxPrivate = checkstyle_checks_size_MethodCountCheck.DEFAULT_MAX_COUNT;
	this.maxPublic = checkstyle_checks_size_MethodCountCheck.DEFAULT_MAX_COUNT;
	this.categories = ["Complexity"];
	this.points = 21;
};
$hxClasses["checkstyle.checks.size.MethodCountCheck"] = checkstyle_checks_size_MethodCountCheck;
checkstyle_checks_size_MethodCountCheck.__name__ = "checkstyle.checks.size.MethodCountCheck";
checkstyle_checks_size_MethodCountCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_size_MethodCountCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	maxTotal: null
	,maxPrivate: null
	,maxPublic: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		var acceptableTokens = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)],tokentree_TokenFilterMode.FIRST);
		if(acceptableTokens.length > this.maxTotal) {
			this.logPos("Total number of methods is " + acceptableTokens.length + " (max allowed is " + this.maxTotal + ")",acceptableTokens[this.maxTotal].pos);
			return;
		}
		var privateTokens = [];
		var publicTokens = [];
		var _g = 0;
		while(_g < acceptableTokens.length) {
			var token = acceptableTokens[_g];
			++_g;
			if(token.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdPublic)],tokentree_TokenFilterMode.FIRST).length > 0) {
				publicTokens.push(token);
			} else {
				privateTokens.push(token);
			}
		}
		if(privateTokens.length > this.maxPrivate) {
			this.logPos("Number of private methods is " + privateTokens.length + " (max allowed is " + this.maxPrivate + ")",privateTokens[this.maxPrivate].pos);
			return;
		}
		if(publicTokens.length > this.maxPublic) {
			this.logPos("Number of public methods is " + publicTokens.length + " (max allowed is " + this.maxPublic + ")",publicTokens[this.maxPublic].pos);
			return;
		}
	}
	,detectableInstances: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 21) {
			var i = _g1++;
			_g.push(10 + i * 5);
		}
		var tmp = { propertyName : "maxTotal", values : _g};
		var _g11 = [];
		var _g2 = 0;
		while(_g2 < 21) {
			var i1 = _g2++;
			_g11.push(10 + i1 * 5);
		}
		var tmp1 = { propertyName : "maxPrivate", values : _g11};
		var _g21 = [];
		var _g3 = 0;
		while(_g3 < 21) {
			var i2 = _g3++;
			_g21.push(10 + i2 * 5);
		}
		return [{ fixed : [], properties : [tmp,tmp1,{ propertyName : "maxPublic", values : _g21}]}];
	}
	,__class__: checkstyle_checks_size_MethodCountCheck
});
var checkstyle_checks_size_MethodLengthCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.max = checkstyle_checks_size_MethodLengthCheck.DEFAULT_MAX_LENGTH;
	this.countEmpty = false;
	this.categories = ["Complexity","Clarity"];
	this.points = 8;
};
$hxClasses["checkstyle.checks.size.MethodLengthCheck"] = checkstyle_checks_size_MethodLengthCheck;
checkstyle_checks_size_MethodLengthCheck.__name__ = "checkstyle.checks.size.MethodLengthCheck";
checkstyle_checks_size_MethodLengthCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_size_MethodLengthCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	max: null
	,countEmpty: null
	,actualRun: function() {
		this.forEachField($bind(this,this.searchField));
	}
	,searchField: function(f,_) {
		var _gthis = this;
		var _g = f.kind;
		if(_g._hx_index == 1) {
			var ff = _g.f;
			this.checkMethod(f);
		}
		checkstyle_utils_ExprUtils.walkField(f,function(e) {
			var _g1 = e.expr;
			if(_g1._hx_index == 11) {
				var ff1 = _g1.f;
				var name = _g1.name;
				_gthis.checkFunction(e);
			}
		});
	}
	,checkMethod: function(f) {
		var lp = this.checker.getLinePos(f.pos.min);
		var lmin = lp.line;
		var lmax = this.checker.getLinePos(f.pos.max).line;
		var len = this.getLineCount(lmin,lmax);
		if(len > this.max) {
			this.warnFunctionLength(len,f.name,f.pos);
		}
	}
	,checkFunction: function(f) {
		var lp = this.checker.getLinePos(f.pos.min);
		var lmin = lp.line;
		var lmax = this.checker.getLinePos(f.pos.max).line;
		var fname = "(anonymous)";
		var _g = f.expr;
		if(_g._hx_index == 11) {
			var ff = _g.f;
			var name = _g.name;
			if(name != null) {
				fname = name;
			}
		} else {
			throw new js__$Boot_HaxeError("EFunction only");
		}
		var len = this.getLineCount(lmin,lmax);
		if(len > this.max) {
			this.warnFunctionLength(len,fname,f.pos);
		}
	}
	,getLineCount: function(lmin,lmax) {
		var emptyLines = 0;
		if(this.countEmpty) {
			var _g1 = lmin;
			var _g = lmax;
			while(_g1 < _g) {
				var i = _g1++;
				if(new EReg("^\\s*$","").match(this.checker.lines[i]) || new EReg("^\\s*//.*","").match(this.checker.lines[i])) {
					++emptyLines;
				}
			}
		}
		return lmax - lmin - emptyLines;
	}
	,warnFunctionLength: function(len,name,pos) {
		this.logPos("Method `" + name + "` length is " + len + " lines (max allowed is " + this.max + ")",pos);
	}
	,detectableInstances: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 17) {
			var i = _g1++;
			_g.push(20 + i * 5);
		}
		return [{ fixed : [], properties : [{ propertyName : "max", values : _g},{ propertyName : "countEmpty", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_size_MethodLengthCheck
});
var checkstyle_checks_size_ParameterNumberCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.max = checkstyle_checks_size_ParameterNumberCheck.DEFAULT_MAX_PARAMS;
	this.ignoreOverriddenMethods = false;
	this.categories = ["Complexity","Clarity"];
	this.points = 5;
};
$hxClasses["checkstyle.checks.size.ParameterNumberCheck"] = checkstyle_checks_size_ParameterNumberCheck;
checkstyle_checks_size_ParameterNumberCheck.__name__ = "checkstyle.checks.size.ParameterNumberCheck";
checkstyle_checks_size_ParameterNumberCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_size_ParameterNumberCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	max: null
	,ignoreOverriddenMethods: null
	,actualRun: function() {
		this.forEachField($bind(this,this.checkField));
	}
	,checkField: function(f,_) {
		if(this.ignoreOverriddenMethods && f.access.indexOf(haxe_macro_Access.AOverride) != -1) {
			return;
		}
		var _g = f.kind;
		if(_g._hx_index == 1) {
			var fun = _g.f;
			if(fun.args != null && fun.args.length > this.max) {
				this.warnMaxParameter(f.name,f.pos);
			}
		}
	}
	,warnMaxParameter: function(name,pos) {
		this.logPos("Too many parameters for function: " + name + " (> " + this.max + ")",pos);
	}
	,detectableInstances: function() {
		var _g = [];
		var _g1 = 4;
		while(_g1 < 15) {
			var i = _g1++;
			_g.push(i);
		}
		return [{ fixed : [], properties : [{ propertyName : "max", values : _g},{ propertyName : "ignoreOverriddenMethods", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_size_ParameterNumberCheck
});
var checkstyle_checks_type_AnonymousCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.categories = ["Style","Clarity","Bug Risk","Complexity"];
	this.points = 8;
};
$hxClasses["checkstyle.checks.type.AnonymousCheck"] = checkstyle_checks_type_AnonymousCheck;
checkstyle_checks_type_AnonymousCheck.__name__ = "checkstyle.checks.type.AnonymousCheck";
checkstyle_checks_type_AnonymousCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_type_AnonymousCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		this.forEachField($bind(this,this.checkField));
		this.checkLocalVars();
	}
	,checkField: function(f,_) {
		if(f.name == "new") {
			return;
		}
		var _g = f.kind;
		if(_g._hx_index == 0) {
			if(_g.t != null) {
				if(_g.t._hx_index == 2) {
					var val = _g.e;
					var fields = _g.t.fields;
					this.error(f.name,f.pos);
				}
			}
		}
	}
	,checkLocalVars: function() {
		var _gthis = this;
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			var _g = e.expr;
			if(_g._hx_index == 10) {
				var vars = _g.vars;
				var _g1 = 0;
				while(_g1 < vars.length) {
					var v = vars[_g1];
					++_g1;
					if(v.type == null) {
						continue;
					}
					var _g11 = v.type;
					if(_g11 != null) {
						if(_g11._hx_index == 2) {
							var fields = _g11.fields;
							_gthis.error(v.name,e.pos);
						}
					}
				}
			}
		});
	}
	,error: function(name,pos) {
		this.logPos("Anonymous structure \"" + name + "\" found, use \"typedef\"",pos);
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_type_AnonymousCheck
});
var checkstyle_checks_type_DynamicCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.categories = ["Clarity","Bug Risk","Complexity"];
	this.points = 3;
};
$hxClasses["checkstyle.checks.type.DynamicCheck"] = checkstyle_checks_type_DynamicCheck;
checkstyle_checks_type_DynamicCheck.__name__ = "checkstyle.checks.type.DynamicCheck";
checkstyle_checks_type_DynamicCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_type_DynamicCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	actualRun: function() {
		checkstyle_utils_ComplexTypeUtils.walkFile(this.checker.ast,$bind(this,this.callbackComplexType));
	}
	,callbackComplexType: function(t,name,pos) {
		if(t == null) {
			return;
		}
		if(t._hx_index == 0) {
			var p = t.p;
			if(p.name != "Dynamic") {
				return;
			}
			if(this.isPosSuppressed(pos)) {
				return;
			}
			this.error(name,pos);
		}
	}
	,error: function(name,pos) {
		this.logPos("\"" + name + "\" type is \"Dynamic\"",pos);
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_type_DynamicCheck
});
var checkstyle_checks_type_ReturnCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.allowEmptyReturn = true;
	this.enforceReturnType = false;
	this.enforceReturnTypeForAnonymous = false;
	this.categories = ["Clarity"];
	this.points = 2;
};
$hxClasses["checkstyle.checks.type.ReturnCheck"] = checkstyle_checks_type_ReturnCheck;
checkstyle_checks_type_ReturnCheck.__name__ = "checkstyle.checks.type.ReturnCheck";
checkstyle_checks_type_ReturnCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_type_ReturnCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	allowEmptyReturn: null
	,enforceReturnType: null
	,enforceReturnTypeForAnonymous: null
	,actualRun: function() {
		var _gthis = this;
		this.forEachField(function(field,parent) {
			if(field.name != "new" && parent.kind != checkstyle_utils_FieldParentKind.INTERFACE) {
				_gthis.checkField(field);
			}
		});
		this.checkInlineFunctions();
	}
	,checkField: function(f) {
		if(this.isPosExtern(f.pos)) {
			return;
		}
		var noReturn = false;
		var _g = f.kind;
		if(_g._hx_index == 1) {
			var fun = _g.f;
			noReturn = fun.ret == null;
			if(this.enforceReturnType && noReturn) {
				this.warnReturnTypeMissing(f.name,f.pos);
				return;
			}
			if(!noReturn) {
				var _g1 = fun.ret;
				if(_g1 != null) {
					if(_g1._hx_index == 0) {
						var val = _g1.p;
						if(!this.enforceReturnType && (val.name == null ? "null" : "" + val.name) == "Void") {
							this.warnVoid(f.name,f.pos);
						}
					}
				}
			}
			this.walkExpr(fun.expr,noReturn,f.name,f.pos);
		}
	}
	,checkInlineFunctions: function() {
		var _gthis = this;
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			var _g = e.expr;
			if(_g._hx_index == 11) {
				var f = _g.f;
				var fname = _g.name;
				var funNoReturn = f.ret == null;
				_gthis.walkExpr(f.expr,funNoReturn,fname,e.pos);
			}
		});
	}
	,walkExpr: function(e,noReturn,name,pos) {
		if(e == null || e.expr == null) {
			return;
		}
		if(!noReturn) {
			return;
		}
		var _g = e.expr;
		switch(_g._hx_index) {
		case 12:
			var exprs = _g.exprs;
			var _g1 = 0;
			while(_g1 < exprs.length) {
				var expr = exprs[_g1];
				++_g1;
				this.walkExpr(expr,noReturn,name,pos);
			}
			break;
		case 13:
			var expr1 = _g.expr;
			var it = _g.it;
			this.walkExpr(expr1,noReturn,name,pos);
			break;
		case 14:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.walkExpr(eif,noReturn,name,pos);
			this.walkExpr(eelse,noReturn,name,pos);
			break;
		case 15:
			var expr2 = _g.e;
			var econd1 = _g.econd;
			this.walkExpr(expr2,noReturn,name,pos);
			break;
		case 16:
			var edef = _g.edef;
			var cases = _g.cases;
			var expr3 = _g.e;
			var _g2 = 0;
			while(_g2 < cases.length) {
				var ecase = cases[_g2];
				++_g2;
				this.walkExpr(ecase.expr,noReturn,name,pos);
			}
			this.walkExpr(edef,noReturn,name,pos);
			break;
		case 17:
			var catches = _g.catches;
			var expr4 = _g.e;
			this.walkExpr(expr4,noReturn,name,pos);
			var _g3 = 0;
			while(_g3 < catches.length) {
				var ecatch = catches[_g3];
				++_g3;
				this.walkExpr(ecatch.expr,noReturn,name,pos);
			}
			break;
		case 18:
			var expr5 = _g.e;
			if(expr5 == null) {
				if(this.allowEmptyReturn) {
					return;
				}
				this.warnEmptyReturn(name,pos);
			} else {
				this.warnReturnTypeMissing(name,pos);
			}
			break;
		default:
		}
	}
	,warnVoid: function(name,pos) {
		this.logPos("Redundant \"Void\" for method \"" + name + "\"",pos);
	}
	,warnEmptyReturn: function(name,pos) {
		this.logPos("Empty return in method \"" + name + "\" found",pos);
	}
	,warnReturnTypeMissing: function(name,pos) {
		if(name == null) {
			if(this.enforceReturnTypeForAnonymous) {
				this.logPos("Return type not specified for anonymous method",pos);
			}
		} else {
			this.logPos("Return type not specified for method \"" + name + "\"",pos);
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "allowEmptyReturn", values : [true,false]},{ propertyName : "enforceReturnTypeForAnonymous", values : [true,false]},{ propertyName : "enforceReturnType", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_type_ReturnCheck
});
var checkstyle_checks_type_TypeCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.ignoreEnumAbstractValues = true;
	this.categories = ["Clarity"];
};
$hxClasses["checkstyle.checks.type.TypeCheck"] = checkstyle_checks_type_TypeCheck;
checkstyle_checks_type_TypeCheck.__name__ = "checkstyle.checks.type.TypeCheck";
checkstyle_checks_type_TypeCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_type_TypeCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	ignoreEnumAbstractValues: null
	,actualRun: function() {
		var _gthis = this;
		this.forEachField(function(f,p) {
			if(f.name == "new") {
				return;
			}
			if(_gthis.ignoreEnumAbstractValues && p.kind == checkstyle_utils_FieldParentKind.ENUM_ABSTRACT && f.access.indexOf(haxe_macro_Access.AStatic) == -1) {
				return;
			}
			var _g = f.kind;
			if(_g._hx_index == 0) {
				var e = _g.e;
				var t = _g.t;
				if(t == null) {
					_gthis.error(f.name,f.pos);
				}
			}
		});
	}
	,error: function(name,pos) {
		this.logPos("Variable \"" + name + "\" type not specified",pos);
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_type_TypeCheck
});
var checkstyle_checks_whitespace_ArrayAccessCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.AST);
	this.spaceBefore = false;
	this.spaceInside = false;
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.ArrayAccessCheck"] = checkstyle_checks_whitespace_ArrayAccessCheck;
checkstyle_checks_whitespace_ArrayAccessCheck.__name__ = "checkstyle.checks.whitespace.ArrayAccessCheck";
checkstyle_checks_whitespace_ArrayAccessCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_whitespace_ArrayAccessCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	spaceBefore: null
	,spaceInside: null
	,actualRun: function() {
		var _gthis = this;
		var lastExpr = null;
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			if(lastExpr == null) {
				lastExpr = e;
				return;
			}
			var _g = e.expr;
			if(_g._hx_index == 1) {
				var e2 = _g.e2;
				var e1 = _g.e1;
				if(!_gthis.spaceBefore) {
					var e1length = e1.pos.max - e1.pos.min;
					var eString = _gthis.checker.getString(e.pos.min,e.pos.max);
					if(HxOverrides.substr(eString,e1length,1) == " ") {
						_gthis.logPos("Space between array and [",e.pos);
					}
				}
				if(!_gthis.spaceInside) {
					if(_gthis.checker.getString(e2.pos.min - 1,e2.pos.min) == " ") {
						_gthis.logPos("Space between [ and index",e.pos);
					}
					if(_gthis.checker.getString(e2.pos.max,e2.pos.max + 1) == " ") {
						_gthis.logPos("Space between index and ]",e.pos);
					}
				}
			}
			lastExpr = e;
		});
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "spaceBefore", values : [true,false]},{ propertyName : "spaceInside", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_whitespace_ArrayAccessCheck
});
var checkstyle_checks_whitespace_LineCheckBase = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.LINE);
	this.commentStartRE = new EReg("/([/*])","");
	this.commentBlockEndRE = new EReg("\\*/","");
	this.stringStartRE = new EReg("['\"]","");
	this.stringInterpolatedEndRE = new EReg("^(?:[^'\\\\]|\\\\\\S)*'","");
	this.stringLiteralEndRE = new EReg("^(?:[^\"\\\\]|\\\\\\S)*\"","");
};
$hxClasses["checkstyle.checks.whitespace.LineCheckBase"] = checkstyle_checks_whitespace_LineCheckBase;
checkstyle_checks_whitespace_LineCheckBase.__name__ = "checkstyle.checks.whitespace.LineCheckBase";
checkstyle_checks_whitespace_LineCheckBase.__super__ = checkstyle_checks_Check;
checkstyle_checks_whitespace_LineCheckBase.prototype = $extend(checkstyle_checks_Check.prototype,{
	currentState: null
	,skipOverInitialQuote: null
	,commentStartRE: null
	,commentBlockEndRE: null
	,stringStartRE: null
	,stringInterpolatedEndRE: null
	,stringLiteralEndRE: null
	,reset: function() {
		checkstyle_checks_Check.prototype.reset.call(this);
		this.currentState = checkstyle_checks_whitespace_RangeType.TEXT;
		this.skipOverInitialQuote = false;
	}
	,getRanges: function(line) {
		var ranges = [];
		var currentStart = 0;
		while(currentStart < line.length) {
			var _g = this.currentState;
			switch(_g._hx_index) {
			case 0:
				currentStart = this.handleTextState(line,ranges,currentStart);
				break;
			case 1:
				var isBlock = _g.isBlock;
				currentStart = this.handleCommentState(line,ranges,currentStart,isBlock);
				break;
			case 2:
				var isInterpolated = _g.isInterpolated;
				currentStart = this.handleStringState(line,ranges,currentStart,isInterpolated);
				break;
			}
		}
		if(line.length == 0) {
			ranges.push({ type : this.currentState, start : 0, end : 0});
		}
		return ranges;
	}
	,handleTextState: function(line,ranges,currentStart) {
		var foundCommentStart = this.commentStartRE.matchSub(line,currentStart);
		var commentStart = foundCommentStart ? this.commentStartRE.matchedPos().pos : line.length;
		var foundStringStart = this.stringStartRE.matchSub(line,currentStart);
		var stringStart = foundStringStart ? this.stringStartRE.matchedPos().pos : line.length;
		if(foundCommentStart && commentStart < stringStart) {
			if(commentStart > currentStart) {
				ranges.push({ type : this.currentState, start : currentStart, end : commentStart});
			}
			this.currentState = checkstyle_checks_whitespace_RangeType.COMMENT(this.commentStartRE.matched(1) == "*");
			return commentStart;
		} else if(foundStringStart && stringStart < commentStart) {
			if(stringStart > currentStart) {
				ranges.push({ type : this.currentState, start : currentStart, end : stringStart});
			}
			this.skipOverInitialQuote = true;
			this.currentState = checkstyle_checks_whitespace_RangeType.STRING(this.stringStartRE.matched(0) == "'");
			return stringStart;
		} else {
			ranges.push({ type : this.currentState, start : currentStart, end : line.length});
			return line.length;
		}
	}
	,handleCommentState: function(line,ranges,currentStart,isBlock) {
		if(isBlock && this.commentBlockEndRE.matchSub(line,currentStart)) {
			var commentEnd = this.commentBlockEndRE.matchedPos().pos + 2;
			ranges.push({ type : this.currentState, start : currentStart, end : commentEnd});
			this.currentState = checkstyle_checks_whitespace_RangeType.TEXT;
			return commentEnd;
		} else {
			ranges.push({ type : this.currentState, start : currentStart, end : line.length});
			if(!isBlock) {
				this.currentState = checkstyle_checks_whitespace_RangeType.TEXT;
			}
			return line.length;
		}
	}
	,handleStringState: function(line,ranges,currentStart,isInterpolated) {
		var adjustedStart = currentStart + (this.skipOverInitialQuote ? 1 : 0);
		this.skipOverInitialQuote = false;
		var re = isInterpolated ? this.stringInterpolatedEndRE : this.stringLiteralEndRE;
		if(re.match(line.substring(adjustedStart))) {
			var matchedPos = re.matchedPos();
			var stringEnd = adjustedStart + matchedPos.pos + matchedPos.len;
			ranges.push({ type : this.currentState, start : currentStart, end : stringEnd});
			this.currentState = checkstyle_checks_whitespace_RangeType.TEXT;
			return stringEnd;
		} else {
			ranges.push({ type : this.currentState, start : currentStart, end : line.length});
			return line.length;
		}
	}
	,__class__: checkstyle_checks_whitespace_LineCheckBase
});
var checkstyle_checks_whitespace_EmptyLinesCheck = function() {
	checkstyle_checks_whitespace_LineCheckBase.call(this);
	this.max = 1;
	this.allowEmptyLineAfterSingleLineComment = true;
	this.allowEmptyLineAfterMultiLineComment = true;
	this.requireEmptyLineAfterPackage = true;
	this.requireEmptyLineAfterClass = true;
	this.requireEmptyLineAfterInterface = true;
	this.requireEmptyLineAfterAbstract = true;
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.EmptyLinesCheck"] = checkstyle_checks_whitespace_EmptyLinesCheck;
checkstyle_checks_whitespace_EmptyLinesCheck.__name__ = "checkstyle.checks.whitespace.EmptyLinesCheck";
checkstyle_checks_whitespace_EmptyLinesCheck.__super__ = checkstyle_checks_whitespace_LineCheckBase;
checkstyle_checks_whitespace_EmptyLinesCheck.prototype = $extend(checkstyle_checks_whitespace_LineCheckBase.prototype,{
	max: null
	,allowEmptyLineAfterSingleLineComment: null
	,allowEmptyLineAfterMultiLineComment: null
	,requireEmptyLineAfterPackage: null
	,requireEmptyLineAfterClass: null
	,requireEmptyLineAfterInterface: null
	,requireEmptyLineAfterAbstract: null
	,actualRun: function() {
		var inGroup = false;
		var isLastLinePackage = false;
		var isLastLineClass = false;
		var isLastLineInterface = false;
		var isLastLineAbstract = false;
		var start = 0;
		var end = 0;
		var _g1 = 0;
		var _g = this.checker.lines.length;
		while(_g1 < _g) {
			var i = _g1++;
			var line = this.checker.lines[i];
			var ranges = this.getRanges(line);
			if(ranges.length == 1) {
				var _g2 = ranges[0].type;
				switch(_g2._hx_index) {
				case 0:
					break;
				case 1:
					var isBlock = _g2.isBlock;
					if(isBlock) {
						continue;
					}
					break;
				case 2:
					var isInterpolated = _g2.isInterpolated;
					continue;
				}
			}
			if(new EReg("^\\s*$","").match(line)) {
				if(!inGroup) {
					inGroup = true;
					start = i;
				}
				end = i;
				if(!this.allowEmptyLineAfterSingleLineComment) {
					this.checkComment(i,start,new EReg("^(//).*$",""));
				}
				if(!this.allowEmptyLineAfterMultiLineComment) {
					this.checkComment(i,start,new EReg("^^(/\\*).*|(\\*/)$",""));
				}
			} else {
				if(inGroup) {
					inGroup = false;
					if(end - start + 1 > this.max) {
						this.logInfo(start);
					}
				}
				if(this.requireEmptyLineAfterPackage && isLastLinePackage) {
					this.log("Empty line required after package declaration",i + 1,0,i + 1,0);
				}
				if(this.requireEmptyLineAfterClass && isLastLineClass) {
					this.log("Empty line required after class declaration",i + 1,0,i + 1,0);
				}
				if(this.requireEmptyLineAfterInterface && isLastLineInterface) {
					this.log("Empty line required after interface declaration",i + 1,0,i + 1,0);
				}
				if(this.requireEmptyLineAfterAbstract && isLastLineAbstract) {
					this.log("Empty line required after abstract declaration",i + 1,0,i + 1,0);
				}
			}
			isLastLinePackage = new EReg("^\\s*package\\s.*?;","").match(line);
			isLastLineClass = new EReg("^\\s*class\\s.*?\\{","").match(line);
			isLastLineInterface = new EReg("^\\s*interface\\s.*?\\{","").match(line);
			isLastLineAbstract = new EReg("^\\s*abstract\\s.*?\\{","").match(line);
		}
		if(inGroup) {
			inGroup = false;
			if(end - start + 1 > this.max) {
				this.logInfo(start);
			}
		}
	}
	,checkComment: function(i,start,regex) {
		var tmp;
		if(i > 0) {
			var tmp1 = StringTools.trim(this.checker.lines[i - 1]);
			tmp = regex.match(tmp1);
		} else {
			tmp = false;
		}
		if(tmp) {
			this.log("Empty line not allowed after comment(s)",start + 1,0,start + 1,0);
		}
	}
	,logInfo: function(pos) {
		this.log("Too many consecutive empty lines (> " + this.max + ")",pos + 1,0,pos + 1,0);
	}
	,detectableInstances: function() {
		return [{ fixed : [{ propertyName : "max", value : 1}], properties : [{ propertyName : "allowEmptyLineAfterSingleLineComment", values : [false,true]},{ propertyName : "allowEmptyLineAfterMultiLineComment", values : [false,true]},{ propertyName : "requireEmptyLineAfterPackage", values : [true,false]},{ propertyName : "requireEmptyLineAfterClass", values : [true,false]},{ propertyName : "requireEmptyLineAfterInterface", values : [true,false]},{ propertyName : "requireEmptyLineAfterAbstract", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_whitespace_EmptyLinesCheck
});
var checkstyle_checks_whitespace_ExtendedEmptyLinesCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.max = 1;
	this.skipSingleLineTypes = true;
	this.defaultPolicy = "upto";
	this.ignore = [];
	this.none = [];
	this.exact = [];
	this.upto = [];
	this.atleast = [];
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.ExtendedEmptyLinesCheck"] = checkstyle_checks_whitespace_ExtendedEmptyLinesCheck;
checkstyle_checks_whitespace_ExtendedEmptyLinesCheck.__name__ = "checkstyle.checks.whitespace.ExtendedEmptyLinesCheck";
checkstyle_checks_whitespace_ExtendedEmptyLinesCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_whitespace_ExtendedEmptyLinesCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	max: null
	,skipSingleLineTypes: null
	,defaultPolicy: null
	,ignore: null
	,none: null
	,exact: null
	,upto: null
	,atleast: null
	,placemap: null
	,buildPolicyMap: function() {
		this.placemap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.ignore;
		while(_g < _g1.length) {
			var place = _g1[_g];
			++_g;
			this.placemap.set(place,"ignore");
		}
		var _g2 = 0;
		var _g11 = this.none;
		while(_g2 < _g11.length) {
			var place1 = _g11[_g2];
			++_g2;
			this.placemap.set(place1,"none");
		}
		var _g3 = 0;
		var _g12 = this.exact;
		while(_g3 < _g12.length) {
			var place2 = _g12[_g3];
			++_g3;
			this.placemap.set(place2,"exact");
		}
		var _g4 = 0;
		var _g13 = this.upto;
		while(_g4 < _g13.length) {
			var place3 = _g13[_g4];
			++_g4;
			this.placemap.set(place3,"upto");
		}
		var _g5 = 0;
		var _g14 = this.atleast;
		while(_g5 < _g14.length) {
			var place4 = _g14[_g5];
			++_g5;
			this.placemap.set(place4,"atleast");
		}
	}
	,getPolicy: function(place) {
		if(this.placemap.exists(place)) {
			return this.placemap.get(place);
		}
		return this.defaultPolicy;
	}
	,isIgnored: function(places) {
		var _g = 0;
		while(_g < places.length) {
			var place = places[_g];
			++_g;
			if(this.getPolicy(place) != "ignore") {
				return false;
			}
		}
		return true;
	}
	,actualRun: function() {
		this.buildPolicyMap();
		var emptyLines = this.detectEmptyLines();
		if(this.max <= 0) {
			this.max = 1;
		}
		this.checkPackages(emptyLines);
		this.checkImports(emptyLines);
		this.checkTypes(emptyLines);
		this.checkFile(emptyLines);
		this.checkFunctions(emptyLines);
		this.checkComments(emptyLines);
	}
	,detectEmptyLines: function() {
		var emptyLines = new checkstyle_checks_whitespace_ListOfEmptyLines();
		var _g1 = 0;
		var _g = this.checker.lines.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(new EReg("^\\s*$","").match(this.checker.lines[index])) {
				emptyLines.add(index);
			}
		}
		return emptyLines;
	}
	,checkPackages: function(emptyLines) {
		if(this.isIgnored(["beforePackage","afterPackage"])) {
			return;
		}
		var root = this.checker.getTokenTree();
		var packages = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdPackage)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < packages.length) {
			var pack = packages[_g];
			++_g;
			this.checkBetweenToken(emptyLines,null,pack,this.getPolicy("beforePackage"),"before package");
			this.checkBetweenToken(emptyLines,pack,pack.nextSibling,this.getPolicy("afterPackage"),"after package");
		}
	}
	,checkImports: function(emptyLines) {
		if(this.isIgnored(["afterImports","beforeUsing","betweenImports"])) {
			return;
		}
		var root = this.checker.getTokenTree();
		var imports = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdImport),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdUsing)],tokentree_TokenFilterMode.ALL);
		if(imports.length <= 0) {
			return;
		}
		var lastImport = imports[imports.length - 1];
		if(lastImport.nextSibling != null) {
			var _g = lastImport.nextSibling.tok;
			if(_g._hx_index == 0) {
				switch(_g.k._hx_index) {
				case 1:case 26:case 27:case 31:case 39:
					this.checkBetweenToken(emptyLines,lastImport,lastImport.nextSibling,this.getPolicy("afterImports"),"after imports/using");
					break;
				default:
				}
			}
		}
		var _g1 = 1;
		var _g2 = imports.length;
		while(_g1 < _g2) {
			var index = _g1++;
			var imp = imports[index];
			var prev = imp.previousSibling;
			if(prev == null) {
				continue;
			}
			if(imp.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdUsing))) {
				if(prev.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdImport))) {
					this.checkBetweenToken(emptyLines,prev,imp,this.getPolicy("beforeUsing"),"between import and using");
					continue;
				}
			} else if(prev.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdUsing))) {
				this.checkBetweenToken(emptyLines,prev,imp,this.getPolicy("beforeUsing"),"between import and using");
				continue;
			}
			var _g21 = prev.tok;
			switch(_g21._hx_index) {
			case 0:
				switch(_g21.k._hx_index) {
				case 13:case 35:
					this.checkBetweenToken(emptyLines,prev,imp,this.getPolicy("betweenImports"),"between imports/using");
					break;
				default:
				}
				break;
			case 6:case 7:
				this.checkBetweenToken(emptyLines,prev,imp,this.getPolicy("betweenImports"),"between imports/using");
				break;
			default:
			}
		}
	}
	,checkTypes: function(emptyLines) {
		var _gthis = this;
		var root = this.checker.getTokenTree();
		var types = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdAbstract),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdClass),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdEnum),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdInterface),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTypedef)],tokentree_TokenFilterMode.FIRST);
		if(types.length <= 0) {
			return;
		}
		this.checkBetweenTypes(emptyLines,types);
		var _g = 0;
		while(_g < types.length) {
			var type = types[_g];
			++_g;
			var pos = type.getPos();
			if(this.skipSingleLineTypes && this.checker.getLinePos(pos.min).line - this.checker.getLinePos(pos.max).line == 0) {
				continue;
			}
			var _g1 = type.tok;
			if(_g1._hx_index == 0) {
				switch(_g1.k._hx_index) {
				case 1:
					this.checkClass(emptyLines,type);
					break;
				case 26:
					if(this.isIgnored(["beginEnum","endEnum","betweenEnumFields","typeDefinition"])) {
						continue;
					}
					this.checkType(emptyLines,type,this.getPolicy("beginEnum"),this.getPolicy("endEnum"),function(child,next) {
						var tmp = _gthis.getPolicy("betweenEnumFields");
						return _gthis.makePolicyAndWhat(tmp,"between type fields");
					});
					break;
				case 27:
					if(this.isIgnored(["beginInterface","endInterface","betweenInterfaceFields","typeDefinition"])) {
						continue;
					}
					this.checkType(emptyLines,type,this.getPolicy("beginInterface"),this.getPolicy("endInterface"),function(child1,next1) {
						var tmp1 = _gthis.getPolicy("betweenInterfaceFields");
						return _gthis.makePolicyAndWhat(tmp1,"between type fields");
					});
					break;
				case 31:
					if(this.isIgnored(["beginTypedef","endTypedef","betweenTypedefFields","typeDefinition"])) {
						continue;
					}
					this.checkType(emptyLines,type,this.getPolicy("beginTypedef"),this.getPolicy("endTypedef"),function(child2,next2) {
						var tmp2 = _gthis.getPolicy("betweenTypedefFields");
						return _gthis.makePolicyAndWhat(tmp2,"between type fields");
					});
					break;
				case 39:
					this.checkAbstract(emptyLines,type);
					break;
				default:
				}
			}
		}
	}
	,checkBetweenTypes: function(emptyLines,types) {
		if(this.isIgnored(["betweenTypes"])) {
			return;
		}
		var _g1 = 1;
		var _g = types.length;
		while(_g1 < _g) {
			var index = _g1++;
			var type = types[index];
			var sibling = type.previousSibling;
			var prevType = types[index - 1];
			if(sibling != null && sibling != prevType) {
				var _g2 = sibling.tok;
				switch(_g2._hx_index) {
				case 6:
					type = sibling;
					break;
				case 7:
					type = sibling;
					break;
				default:
				}
			}
			var prevPos = prevType.getPos();
			if(this.skipSingleLineTypes && this.checker.getLinePos(prevPos.min).line - this.checker.getLinePos(prevPos.max).line == 0) {
				continue;
			}
			var startLine = this.checker.getLinePos(prevPos.max).line;
			var endLine = this.checker.getLinePos(type.getPos().min).line;
			this.checkBetween(emptyLines,startLine,endLine,this.getPolicy("betweenTypes"),"between types");
		}
	}
	,checkAbstract: function(emptyLines,typeToken) {
		var _gthis = this;
		if(this.isIgnored(["beginAbstract","endAbstract","betweenAbstractMethods","afterAbstractVars","betweenAbstractVars","typeDefinition"])) {
			return;
		}
		this.checkType(emptyLines,typeToken,this.getPolicy("beginAbstract"),this.getPolicy("endAbstract"),function(child,next) {
			var isFuncChild = child.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction));
			var isVarChild = child.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar));
			if(!isVarChild && !isFuncChild) {
				return null;
			}
			var type = _gthis.detectNextFieldType(next);
			if(type == checkstyle_checks_whitespace_EmptyLinesFieldType.OTHER) {
				return null;
			}
			if(isFuncChild && type == checkstyle_checks_whitespace_EmptyLinesFieldType.FUNCTION) {
				var tmp = _gthis.getPolicy("betweenAbstractMethods");
				return _gthis.makePolicyAndWhat(tmp,"between abstract functions");
			}
			if(isVarChild && type == checkstyle_checks_whitespace_EmptyLinesFieldType.FUNCTION) {
				var tmp1 = _gthis.getPolicy("afterAbstractVars");
				return _gthis.makePolicyAndWhat(tmp1,"after abstract vars");
			}
			if(isFuncChild && type == checkstyle_checks_whitespace_EmptyLinesFieldType.VAR) {
				var tmp2 = _gthis.getPolicy("afterAbstractVars");
				return _gthis.makePolicyAndWhat(tmp2,"after abstract vars");
			}
			var tmp3 = _gthis.getPolicy("betweenAbstractVars");
			return _gthis.makePolicyAndWhat(tmp3,"between abstract vars");
		});
	}
	,checkClass: function(emptyLines,typeToken) {
		var _gthis = this;
		var places = ["beginClass","endClass","betweenClassMethods","afterClassVars","betweenClassStaticVars","betweenClassVars","afterClassStaticVars","typeDefinition"];
		if(this.isIgnored(places)) {
			return;
		}
		this.checkType(emptyLines,typeToken,this.getPolicy("beginClass"),this.getPolicy("endClass"),function(child,next) {
			while(next != null) {
				if(!next.isComment()) {
					break;
				}
				next = next.nextSibling;
			}
			if(next == null) {
				return null;
			}
			var isFuncChild = child.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction));
			var isVarChild = child.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar));
			if(!isVarChild && !isFuncChild) {
				return null;
			}
			var type = _gthis.detectNextFieldType(next);
			if(type == checkstyle_checks_whitespace_EmptyLinesFieldType.OTHER) {
				return null;
			}
			if(isFuncChild && type == checkstyle_checks_whitespace_EmptyLinesFieldType.FUNCTION) {
				var tmp = _gthis.getPolicy("betweenClassMethods");
				return _gthis.makePolicyAndWhat(tmp,"between class methods");
			}
			if(isVarChild && type == checkstyle_checks_whitespace_EmptyLinesFieldType.FUNCTION) {
				var tmp1 = _gthis.getPolicy("afterClassVars");
				return _gthis.makePolicyAndWhat(tmp1,"after class vars");
			}
			if(isFuncChild && type == checkstyle_checks_whitespace_EmptyLinesFieldType.VAR) {
				var tmp2 = _gthis.getPolicy("afterClassVars");
				return _gthis.makePolicyAndWhat(tmp2,"after class vars");
			}
			var isStaticChild = child.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdStatic)],tokentree_TokenFilterMode.FIRST).length > 0;
			var isStaticNext = next.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdStatic)],tokentree_TokenFilterMode.FIRST).length > 0;
			if(isStaticChild && isStaticNext) {
				var tmp3 = _gthis.getPolicy("betweenClassStaticVars");
				return _gthis.makePolicyAndWhat(tmp3,"between class static vars");
			}
			if(!isStaticChild && !isStaticNext) {
				var tmp4 = _gthis.getPolicy("betweenClassVars");
				return _gthis.makePolicyAndWhat(tmp4,"between class vars");
			}
			var tmp5 = _gthis.getPolicy("afterClassStaticVars");
			return _gthis.makePolicyAndWhat(tmp5,"after class static vars");
		});
	}
	,detectNextFieldType: function(field) {
		if(field.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction))) {
			return checkstyle_checks_whitespace_EmptyLinesFieldType.FUNCTION;
		}
		if(field.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar))) {
			return checkstyle_checks_whitespace_EmptyLinesFieldType.VAR;
		}
		if(!field.isComment()) {
			return checkstyle_checks_whitespace_EmptyLinesFieldType.OTHER;
		}
		var after = field.nextSibling;
		while(after != null) {
			if(after.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction))) {
				return checkstyle_checks_whitespace_EmptyLinesFieldType.FUNCTION;
			}
			if(after.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar))) {
				return checkstyle_checks_whitespace_EmptyLinesFieldType.VAR;
			}
			if(after.isComment()) {
				after = after.nextSibling;
				continue;
			}
			return checkstyle_checks_whitespace_EmptyLinesFieldType.OTHER;
		}
		return checkstyle_checks_whitespace_EmptyLinesFieldType.OTHER;
	}
	,checkType: function(emptyLines,typeToken,beginPolicy,endPolicy,fieldPolicyProvider) {
		var brOpen = this.findTypeBrOpen(typeToken);
		if(brOpen == null) {
			return;
		}
		this.checkBetweenToken(emptyLines,typeToken,brOpen,this.getPolicy("typeDefinition"),"between type definition and left curly");
		var brClose = brOpen.getLastChild();
		var start = this.checker.getLinePos(brOpen.pos.max).line;
		var end = this.checker.getLinePos(brClose.pos.min).line;
		if(start == end) {
			return;
		}
		this.checkLines(emptyLines,beginPolicy,start + 1,start + 1,"after left curly");
		this.checkLines(emptyLines,endPolicy,end - 1,end - 1,"before right curly");
		var _g = 0;
		var _g1 = brOpen.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var _g2 = child.tok;
			switch(_g2._hx_index) {
			case 6:
				break;
			case 7:
				break;
			case 21:
				break;
			default:
				var next = child.nextSibling;
				if(next == null) {
					continue;
				}
				if(next.is(haxeparser_TokenDef.BrClose)) {
					continue;
				}
				var policyAndWhat = fieldPolicyProvider(child,next);
				if(policyAndWhat == null) {
					continue;
				}
				this.checkBetweenFullToken(emptyLines,child,next,policyAndWhat.policy,policyAndWhat.whatMsg);
			}
		}
	}
	,findTypeBrOpen: function(parent) {
		if(parent == null) {
			return null;
		}
		var brOpens = parent.filterCallback(function(tok,depth) {
			var _g = tok.tok;
			if(_g._hx_index == 16) {
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		if(brOpens.length <= 0) {
			return null;
		}
		return brOpens[0];
	}
	,checkFile: function(emptyLines) {
		if(this.isIgnored(["anywhereInFile","beforeFileEnd"])) {
			return;
		}
		var ranges = emptyLines.getRanges(0,this.checker.lines.length);
		var _g = 0;
		while(_g < ranges.length) {
			var range = ranges[_g];
			++_g;
			var line = 0;
			switch(range._hx_index) {
			case 0:
				break;
			case 1:
				var l = range.line;
				line = l;
				break;
			case 2:
				var end = range.end;
				var start = range.start;
				line = end;
				break;
			}
			var result = emptyLines.checkRange(this.getPolicy("anywhereInFile"),this.max,range,line);
			this.logEmptyRange(this.getPolicy("anywhereInFile"),"anywhere in file",result);
		}
		var range1 = checkstyle_checks_whitespace_EmptyLineRange.NONE;
		if(ranges.length > 0) {
			var lastRange = ranges[ranges.length - 1];
			switch(lastRange._hx_index) {
			case 0:
				break;
			case 1:
				var line1 = lastRange.line;
				if(line1 == this.checker.lines.length - 1) {
					range1 = lastRange;
				}
				break;
			case 2:
				var end1 = lastRange.end;
				var start1 = lastRange.start;
				if(end1 == this.checker.lines.length - 1) {
					range1 = lastRange;
				}
				break;
			}
		}
		var result1 = emptyLines.checkRange(this.getPolicy("beforeFileEnd"),this.max,range1,this.checker.lines.length - 1);
		this.logEmptyRange(this.getPolicy("beforeFileEnd"),"before file end",result1);
	}
	,checkFunctions: function(emptyLines) {
		if(this.isIgnored(["inFunction","afterLeftCurly","beforeRightCurly"])) {
			return;
		}
		var root = this.checker.getTokenTree();
		var funcs = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)],tokentree_TokenFilterMode.ALL);
		if(funcs.length <= 0) {
			return;
		}
		var _g = 0;
		while(_g < funcs.length) {
			var func = funcs[_g];
			++_g;
			var pos = func.getPos();
			var start = this.checker.getLinePos(pos.min).line;
			var end = this.checker.getLinePos(pos.max).line;
			this.checkLines(emptyLines,this.getPolicy("inFunction"),start,end,"inside functions",true);
			var brOpen = func.filter([haxeparser_TokenDef.BrOpen],tokentree_TokenFilterMode.ALL);
			var _g1 = 0;
			while(_g1 < brOpen.length) {
				var open = brOpen[_g1];
				++_g1;
				var close = open.getLastChild();
				if(close == null) {
					continue;
				}
				var start1 = this.checker.getLinePos(open.pos.max).line;
				var end1 = this.checker.getLinePos(close.pos.min).line;
				if(start1 == end1) {
					continue;
				}
				this.checkLines(emptyLines,this.getPolicy("afterLeftCurly"),start1 + 1,start1 + 1,"after left curly");
				this.checkLines(emptyLines,this.getPolicy("beforeRightCurly"),end1 - 1,end1 - 1,"before right curly");
			}
		}
	}
	,checkComments: function(emptyLines) {
		if(this.isIgnored(["afterMultiLineComment","afterSingleLineComment"])) {
			return;
		}
		var root = this.checker.getTokenTree();
		var comments = root.filterCallback(function(tok,depth) {
			var _g = tok.tok;
			switch(_g._hx_index) {
			case 6:
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			case 7:
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			default:
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g1 = 0;
		while(_g1 < comments.length) {
			var comment = comments[_g1];
			++_g1;
			var line = this.checker.getLinePos(comment.pos.min).line;
			if(!new EReg("^\\s*(//|/\\*)","").match(this.checker.lines[line])) {
				continue;
			}
			line = this.checker.getLinePos(comment.getPos().max).line + 1;
			var _g11 = comment.tok;
			switch(_g11._hx_index) {
			case 6:
				if(comment.nextSibling != null && comment.nextSibling.isComment()) {
					continue;
				}
				this.checkLines(emptyLines,this.getPolicy("afterMultiLineComment"),line,line,"after comment");
				break;
			case 7:
				if(comment.nextSibling != null && comment.nextSibling.isComment()) {
					continue;
				}
				this.checkLines(emptyLines,this.getPolicy("afterSingleLineComment"),line,line,"after comment");
				break;
			default:
			}
		}
	}
	,checkLines: function(emptyLines,policy,start,end,whatMsg,tolerateEmptyRange) {
		if(tolerateEmptyRange == null) {
			tolerateEmptyRange = false;
		}
		var ranges = emptyLines.getRanges(start,end);
		if(!tolerateEmptyRange && ranges.length <= 0) {
			ranges = [checkstyle_checks_whitespace_EmptyLineRange.NONE];
		}
		var _g = 0;
		while(_g < ranges.length) {
			var range = ranges[_g];
			++_g;
			var result = emptyLines.checkRange(policy,this.max,range,end);
			this.logEmptyRange(policy,whatMsg,result);
		}
	}
	,checkBetweenFullToken: function(emptyLines,firstToken,secondToken,policy,whatMsg) {
		var lineStart = 0;
		var lineEnd = this.checker.lines.length;
		if(firstToken != null) {
			lineStart = this.checker.getLinePos(firstToken.getPos().max).line;
		}
		if(secondToken != null) {
			lineEnd = this.checker.getLinePos(secondToken.getPos().min).line;
		}
		this.checkBetween(emptyLines,lineStart,lineEnd,policy,whatMsg);
	}
	,checkBetweenToken: function(emptyLines,firstToken,secondToken,policy,whatMsg) {
		var lineStart = 0;
		var lineEnd = this.checker.lines.length;
		if(firstToken != null) {
			lineStart = this.checker.getLinePos(firstToken.pos.max).line;
		}
		if(secondToken != null) {
			lineEnd = this.checker.getLinePos(secondToken.pos.min).line;
		}
		this.checkBetween(emptyLines,lineStart,lineEnd,policy,whatMsg);
	}
	,checkBetween: function(emptyLines,lineStart,lineEnd,policy,whatMsg) {
		if(lineStart < 0) {
			lineStart = 0;
		}
		if(lineEnd < 0) {
			lineEnd = this.checker.lines.length;
		}
		var result = emptyLines.checkPolicySingleRange(policy,this.max,lineStart,lineEnd);
		this.logEmptyRange(policy,whatMsg,result);
	}
	,makePolicyAndWhat: function(policy,whatMsg) {
		return { policy : policy, whatMsg : whatMsg};
	}
	,logEmptyRange: function(policy,whatMsg,range) {
		if(range == null) {
			return;
		}
		switch(range._hx_index) {
		case 0:
			break;
		case 1:
			var line = range.line;
			if(this.isLineSuppressed(line)) {
				return;
			}
			this.log(this.formatMessage(policy,whatMsg),line + 1,0,line + 1,0);
			break;
		case 2:
			var end = range.end;
			var start = range.start;
			if(this.isLineSuppressed(start)) {
				return;
			}
			this.log(this.formatMessage(policy,whatMsg),start + 1,0,end + 1,0);
			break;
		}
	}
	,formatMessage: function(policy,what) {
		var line = "lines";
		if(this.max == 1) {
			line = "line";
		}
		switch(policy) {
		case "atleast":
			return "should have at least " + this.max + " empty " + line + " " + what;
		case "exact":
			return "should have exactly " + this.max + " empty " + line + " " + what;
		case "ignore":
			return "ignored empty lines " + what;
		case "none":
			return "should not have empty line(s) " + what;
		case "upto":
			return "should have upto " + this.max + " empty " + line + " " + what;
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [{ propertyName : "max", value : 1}], properties : [{ "propertyName" : "skipSingleLineTypes", "values" : [false,true]},{ "propertyName" : "defaultPolicy", "values" : ["none","exact","upto","atleast","ignore"]},{ "propertyName" : "none", "values" : [["beforePackage","betweenImports","beforeUsing","typeDefinition","afterLeftCurly","beforeRightCurly"]]}]}];
	}
	,__class__: checkstyle_checks_whitespace_ExtendedEmptyLinesCheck
});
var checkstyle_checks_whitespace_EmptyLinesFieldType = $hxEnums["checkstyle.checks.whitespace.EmptyLinesFieldType"] = { __ename__ : true, __constructs__ : ["VAR","FUNCTION","OTHER"]
	,VAR: {_hx_index:0,__enum__:"checkstyle.checks.whitespace.EmptyLinesFieldType",toString:$estr}
	,FUNCTION: {_hx_index:1,__enum__:"checkstyle.checks.whitespace.EmptyLinesFieldType",toString:$estr}
	,OTHER: {_hx_index:2,__enum__:"checkstyle.checks.whitespace.EmptyLinesFieldType",toString:$estr}
};
var checkstyle_checks_whitespace_IndentationCharacterCheck = function() {
	checkstyle_checks_whitespace_LineCheckBase.call(this);
	this.severity = "IGNORE";
	this.character = "tab";
	this.ignorePattern = "^$";
};
$hxClasses["checkstyle.checks.whitespace.IndentationCharacterCheck"] = checkstyle_checks_whitespace_IndentationCharacterCheck;
checkstyle_checks_whitespace_IndentationCharacterCheck.__name__ = "checkstyle.checks.whitespace.IndentationCharacterCheck";
checkstyle_checks_whitespace_IndentationCharacterCheck.__super__ = checkstyle_checks_whitespace_LineCheckBase;
checkstyle_checks_whitespace_IndentationCharacterCheck.prototype = $extend(checkstyle_checks_whitespace_LineCheckBase.prototype,{
	character: null
	,ignorePattern: null
	,actualRun: function() {
		var ignoreRE = new EReg(this.ignorePattern,"");
		var re = this.character == "tab" ? new EReg("^\t*(\\S.*| \\*.*)?$","") : new EReg("^ *(\\S.*)?$","");
		var _g1 = 0;
		var _g = this.checker.lines.length;
		while(_g1 < _g) {
			var i = _g1++;
			var line = this.checker.lines[i];
			var ranges = this.getRanges(line);
			var startTextRange = ranges.filter(function(r) {
				if(r.type == checkstyle_checks_whitespace_RangeType.TEXT) {
					return r.start == 0;
				} else {
					return false;
				}
			})[0];
			if(startTextRange == null) {
				continue;
			}
			var startText = line.substring(startTextRange.start,startTextRange.end);
			if(ignoreRE.match(line) || this.isLineSuppressed(i)) {
				continue;
			}
			if(!re.match(startText)) {
				this.log("Wrong indentation character (should be " + this.character + ")",i + 1,0,i + 1,0);
			}
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "character", values : ["space","tab"]}]}];
	}
	,__class__: checkstyle_checks_whitespace_IndentationCharacterCheck
});
var checkstyle_checks_whitespace_IndentationCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.character = "tab";
	this.ignoreConditionals = false;
	this.ignoreComments = true;
	this.wrapPolicy = "larger";
	this.conditionalPolicy = "aligned";
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.IndentationCheck"] = checkstyle_checks_whitespace_IndentationCheck;
checkstyle_checks_whitespace_IndentationCheck.__name__ = "checkstyle.checks.whitespace.IndentationCheck";
checkstyle_checks_whitespace_IndentationCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_whitespace_IndentationCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	character: null
	,ignoreConditionals: null
	,conditionalPolicy: null
	,ignoreComments: null
	,wrapPolicy: null
	,actualRun: function() {
		var lineIndentation = this.calcLineIndentation();
		var wrappedStatements = this.calcWrapStatements();
		var tolerateViolations = this.calcIgnoreLineIndentation();
		var ignoreCond = this.ignoreConditionals;
		if(this.conditionalPolicy == "ignore") {
			ignoreCond = true;
		}
		this.correctWrappedIndentation(lineIndentation,wrappedStatements);
		var splitChar = this.character;
		if(splitChar == "tab") {
			splitChar = "\t";
		}
		var _g1 = 0;
		var _g = this.checker.lines.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.isLineSuppressed(i)) {
				continue;
			}
			var line = this.checker.lines[i];
			if(new EReg("^\\s*$","").match(line)) {
				continue;
			}
			if(ignoreCond && new EReg("^\\s*#","").match(line)) {
				continue;
			}
			var e = new EReg("^(\\s*)","");
			e.match(line);
			var matched = e.matched(0);
			var actual = matched.split(splitChar).length - 1;
			var expected = lineIndentation[i];
			this.logMsg(expected,actual,tolerateViolations[i],wrappedStatements[i],i,matched.length);
		}
	}
	,logMsg: function(expected,actual,tolerate,wrapped,line,length) {
		if(actual == expected) {
			return;
		}
		if(tolerate) {
			return;
		}
		if(wrapped) {
			var _g = this.wrapPolicy;
			switch(_g) {
			case "exact":
				break;
			case "larger":
				if(actual >= expected) {
					return;
				}
				break;
			case "none":
				break;
			}
		}
		var expectedText = this.buildReadableIndentCount(expected);
		var actualText = this.buildReadableIndentCount(actual);
		this.log("Indentation mismatch: expected: " + expectedText + ", actual: " + actualText,line + 1,0,line + 1,length);
	}
	,buildReadableIndentCount: function(count) {
		if(count == 0) {
			return "no indentation";
		}
		var indent = "";
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			indent += this.character;
		}
		indent = indent.split("tab").join("\\t");
		return "\"" + indent + "\"[" + count + "]";
	}
	,correctWrappedIndentation: function(lineIndentation,wrappedStatements) {
		if(this.wrapPolicy == "none") {
			return;
		}
		var currentIndent = 0;
		var _g1 = 0;
		var _g = lineIndentation.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!wrappedStatements[i]) {
				currentIndent = lineIndentation[i];
				continue;
			}
			if(currentIndent < lineIndentation[i]) {
				currentIndent = -1;
				continue;
			}
			if(currentIndent == lineIndentation[i]) {
				lineIndentation[i]++;
			}
		}
	}
	,calcLineIndentation: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.checker.lines.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0);
		}
		var lineIndentation = _g;
		var searchFor = [haxeparser_TokenDef.BrOpen,haxeparser_TokenDef.BkOpen,haxeparser_TokenDef.Sharp("if"),haxeparser_TokenDef.Sharp("else"),haxeparser_TokenDef.Sharp("elseif"),haxeparser_TokenDef.Sharp("end"),haxeparser_TokenDef.Sharp("error"),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdIf),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFor),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdWhile),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCase),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDefault)];
		var tokenList = this.checker.getTokenTree().filter(searchFor,tokentree_TokenFilterMode.ALL);
		var _g11 = 0;
		while(_g11 < tokenList.length) {
			var token = tokenList[_g11];
			++_g11;
			var _g21 = token.tok;
			switch(_g21._hx_index) {
			case 0:
				switch(_g21.k._hx_index) {
				case 0:
					this.calcLineIndentationFunction(token,lineIndentation);
					break;
				case 3:case 4:
					this.calcLineIndentationIf(token,lineIndentation);
					break;
				case 5:case 6:case 7:
					this.calcLineIndentationLoops(token,lineIndentation);
					break;
				case 15:
					var child = token.getLastChild();
					if(child == null) {
						continue;
					}
					this.increaseRangeIndent(child.getPos(),lineIndentation);
					break;
				case 16:
					var child1 = token.getLastChild();
					if(child1 == null) {
						continue;
					}
					this.increaseRangeIndent(child1.getPos(),lineIndentation);
					break;
				default:
				}
				break;
			case 2:
				this.calcLineIndentationSharp(token,lineIndentation);
				break;
			case 14:
				this.calcLineIndentationBkOpen(token,lineIndentation);
				break;
			case 16:
				this.increaseBlockIndent(token,lineIndentation);
				break;
			default:
			}
		}
		return lineIndentation;
	}
	,calcLineIndentationBkOpen: function(token,lineIndentation) {
		var child = token.getFirstChild();
		if(child == null) {
			return;
		}
		if(child.is(haxeparser_TokenDef.BrOpen) || child.is(haxeparser_TokenDef.BkOpen)) {
			if(token.pos.min + 1 == child.pos.min) {
				return;
			}
		}
		this.increaseBlockIndent(token,lineIndentation);
	}
	,calcLineIndentationFunction: function(token,lineIndentation) {
		var body = tokentree_TokenTreeAccessHelper.access(token).firstChild().lastChild().token;
		if(body == null) {
			return;
		}
		if(body.is(haxeparser_TokenDef.BrOpen)) {
			return;
		}
		this.increaseIndentIfNextLine(token,body,lineIndentation);
	}
	,calcLineIndentationIf: function(token,lineIndentation) {
		var _g = token.tok;
		if(_g._hx_index == 0) {
			switch(_g.k._hx_index) {
			case 3:
				var child = token.getLastChild();
				if(child == null) {
					return;
				}
				if(child.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse))) {
					child = token.children[token.children.length - 2];
				}
				if(child.is(haxeparser_TokenDef.BrOpen)) {
					return;
				}
				this.increaseIndentIfNextLine(token,child,lineIndentation);
				break;
			case 4:
				var child1 = token.getFirstChild();
				if(child1 == null) {
					return;
				}
				if(child1.is(haxeparser_TokenDef.BrOpen)) {
					return;
				}
				this.increaseIndentIfNextLine(token,child1,lineIndentation);
				break;
			default:
			}
		}
	}
	,calcLineIndentationSharp: function(token,lineIndentation) {
		var linePos = this.checker.getLinePos(token.pos.min);
		var line = this.checker.lines[linePos.line];
		var prefix = HxOverrides.substr(line,0,linePos.ofs + 1);
		var isFirst = new EReg("^\\s*#$","").match(prefix);
		var _g = this.conditionalPolicy;
		switch(_g) {
		case "aligned":
			return;
		case "aligned_increase":
			break;
		case "fixed_zero":
			if(!isFirst) {
				return;
			}
			lineIndentation[linePos.line] = 0;
			return;
		case "ignore":
			return;
		}
		var _g1 = token.tok;
		if(_g1._hx_index == 2) {
			switch(_g1.s) {
			case "end":
				break;
			case "error":
				break;
			case "else":case "elseif":case "if":
				var _g11 = 0;
				var _g2 = token.children;
				while(_g11 < _g2.length) {
					var child = _g2[_g11];
					++_g11;
					var _g3 = child.tok;
					if(_g3._hx_index == 2) {
						this.increaseIndentBetween(token,child,lineIndentation);
						return;
					}
				}
				break;
			default:
			}
		}
	}
	,calcLineIndentationLoops: function(token,lineIndentation) {
		var _g = token.tok;
		if(_g._hx_index == 0) {
			switch(_g.k._hx_index) {
			case 5:
				var child = token.getLastChild();
				if(child == null) {
					return;
				}
				if(child.is(haxeparser_TokenDef.BrOpen)) {
					return;
				}
				this.increaseIndentIfNextLine(token,child,lineIndentation);
				break;
			case 6:
				var child1 = token.getFirstChild();
				if(child1 == null) {
					return;
				}
				if(child1.is(haxeparser_TokenDef.BrOpen)) {
					return;
				}
				this.increaseIndentIfNextLine(token,child1,lineIndentation);
				break;
			case 7:
				var child2 = token.getLastChild();
				if(child2 == null) {
					return;
				}
				if(child2.is(haxeparser_TokenDef.BrOpen)) {
					return;
				}
				this.increaseIndentIfNextLine(token,child2,lineIndentation);
				break;
			default:
			}
		}
	}
	,calcWrapStatements: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.checker.lines.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(false);
		}
		var wrapped = _g;
		var searchFor = [haxeparser_TokenDef.POpen,haxeparser_TokenDef.Dot,haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdReturn),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCase),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAdd)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpSub)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMult)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpDiv)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMod)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShl)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpUShr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpOr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAnd)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpXor))];
		var tokenList = this.checker.getTokenTree().filter(searchFor,tokentree_TokenFilterMode.ALL);
		var _g11 = 0;
		while(_g11 < tokenList.length) {
			var token = tokenList[_g11];
			++_g11;
			var pos = token.getPos();
			var child = token.getFirstChild();
			if(child == null) {
				continue;
			}
			if(token.is(haxeparser_TokenDef.Dot)) {
				pos = token.parent.getPos();
			}
			if(child.is(haxeparser_TokenDef.BkOpen)) {
				continue;
			}
			this.ignoreRange(pos,wrapped);
		}
		return wrapped;
	}
	,calcIgnoreLineIndentation: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.checker.lines.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(false);
		}
		var ignoreIndentation = _g;
		var tokenList = this.checker.getTokenTree().filterCallback(function(token,depth) {
			if(token.tok == null) {
				return tokentree_FilterResult.GO_DEEPER;
			}
			var _g11 = token.tok;
			switch(_g11._hx_index) {
			case 1:
				if(_g11.c._hx_index == 2) {
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
				break;
			case 6:
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			case 7:
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			default:
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		var _g12 = 0;
		while(_g12 < tokenList.length) {
			var token1 = tokenList[_g12];
			++_g12;
			var _g21 = token1.tok;
			switch(_g21._hx_index) {
			case 1:
				if(_g21.c._hx_index == 2) {
					this.ignoreRange(token1.getPos(),ignoreIndentation);
				}
				break;
			case 6:
				if(this.ignoreComments) {
					this.ignoreRange(token1.getPos(),ignoreIndentation,false);
				}
				break;
			case 7:
				if(!this.ignoreComments) {
					continue;
				}
				var lineIndex = this.checker.getLinePos(token1.pos.min).line;
				var line = this.checker.lines[lineIndex];
				if(new EReg("^\\s*//","").match(line)) {
					ignoreIndentation[lineIndex] = true;
				}
				break;
			default:
			}
		}
		return ignoreIndentation;
	}
	,increaseBlockIndent: function(blockStart,lineIndentation) {
		this.increaseIndentBetween(blockStart,blockStart.getLastChild(),lineIndentation);
	}
	,increaseIndentBetween: function(blockStart,blockEnd,lineIndentation) {
		if(blockEnd == null) {
			return;
		}
		var start = this.checker.getLinePos(blockStart.pos.min).line + 1;
		var end = this.checker.getLinePos(blockEnd.pos.min).line;
		this.increaseIndent(lineIndentation,start,end);
	}
	,increaseRangeIndent: function(pos,lineIndentation) {
		var start = this.checker.getLinePos(pos.min).line + 1;
		var end = this.checker.getLinePos(pos.max).line + 1;
		this.increaseIndent(lineIndentation,start,end);
	}
	,increaseIndentIfNextLine: function(parent,child,lineIndentation) {
		if(child == null) {
			return;
		}
		var parentLine = this.checker.getLinePos(parent.pos.min).line;
		var childLine = this.checker.getLinePos(child.pos.min).line;
		if(parentLine == childLine) {
			return;
		}
		lineIndentation[childLine]++;
	}
	,ignoreRange: function(pos,ignoreIndentation,excludeStartLine) {
		if(excludeStartLine == null) {
			excludeStartLine = true;
		}
		var start = this.checker.getLinePos(pos.min).line;
		if(excludeStartLine) {
			++start;
		}
		var end = this.checker.getLinePos(pos.max).line + 1;
		var _g1 = start;
		var _g = end;
		while(_g1 < _g) {
			var i = _g1++;
			ignoreIndentation[i] = true;
		}
	}
	,increaseIndent: function(lineIndentation,start,end) {
		var _g1 = start;
		var _g = end;
		while(_g1 < _g) {
			var i = _g1++;
			lineIndentation[i]++;
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "character", values : ["tab","        ","       ","      ","     ","    ","   ","  "," "]},{ propertyName : "conditionalPolicy", values : ["fixed_zero","aligned","aligned_increase","ignore"]},{ propertyName : "ignoreConditionals", values : [true,false]},{ propertyName : "ignoreComments", values : [true,false]},{ propertyName : "wrapPolicy", values : ["none","exact","larger"]}]}];
	}
	,__class__: checkstyle_checks_whitespace_IndentationCheck
});
var checkstyle_checks_whitespace_RangeType = $hxEnums["checkstyle.checks.whitespace.RangeType"] = { __ename__ : true, __constructs__ : ["TEXT","COMMENT","STRING"]
	,TEXT: {_hx_index:0,__enum__:"checkstyle.checks.whitespace.RangeType",toString:$estr}
	,COMMENT: ($_=function(isBlock) { return {_hx_index:1,isBlock:isBlock,__enum__:"checkstyle.checks.whitespace.RangeType",toString:$estr}; },$_.__params__ = ["isBlock"],$_)
	,STRING: ($_=function(isInterpolated) { return {_hx_index:2,isInterpolated:isInterpolated,__enum__:"checkstyle.checks.whitespace.RangeType",toString:$estr}; },$_.__params__ = ["isInterpolated"],$_)
};
var checkstyle_checks_whitespace_ListOfEmptyLines = function() {
	this.lines = [];
	this.lineRanges = null;
};
$hxClasses["checkstyle.checks.whitespace.ListOfEmptyLines"] = checkstyle_checks_whitespace_ListOfEmptyLines;
checkstyle_checks_whitespace_ListOfEmptyLines.__name__ = "checkstyle.checks.whitespace.ListOfEmptyLines";
checkstyle_checks_whitespace_ListOfEmptyLines.prototype = {
	lines: null
	,lineRanges: null
	,add: function(line) {
		this.lines.push(line);
	}
	,checkRange: function(policy,max,range,line) {
		switch(policy) {
		case "atleast":
			return this.checkRangeAtLeast(range,max,line);
		case "exact":
			return this.checkRangeExact(range,max,line);
		case "ignore":
			return checkstyle_checks_whitespace_EmptyLineRange.NONE;
		case "none":
			return range;
		case "upto":
			return this.checkRangeUpto(range,max,line);
		}
	}
	,checkRangeExact: function(range,max,line) {
		switch(range._hx_index) {
		case 0:
			return checkstyle_checks_whitespace_EmptyLineRange.SINGLE(line);
		case 1:
			var l = range.line;
			if(max == 1) {
				return checkstyle_checks_whitespace_EmptyLineRange.NONE;
			}
			break;
		case 2:
			var rangeEnd = range.end;
			var rangeStart = range.start;
			if(1 + rangeEnd - rangeStart == max) {
				return checkstyle_checks_whitespace_EmptyLineRange.NONE;
			}
			break;
		}
		return range;
	}
	,checkRangeUpto: function(range,max,line) {
		switch(range._hx_index) {
		case 0:
			return checkstyle_checks_whitespace_EmptyLineRange.NONE;
		case 1:
			var l = range.line;
			if(max >= 1) {
				return checkstyle_checks_whitespace_EmptyLineRange.NONE;
			}
			break;
		case 2:
			var rangeEnd = range.end;
			var rangeStart = range.start;
			if(1 + rangeEnd - rangeStart <= max) {
				return checkstyle_checks_whitespace_EmptyLineRange.NONE;
			}
			break;
		}
		return range;
	}
	,checkRangeAtLeast: function(range,max,line) {
		switch(range._hx_index) {
		case 0:
			return checkstyle_checks_whitespace_EmptyLineRange.SINGLE(line);
		case 1:
			var l = range.line;
			if(max == 1) {
				return checkstyle_checks_whitespace_EmptyLineRange.NONE;
			}
			break;
		case 2:
			var rangeEnd = range.end;
			var rangeStart = range.start;
			if(1 + rangeEnd - rangeStart >= max) {
				return checkstyle_checks_whitespace_EmptyLineRange.NONE;
			}
			break;
		}
		return range;
	}
	,checkPolicySingleRange: function(policy,max,start,end) {
		if(start > end) {
			throw new js__$Boot_HaxeError("*** wrong order!! *** " + start + " " + end);
		}
		var range = this.getRanges(start,end);
		switch(policy) {
		case "atleast":
			if(range.length <= 0) {
				return checkstyle_checks_whitespace_EmptyLineRange.SINGLE(start);
			}
			if(range.length > 1) {
				return range[0];
			}
			return this.checkRangeAtLeast(range[0],max,start);
		case "exact":
			if(range.length <= 0) {
				return checkstyle_checks_whitespace_EmptyLineRange.SINGLE(end);
			}
			if(range.length != 1) {
				return range[0];
			}
			return this.checkRangeExact(range[0],max,end);
		case "ignore":
			return checkstyle_checks_whitespace_EmptyLineRange.NONE;
		case "none":
			if(range.length == 0) {
				return checkstyle_checks_whitespace_EmptyLineRange.NONE;
			}
			return range[0];
		case "upto":
			if(range.length <= 0) {
				return checkstyle_checks_whitespace_EmptyLineRange.NONE;
			}
			if(range.length > 1) {
				return range[0];
			}
			return this.checkRangeUpto(range[0],max,end);
		}
	}
	,getRanges: function(startLine,endLine) {
		if(this.lineRanges == null) {
			this.lineRanges = this.makeRanges();
		}
		var results = [];
		var _g = 0;
		var _g1 = this.lineRanges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			switch(range._hx_index) {
			case 0:
				break;
			case 1:
				var line = range.line;
				if(startLine <= line && line <= endLine) {
					results.push(range);
				}
				break;
			case 2:
				var end = range.end;
				var start = range.start;
				if(end >= startLine && start <= endLine) {
					results.push(range);
				}
				break;
			}
		}
		return results;
	}
	,makeRanges: function() {
		var results = [];
		if(this.lines.length <= 0) {
			return [];
		}
		var start = this.lines[0];
		var current = start;
		var _g1 = 1;
		var _g = this.lines.length;
		while(_g1 < _g) {
			var index = _g1++;
			var val = this.lines[index];
			if(val == current + 1) {
				current = val;
				continue;
			}
			if(current == start) {
				results.push(checkstyle_checks_whitespace_EmptyLineRange.SINGLE(start));
			} else {
				results.push(checkstyle_checks_whitespace_EmptyLineRange.RANGE(start,current));
			}
			start = val;
			current = val;
		}
		if(current == start) {
			results.push(checkstyle_checks_whitespace_EmptyLineRange.SINGLE(start));
		} else {
			results.push(checkstyle_checks_whitespace_EmptyLineRange.RANGE(start,current));
		}
		return results;
	}
	,toString: function() {
		return this.lineRanges.toString();
	}
	,__class__: checkstyle_checks_whitespace_ListOfEmptyLines
};
var checkstyle_checks_whitespace_EmptyLineRange = $hxEnums["checkstyle.checks.whitespace.EmptyLineRange"] = { __ename__ : true, __constructs__ : ["NONE","SINGLE","RANGE"]
	,NONE: {_hx_index:0,__enum__:"checkstyle.checks.whitespace.EmptyLineRange",toString:$estr}
	,SINGLE: ($_=function(line) { return {_hx_index:1,line:line,__enum__:"checkstyle.checks.whitespace.EmptyLineRange",toString:$estr}; },$_.__params__ = ["line"],$_)
	,RANGE: ($_=function(start,end) { return {_hx_index:2,start:start,end:end,__enum__:"checkstyle.checks.whitespace.EmptyLineRange",toString:$estr}; },$_.__params__ = ["start","end"],$_)
};
var checkstyle_checks_whitespace_WhitespaceCheckBase = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.WhitespaceCheckBase"] = checkstyle_checks_whitespace_WhitespaceCheckBase;
checkstyle_checks_whitespace_WhitespaceCheckBase.__name__ = "checkstyle.checks.whitespace.WhitespaceCheckBase";
checkstyle_checks_whitespace_WhitespaceCheckBase.__super__ = checkstyle_checks_Check;
checkstyle_checks_whitespace_WhitespaceCheckBase.prototype = $extend(checkstyle_checks_Check.prototype,{
	checkTokens: function(root,tokens,policy) {
		if(policy == null || policy == "ignore") {
			return;
		}
		var tokenList = root.filter(tokens,tokentree_TokenFilterMode.ALL);
		this.checkTokenList(tokenList,policy);
	}
	,checkTokenList: function(tokens,policy) {
		var _g = 0;
		while(_g < tokens.length) {
			var token = tokens[_g];
			++_g;
			if(this.isPosSuppressed(token.pos)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.isImportMult(token)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.isTypeParameter(token)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.filterOpSub(token)) {
				continue;
			}
			this.checkWhitespace(token,policy);
		}
	}
	,checkWhitespace: function(tok,policy) {
		var _gthis = this;
		this.checkWhitespaceExt(tok,function(before,after) {
			switch(policy) {
			case "after":
				if(!before && after) {
					return;
				}
				break;
			case "around":
				if(before && after) {
					return;
				}
				break;
			case "before":
				if(before && !after) {
					return;
				}
				break;
			case "none":
				if(!before && !after) {
					return;
				}
				break;
			default:
				return;
			}
			_gthis.violation(tok,Std.string(policy));
		});
	}
	,checkUnaryWhitespace: function(tok,policy) {
		var _gthis = this;
		var leftSide = tokentree_utils_TokenTreeCheckUtils.isUnaryLeftSided(tok);
		this.checkWhitespaceExt(tok,function(before,after) {
			switch(policy) {
			case "inner":
				if(leftSide && after) {
					return;
				}
				if(!leftSide && before) {
					return;
				}
				break;
			case "none":
				if(leftSide && !after) {
					return;
				}
				if(!leftSide && !before) {
					return;
				}
				break;
			default:
				return;
			}
			_gthis.violation(tok,Std.string(policy));
		});
	}
	,checkWhitespaceExt: function(tok,checkCallback) {
		var linePos = this.checker.getLinePos(tok.pos.min);
		var tokLen = tok.toString().length;
		var _g = tok.tok;
		if(_g._hx_index == 8) {
			linePos = this.checker.getLinePos(tok.pos.max - 3);
			tokLen = 3;
		}
		var line = haxe_io_Bytes.ofString(this.checker.lines[linePos.line]);
		var before = line.sub(0,linePos.ofs).toString();
		var offs = linePos.ofs + tokLen;
		var after = line.sub(offs,line.length - offs).toString();
		var whitespaceBefore = new EReg("^(.*\\s|)$","").match(before);
		var whitespaceAfter = new EReg("^(\\s.*|)$","").match(after);
		checkCallback(whitespaceBefore,whitespaceAfter);
	}
	,violation: function(tok,policy) {
	}
	,__class__: checkstyle_checks_whitespace_WhitespaceCheckBase
});
var checkstyle_checks_whitespace_OperatorWhitespaceCheck = function() {
	checkstyle_checks_whitespace_WhitespaceCheckBase.call(this);
	this.assignOpPolicy = "around";
	this.unaryOpPolicy = "none";
	this.ternaryOpPolicy = "around";
	this.arithmeticOpPolicy = "around";
	this.compareOpPolicy = "around";
	this.bitwiseOpPolicy = "around";
	this.boolOpPolicy = "around";
	this.intervalOpPolicy = "none";
	this.arrowPolicy = "around";
	this.functionArgPolicy = "around";
};
$hxClasses["checkstyle.checks.whitespace.OperatorWhitespaceCheck"] = checkstyle_checks_whitespace_OperatorWhitespaceCheck;
checkstyle_checks_whitespace_OperatorWhitespaceCheck.__name__ = "checkstyle.checks.whitespace.OperatorWhitespaceCheck";
checkstyle_checks_whitespace_OperatorWhitespaceCheck.__super__ = checkstyle_checks_whitespace_WhitespaceCheckBase;
checkstyle_checks_whitespace_OperatorWhitespaceCheck.prototype = $extend(checkstyle_checks_whitespace_WhitespaceCheckBase.prototype,{
	assignOpPolicy: null
	,unaryOpPolicy: null
	,ternaryOpPolicy: null
	,arithmeticOpPolicy: null
	,compareOpPolicy: null
	,bitwiseOpPolicy: null
	,boolOpPolicy: null
	,intervalOpPolicy: null
	,arrowPolicy: null
	,functionArgPolicy: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		this.checkAssignOps(root);
		this.checkUnaryOps(root);
		this.checkTernaryOps(root);
		this.checkArithmeticOps(root);
		this.checkCompareOps(root);
		this.checkBitwiseOps(root);
		this.checkBoolOps(root);
		this.checkIntervalOps(root);
		this.checkArrowOps(root);
		this.checkFunctionArg(root);
	}
	,checkAssignOps: function(root) {
		this.checkTokens(root,[haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAdd)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpSub)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMult)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpDiv)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMod)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShl)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpUShr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpOr)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAnd)),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpXor))],this.assignOpPolicy);
	}
	,checkUnaryOps: function(root) {
		if(this.unaryOpPolicy == null || this.unaryOpPolicy == "ignore") {
			return;
		}
		var tokens = root.filter([haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNegBits),haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNot),haxeparser_TokenDef.Unop(haxe_macro_Unop.OpIncrement),haxeparser_TokenDef.Unop(haxe_macro_Unop.OpDecrement)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < tokens.length) {
			var token = tokens[_g];
			++_g;
			if(this.isPosSuppressed(token.pos)) {
				continue;
			}
			this.checkUnaryWhitespace(token,this.unaryOpPolicy);
		}
	}
	,checkTernaryOps: function(root) {
		if(this.ternaryOpPolicy == null || this.ternaryOpPolicy == "ignore") {
			return;
		}
		var tokens = root.filter([haxeparser_TokenDef.Question],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < tokens.length) {
			var token = tokens[_g];
			++_g;
			if(this.isPosSuppressed(token.pos)) {
				continue;
			}
			if(!tokentree_utils_TokenTreeCheckUtils.isTernary(token)) {
				continue;
			}
			this.checkWhitespace(token,this.ternaryOpPolicy);
			this.checkWhitespace(token.getLastChild(),this.ternaryOpPolicy);
		}
	}
	,checkArithmeticOps: function(root) {
		this.checkTokens(root,[haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAdd),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpSub),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMult),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpDiv),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMod)],this.arithmeticOpPolicy);
	}
	,checkCompareOps: function(root) {
		this.checkTokens(root,[haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGte),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLte),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpEq),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpNotEq)],this.compareOpPolicy);
	}
	,checkBitwiseOps: function(root) {
		this.checkTokens(root,[haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpOr),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpXor),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShl),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShr),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpUShr)],this.bitwiseOpPolicy);
	}
	,checkBoolOps: function(root) {
		this.checkTokens(root,[haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolAnd),haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolOr)],this.boolOpPolicy);
	}
	,checkIntervalOps: function(root) {
		if(this.intervalOpPolicy == null || this.intervalOpPolicy == "ignore") {
			return;
		}
		var tokens = root.filterCallback(function(token,depth) {
			if(token.tok == null) {
				return tokentree_FilterResult.GO_DEEPER;
			}
			var _g = token.tok;
			switch(_g._hx_index) {
			case 5:
				if(_g.op._hx_index == 21) {
					return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
				} else {
					return tokentree_FilterResult.GO_DEEPER;
				}
				break;
			case 8:
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			default:
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
		this.checkTokenList(tokens,this.intervalOpPolicy);
	}
	,checkArrowOps: function(root) {
		if(this.arrowPolicy == null || this.arrowPolicy == "ignore") {
			return;
		}
		var tokens = root.filter([haxeparser_TokenDef.Binop(haxe_macro_Binop.OpArrow)],tokentree_TokenFilterMode.ALL);
		this.checkTokenList(tokens,this.arrowPolicy);
	}
	,checkFunctionArg: function(root) {
		if(this.functionArgPolicy == null || this.functionArgPolicy == "ignore") {
			return;
		}
		var tokens = root.filter([haxeparser_TokenDef.Arrow],tokentree_TokenFilterMode.ALL);
		this.checkTokenList(tokens,this.functionArgPolicy);
	}
	,violation: function(tok,policy) {
		this.logPos("OperatorWhitespace policy \"" + policy + "\" violated by \"" + Std.string(tok) + "\"",tok.pos);
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "assignOpPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "ternaryOpPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "arithmeticOpPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "unaryOpPolicy", values : ["inner","none","ignore"]},{ propertyName : "compareOpPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "bitwiseOpPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "boolOpPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "intervalOpPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "arrowPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "functionArgPolicy", values : ["before","after","around","none","ignore"]}]}];
	}
	,__class__: checkstyle_checks_whitespace_OperatorWhitespaceCheck
});
var checkstyle_checks_whitespace_WrapCheckBase = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.option = "eol";
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.WrapCheckBase"] = checkstyle_checks_whitespace_WrapCheckBase;
checkstyle_checks_whitespace_WrapCheckBase.__name__ = "checkstyle.checks.whitespace.WrapCheckBase";
checkstyle_checks_whitespace_WrapCheckBase.__super__ = checkstyle_checks_Check;
checkstyle_checks_whitespace_WrapCheckBase.prototype = $extend(checkstyle_checks_Check.prototype,{
	tokens: null
	,option: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,checkTokens: function(tokenList) {
		var root = this.checker.getTokenTree();
		var allTokens = root.filter(tokenList,tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allTokens.length) {
			var tok = allTokens[_g];
			++_g;
			if(this.isPosSuppressed(tok.pos)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.isTypeParameter(tok)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.isImportMult(tok)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.filterOpSub(tok)) {
				continue;
			}
			var linePos = this.checker.getLinePos(tok.pos.min);
			var line = haxe_io_Bytes.ofString(this.checker.lines[linePos.line]);
			var before = line.sub(0,linePos.ofs).toString();
			var tokLen = tok.toString().length;
			var offs = linePos.ofs + tokLen;
			var after = line.sub(offs,line.length - offs).toString();
			if(new EReg("^\\s*$","").match(before)) {
				if(this.option != "nl") {
					this.logPos("Token \"" + Std.string(tok) + "\" must be at the end of the line",tok.pos);
					continue;
				}
			}
			if(new EReg("^\\s*(//.*|/\\*.*|)$","").match(after)) {
				if(this.option != "eol") {
					this.logPos("Token \"" + Std.string(tok) + "\" must be on a new line",tok.pos);
				}
			}
		}
	}
	,__class__: checkstyle_checks_whitespace_WrapCheckBase
});
var checkstyle_checks_whitespace_OperatorWrapCheck = function() {
	checkstyle_checks_whitespace_WrapCheckBase.call(this);
	this.tokens = ["=","+","-","*","/","%",">","<",">=","<=","==","!=","&","|","^","&&","||","<<",">>",">>>","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","...","=>","++","--"];
};
$hxClasses["checkstyle.checks.whitespace.OperatorWrapCheck"] = checkstyle_checks_whitespace_OperatorWrapCheck;
checkstyle_checks_whitespace_OperatorWrapCheck.__name__ = "checkstyle.checks.whitespace.OperatorWrapCheck";
checkstyle_checks_whitespace_OperatorWrapCheck.__super__ = checkstyle_checks_whitespace_WrapCheckBase;
checkstyle_checks_whitespace_OperatorWrapCheck.prototype = $extend(checkstyle_checks_whitespace_WrapCheckBase.prototype,{
	actualRun: function() {
		var tokenList = [];
		if(this.hasToken("=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
		}
		if(this.hasToken("+")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAdd));
		}
		if(this.hasToken("-")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpSub));
		}
		if(this.hasToken("*")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMult));
		}
		if(this.hasToken("/")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpDiv));
		}
		if(this.hasToken("%")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMod));
		}
		if(this.hasToken(">")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
		}
		if(this.hasToken("<")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt));
		}
		if(this.hasToken(">=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGte));
		}
		if(this.hasToken("<=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLte));
		}
		if(this.hasToken("==")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpEq));
		}
		if(this.hasToken("!=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpNotEq));
		}
		if(this.hasToken("&")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd));
		}
		if(this.hasToken("|")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpOr));
		}
		if(this.hasToken("^")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpXor));
		}
		if(this.hasToken("&&")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolAnd));
		}
		if(this.hasToken("||")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolOr));
		}
		if(this.hasToken("<<")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShl));
		}
		if(this.hasToken(">>")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShr));
		}
		if(this.hasToken(">>>")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpUShr));
		}
		if(this.hasToken("+=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAdd)));
		}
		if(this.hasToken("-=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpSub)));
		}
		if(this.hasToken("*=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMult)));
		}
		if(this.hasToken("/=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpDiv)));
		}
		if(this.hasToken("%=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMod)));
		}
		if(this.hasToken("<<=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShl)));
		}
		if(this.hasToken(">>=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr)));
		}
		if(this.hasToken(">>>=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpUShr)));
		}
		if(this.hasToken("|=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpOr)));
		}
		if(this.hasToken("&=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAnd)));
		}
		if(this.hasToken("^=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpXor)));
		}
		if(this.hasToken("...")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpInterval));
		}
		if(this.hasToken("=>")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpArrow));
		}
		if(this.hasToken("!")) {
			tokenList.push(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNot));
		}
		if(this.hasToken("++")) {
			tokenList.push(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpIncrement));
		}
		if(this.hasToken("--")) {
			tokenList.push(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpDecrement));
		}
		if(tokenList.length <= 0) {
			return;
		}
		this.checkTokens(tokenList);
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "option", values : ["eol","nl"]}]}];
	}
	,__class__: checkstyle_checks_whitespace_OperatorWrapCheck
});
var checkstyle_checks_whitespace_SeparatorWhitespaceCheck = function() {
	checkstyle_checks_whitespace_WhitespaceCheckBase.call(this);
	this.dotPolicy = "none";
	this.commaPolicy = "after";
	this.semicolonPolicy = "after";
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.SeparatorWhitespaceCheck"] = checkstyle_checks_whitespace_SeparatorWhitespaceCheck;
checkstyle_checks_whitespace_SeparatorWhitespaceCheck.__name__ = "checkstyle.checks.whitespace.SeparatorWhitespaceCheck";
checkstyle_checks_whitespace_SeparatorWhitespaceCheck.__super__ = checkstyle_checks_whitespace_WhitespaceCheckBase;
checkstyle_checks_whitespace_SeparatorWhitespaceCheck.prototype = $extend(checkstyle_checks_whitespace_WhitespaceCheckBase.prototype,{
	dotPolicy: null
	,commaPolicy: null
	,semicolonPolicy: null
	,actualRun: function() {
		var root = this.checker.getTokenTree();
		this.checkTokens(root,[haxeparser_TokenDef.Dot],this.dotPolicy);
		this.checkTokens(root,[haxeparser_TokenDef.Comma],this.commaPolicy);
		this.checkTokens(root,[haxeparser_TokenDef.Semicolon],this.semicolonPolicy);
	}
	,violation: function(tok,policy) {
		if(this.isWrapped(tok,js_Boot.__cast(policy , String))) {
			return;
		}
		this.logPos("SeparatorWhitespace policy \"" + policy + "\" violated by \"" + Std.string(tok) + "\"",tok.pos);
	}
	,isWrapped: function(tok,policy) {
		var _g = tok.tok;
		if(_g._hx_index == 9) {
			return false;
		}
		if(policy == "around") {
			return false;
		}
		var index = tok.index;
		var tokPos = this.checker.getLinePos(tok.pos.min);
		var prevTok = this.checker.tokens[index - 1];
		var nextTok = this.checker.tokens[index + 1];
		var prevTokPos = this.checker.getLinePos(prevTok.pos.max);
		var nextTokPos = this.checker.getLinePos(nextTok.pos.min);
		var wrapBefore = prevTokPos.line != tokPos.line;
		var wrapAfter = tokPos.line != nextTokPos.line;
		switch(policy) {
		case "after":
			if(wrapBefore) {
				return true;
			}
			break;
		case "before":
			if(wrapAfter) {
				return true;
			}
			break;
		case "none":
			if(wrapBefore || wrapAfter) {
				return true;
			}
			break;
		default:
		}
		return false;
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "dotPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "commaPolicy", values : ["before","after","around","none","ignore"]},{ propertyName : "semicolonPolicy", values : ["before","after","around","none","ignore"]}]}];
	}
	,__class__: checkstyle_checks_whitespace_SeparatorWhitespaceCheck
});
var checkstyle_checks_whitespace_SeparatorWrapCheck = function() {
	checkstyle_checks_whitespace_WrapCheckBase.call(this);
	this.tokens = [","];
};
$hxClasses["checkstyle.checks.whitespace.SeparatorWrapCheck"] = checkstyle_checks_whitespace_SeparatorWrapCheck;
checkstyle_checks_whitespace_SeparatorWrapCheck.__name__ = "checkstyle.checks.whitespace.SeparatorWrapCheck";
checkstyle_checks_whitespace_SeparatorWrapCheck.__super__ = checkstyle_checks_whitespace_WrapCheckBase;
checkstyle_checks_whitespace_SeparatorWrapCheck.prototype = $extend(checkstyle_checks_whitespace_WrapCheckBase.prototype,{
	actualRun: function() {
		var tokenList = [];
		if(this.hasToken(",")) {
			tokenList.push(haxeparser_TokenDef.Comma);
		}
		if(this.hasToken(".")) {
			tokenList.push(haxeparser_TokenDef.Dot);
		}
		if(tokenList.length <= 0) {
			return;
		}
		this.checkTokens(tokenList);
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "option", values : ["eol","nl"]}]}];
	}
	,__class__: checkstyle_checks_whitespace_SeparatorWrapCheck
});
var checkstyle_checks_whitespace_SpacingCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.spaceIfCondition = "should";
	this.spaceForLoop = "should";
	this.spaceWhileLoop = "should";
	this.spaceSwitchCase = "should";
	this.spaceCatch = "should";
	this.spaceAroundBinop = true;
	this.noSpaceAroundUnop = true;
	this.ignoreRangeOperator = true;
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.SpacingCheck"] = checkstyle_checks_whitespace_SpacingCheck;
checkstyle_checks_whitespace_SpacingCheck.__name__ = "checkstyle.checks.whitespace.SpacingCheck";
checkstyle_checks_whitespace_SpacingCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_whitespace_SpacingCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	spaceAroundBinop: null
	,noSpaceAroundUnop: null
	,spaceIfCondition: null
	,spaceForLoop: null
	,spaceWhileLoop: null
	,spaceSwitchCase: null
	,spaceCatch: null
	,ignoreRangeOperator: null
	,actualRun: function() {
		var _gthis = this;
		var root = this.checker.getTokenTree();
		var acceptableTokens = root.filter([haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdIf),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFor),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdWhile),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdSwitch),haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCatch)],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < acceptableTokens.length) {
			var token = acceptableTokens[_g];
			++_g;
			var firstChild = token.getFirstChild();
			var _g1 = token.tok;
			if(_g1._hx_index == 0) {
				switch(_g1.k._hx_index) {
				case 3:
					this.checkSpaceBetweenExpressions(token.toString(),token,firstChild,this.spaceIfCondition);
					break;
				case 5:
					this.checkSpaceBetweenExpressions(token.toString(),token,firstChild,this.spaceWhileLoop);
					break;
				case 7:
					this.checkSpaceBetweenExpressions(token.toString(),token,firstChild,this.spaceForLoop);
					break;
				case 14:
					this.checkSpaceBetweenExpressions(token.toString(),token,firstChild,this.spaceSwitchCase);
					break;
				case 21:
					this.checkSpaceBetweenExpressions(token.toString(),token,firstChild,this.spaceCatch);
					break;
				default:
				}
			}
		}
		var lastExpr = null;
		checkstyle_utils_ExprUtils.walkFile(this.checker.ast,function(e) {
			if(lastExpr == null) {
				lastExpr = e;
				return;
			}
			var _g2 = e.expr;
			switch(_g2._hx_index) {
			case 2:
				var r = _g2.e2;
				var l = _g2.e1;
				var bo = _g2.op;
				if(_gthis.spaceAroundBinop) {
					if(_gthis.ignoreRangeOperator && _gthis.binopString(bo) == "...") {
						return;
					}
					if(r.pos.min - l.pos.max < _gthis.binopSize(bo) + 2) {
						var tmp = "No space around \"" + _gthis.binopString(bo) + "\"";
						_gthis.logPos(tmp,e.pos);
					}
				}
				break;
			case 9:
				var e2 = _g2.e;
				var post = _g2.postFix;
				var uo = _g2.op;
				if(_gthis.noSpaceAroundUnop) {
					var dist = 0;
					if(post) {
						dist = e.pos.max - e2.pos.max;
					} else {
						dist = e2.pos.min - e.pos.min;
					}
					if(dist > _gthis.unopSize(uo)) {
						var tmp1 = "Space around \"" + _gthis.unopString(uo) + "\"";
						_gthis.logPos(tmp1,e.pos);
					}
				}
				break;
			default:
			}
			lastExpr = e;
		});
	}
	,checkSpaceBetweenExpressions: function(name,e1,e2,directive) {
		if(e2 == null) {
			return;
		}
		switch(directive) {
		case "any":
			break;
		case "should":
			if(e2.pos.max - e1.pos.max == 1) {
				this.logRange("No space between \"" + name + "\" and \"(\"",e1.pos.max,e2.pos.min);
			}
			break;
		case "should_not":
			if(e2.pos.max - e1.pos.max > 1) {
				this.logRange("Space between \"" + name + "\" and \"(\"",e2.pos.max,e2.pos.min);
			}
			break;
		}
	}
	,binopSize: function(bo) {
		return this.binopString(bo).length;
	}
	,binopString: function(bo) {
		return new haxe_macro_Printer().printBinop(bo);
	}
	,unopSize: function(uo) {
		return this.unopString(uo).length;
	}
	,unopString: function(uo) {
		return new haxe_macro_Printer().printUnop(uo);
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "spaceIfCondition", values : ["should","should_not","any"]},{ propertyName : "spaceForLoop", values : ["should","should_not","any"]},{ propertyName : "spaceWhileLoop", values : ["should","should_not","any"]},{ propertyName : "spaceWhileLoop", values : ["should","should_not","any"]},{ propertyName : "spaceSwitchCase", values : ["should","should_not","any"]},{ propertyName : "spaceCatch", values : ["should","should_not","any"]},{ propertyName : "ignoreRangeOperator", values : [true,false]},{ propertyName : "spaceAroundBinop", values : [true,false]},{ propertyName : "noSpaceAroundUnop", values : [true,false]}]}];
	}
	,__class__: checkstyle_checks_whitespace_SpacingCheck
});
var checkstyle_checks_whitespace_TabForAligningCheck = function() {
	checkstyle_checks_whitespace_LineCheckBase.call(this);
	this.severity = "IGNORE";
	this.ignorePattern = "^$";
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.TabForAligningCheck"] = checkstyle_checks_whitespace_TabForAligningCheck;
checkstyle_checks_whitespace_TabForAligningCheck.__name__ = "checkstyle.checks.whitespace.TabForAligningCheck";
checkstyle_checks_whitespace_TabForAligningCheck.__super__ = checkstyle_checks_whitespace_LineCheckBase;
checkstyle_checks_whitespace_TabForAligningCheck.prototype = $extend(checkstyle_checks_whitespace_LineCheckBase.prototype,{
	ignorePattern: null
	,actualRun: function() {
		var ignoreRE = new EReg(this.ignorePattern,"");
		var _g1 = 0;
		var _g = this.checker.lines.length;
		while(_g1 < _g) {
			var i = _g1++;
			var line = this.checker.lines[i];
			var ranges = this.getRanges(line);
			if(ignoreRE.match(line)) {
				continue;
			}
			var _g2 = 0;
			var _g3 = ranges.filter(function(r) {
				return r.type == checkstyle_checks_whitespace_RangeType.TEXT;
			});
			while(_g2 < _g3.length) {
				var range = _g3[_g2];
				++_g2;
				var re = range.start == 0 ? new EReg("\\S[ ]*\t","") : new EReg("\t","");
				var rangeText = line.substring(range.start,range.end);
				if(re.match(rangeText)) {
					this.log("Tab after non-space character, use space for aligning",i + 1,0,i + 1,line.length);
				}
			}
		}
	}
	,__class__: checkstyle_checks_whitespace_TabForAligningCheck
});
var checkstyle_checks_whitespace_TrailingWhitespaceCheck = function() {
	checkstyle_checks_whitespace_LineCheckBase.call(this);
	this.severity = "IGNORE";
};
$hxClasses["checkstyle.checks.whitespace.TrailingWhitespaceCheck"] = checkstyle_checks_whitespace_TrailingWhitespaceCheck;
checkstyle_checks_whitespace_TrailingWhitespaceCheck.__name__ = "checkstyle.checks.whitespace.TrailingWhitespaceCheck";
checkstyle_checks_whitespace_TrailingWhitespaceCheck.__super__ = checkstyle_checks_whitespace_LineCheckBase;
checkstyle_checks_whitespace_TrailingWhitespaceCheck.prototype = $extend(checkstyle_checks_whitespace_LineCheckBase.prototype,{
	actualRun: function() {
		var re = new EReg("\\s+$","");
		var _g1 = 0;
		var _g = this.checker.lines.length;
		while(_g1 < _g) {
			var i = _g1++;
			var line = [this.checker.lines[i]];
			var ranges = this.getRanges(line[0]);
			var endTextRange = ranges.filter((function(line1) {
				return function(r) {
					if(r.type == checkstyle_checks_whitespace_RangeType.TEXT) {
						return r.end == line1[0].length;
					} else {
						return false;
					}
				};
			})(line))[0];
			if(endTextRange == null) {
				continue;
			}
			var endText = line[0].substring(endTextRange.start,endTextRange.end);
			if(re.match(endText)) {
				this.log("Trailing whitespace",i + 1,line[0].length,i + 1,line[0].length);
			}
		}
	}
	,detectableInstances: function() {
		return [{ fixed : [], properties : [{ propertyName : "severity", values : ["INFO"]}]}];
	}
	,__class__: checkstyle_checks_whitespace_TrailingWhitespaceCheck
});
var checkstyle_checks_whitespace_WhitespaceAfterCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.tokens = [",",";"];
};
$hxClasses["checkstyle.checks.whitespace.WhitespaceAfterCheck"] = checkstyle_checks_whitespace_WhitespaceAfterCheck;
checkstyle_checks_whitespace_WhitespaceAfterCheck.__name__ = "checkstyle.checks.whitespace.WhitespaceAfterCheck";
checkstyle_checks_whitespace_WhitespaceAfterCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_whitespace_WhitespaceAfterCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	tokens: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,actualRun: function() {
		var tokenList = [];
		if(this.hasToken(",")) {
			tokenList.push(haxeparser_TokenDef.Comma);
		}
		if(this.hasToken(";")) {
			tokenList.push(haxeparser_TokenDef.Semicolon);
		}
		if(this.hasToken("(")) {
			tokenList.push(haxeparser_TokenDef.POpen);
		}
		if(this.hasToken("[")) {
			tokenList.push(haxeparser_TokenDef.BkOpen);
		}
		if(this.hasToken("{")) {
			tokenList.push(haxeparser_TokenDef.BrOpen);
		}
		if(this.hasToken(":")) {
			tokenList.push(haxeparser_TokenDef.DblDot);
		}
		if(this.hasToken(".")) {
			tokenList.push(haxeparser_TokenDef.Dot);
		}
		if(this.hasToken("=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
		}
		if(this.hasToken("+")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAdd));
		}
		if(this.hasToken("-")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpSub));
		}
		if(this.hasToken("*")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMult));
		}
		if(this.hasToken("/")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpDiv));
		}
		if(this.hasToken("%")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMod));
		}
		if(this.hasToken(">")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
		}
		if(this.hasToken("<")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt));
		}
		if(this.hasToken(">=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGte));
		}
		if(this.hasToken("<=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLte));
		}
		if(this.hasToken("==")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpEq));
		}
		if(this.hasToken("!=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpNotEq));
		}
		if(this.hasToken("&")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd));
		}
		if(this.hasToken("|")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpOr));
		}
		if(this.hasToken("^")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpXor));
		}
		if(this.hasToken("&&")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolAnd));
		}
		if(this.hasToken("||")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolOr));
		}
		if(this.hasToken("<<")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShl));
		}
		if(this.hasToken(">>")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShr));
		}
		if(this.hasToken(">>>")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpUShr));
		}
		if(this.hasToken("+=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAdd)));
		}
		if(this.hasToken("-=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpSub)));
		}
		if(this.hasToken("*=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMult)));
		}
		if(this.hasToken("/=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpDiv)));
		}
		if(this.hasToken("%=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMod)));
		}
		if(this.hasToken("<<=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShl)));
		}
		if(this.hasToken(">>=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr)));
		}
		if(this.hasToken(">>>=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpUShr)));
		}
		if(this.hasToken("|=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpOr)));
		}
		if(this.hasToken("&=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAnd)));
		}
		if(this.hasToken("^=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpXor)));
		}
		if(this.hasToken("...")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpInterval));
		}
		if(this.hasToken("=>")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpArrow));
		}
		if(this.hasToken("!")) {
			tokenList.push(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNot));
		}
		if(this.hasToken("++")) {
			tokenList.push(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpIncrement));
		}
		if(this.hasToken("--")) {
			tokenList.push(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpDecrement));
		}
		if(tokenList.length <= 0) {
			return;
		}
		this.checkTokens(tokenList);
	}
	,checkTokens: function(tokenList) {
		var root = this.checker.getTokenTree();
		var allTokens = root.filter(tokenList,tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allTokens.length) {
			var tok = allTokens[_g];
			++_g;
			if(this.isPosSuppressed(tok.pos)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.filterOpSub(tok)) {
				continue;
			}
			var contentAfter = this.checker.getString(tok.pos.max,tok.pos.max + 1);
			if(new EReg("^(\\s|)$","").match(contentAfter)) {
				continue;
			}
			this.logPos("No whitespace after \"" + Std.string(tok) + "\"",tok.pos);
		}
	}
	,__class__: checkstyle_checks_whitespace_WhitespaceAfterCheck
});
var checkstyle_checks_whitespace_WhitespaceAroundCheck = function() {
	checkstyle_checks_Check.call(this,checkstyle_checks_CheckType.TOKEN);
	this.tokens = ["=","+","-","*","/","%",">","<",">=","<=","==","!=","&","|","^","&&","||","<<",">>",">>>","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"];
	this.categories = ["Style","Clarity"];
};
$hxClasses["checkstyle.checks.whitespace.WhitespaceAroundCheck"] = checkstyle_checks_whitespace_WhitespaceAroundCheck;
checkstyle_checks_whitespace_WhitespaceAroundCheck.__name__ = "checkstyle.checks.whitespace.WhitespaceAroundCheck";
checkstyle_checks_whitespace_WhitespaceAroundCheck.__super__ = checkstyle_checks_Check;
checkstyle_checks_whitespace_WhitespaceAroundCheck.prototype = $extend(checkstyle_checks_Check.prototype,{
	tokens: null
	,hasToken: function(token) {
		if(this.tokens.length != 0) {
			return this.tokens.indexOf(token) != -1;
		} else {
			return true;
		}
	}
	,actualRun: function() {
		var tokenList = [];
		if(this.hasToken(",")) {
			tokenList.push(haxeparser_TokenDef.Comma);
		}
		if(this.hasToken(";")) {
			tokenList.push(haxeparser_TokenDef.Semicolon);
		}
		if(this.hasToken("(")) {
			tokenList.push(haxeparser_TokenDef.POpen);
		}
		if(this.hasToken(")")) {
			tokenList.push(haxeparser_TokenDef.PClose);
		}
		if(this.hasToken("[")) {
			tokenList.push(haxeparser_TokenDef.BkOpen);
		}
		if(this.hasToken("]")) {
			tokenList.push(haxeparser_TokenDef.BkClose);
		}
		if(this.hasToken("{")) {
			tokenList.push(haxeparser_TokenDef.BrOpen);
		}
		if(this.hasToken("}")) {
			tokenList.push(haxeparser_TokenDef.BrClose);
		}
		if(this.hasToken(":")) {
			tokenList.push(haxeparser_TokenDef.DblDot);
		}
		if(this.hasToken(".")) {
			tokenList.push(haxeparser_TokenDef.Dot);
		}
		if(this.hasToken("=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
		}
		if(this.hasToken("+")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAdd));
		}
		if(this.hasToken("-")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpSub));
		}
		if(this.hasToken("*")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMult));
		}
		if(this.hasToken("/")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpDiv));
		}
		if(this.hasToken("%")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMod));
		}
		if(this.hasToken(">")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
		}
		if(this.hasToken("<")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt));
		}
		if(this.hasToken(">=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGte));
		}
		if(this.hasToken("<=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLte));
		}
		if(this.hasToken("==")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpEq));
		}
		if(this.hasToken("!=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpNotEq));
		}
		if(this.hasToken("&")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd));
		}
		if(this.hasToken("|")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpOr));
		}
		if(this.hasToken("^")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpXor));
		}
		if(this.hasToken("&&")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolAnd));
		}
		if(this.hasToken("||")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolOr));
		}
		if(this.hasToken("<<")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShl));
		}
		if(this.hasToken(">>")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShr));
		}
		if(this.hasToken(">>>")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpUShr));
		}
		if(this.hasToken("+=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAdd)));
		}
		if(this.hasToken("-=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpSub)));
		}
		if(this.hasToken("*=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMult)));
		}
		if(this.hasToken("/=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpDiv)));
		}
		if(this.hasToken("%=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMod)));
		}
		if(this.hasToken("<<=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShl)));
		}
		if(this.hasToken(">>=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr)));
		}
		if(this.hasToken(">>>=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpUShr)));
		}
		if(this.hasToken("|=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpOr)));
		}
		if(this.hasToken("&=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAnd)));
		}
		if(this.hasToken("^=")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpXor)));
		}
		if(this.hasToken("...")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpInterval));
		}
		if(this.hasToken("=>")) {
			tokenList.push(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpArrow));
		}
		if(this.hasToken("!")) {
			tokenList.push(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNot));
		}
		if(this.hasToken("++")) {
			tokenList.push(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpIncrement));
		}
		if(this.hasToken("--")) {
			tokenList.push(haxeparser_TokenDef.Unop(haxe_macro_Unop.OpDecrement));
		}
		if(tokenList.length <= 0) {
			return;
		}
		this.checkTokens(tokenList);
	}
	,checkTokens: function(tokenList) {
		var root = this.checker.getTokenTree();
		var allTokens = root.filter(tokenList,tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allTokens.length) {
			var tok = allTokens[_g];
			++_g;
			if(this.isPosSuppressed(tok.pos)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.isTypeParameter(tok)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.isImportMult(tok)) {
				continue;
			}
			if(tokentree_utils_TokenTreeCheckUtils.filterOpSub(tok)) {
				continue;
			}
			var linePos = this.checker.getLinePos(tok.pos.min);
			var line = haxe_io_Bytes.ofString(this.checker.lines[linePos.line]);
			var before = line.sub(0,linePos.ofs).toString();
			var tokLen = tok.toString().length;
			var offs = linePos.ofs + tokLen;
			var after = line.sub(offs,line.length - offs).toString();
			if(!new EReg("^.*\\s$","").match(before)) {
				this.logPos("No whitespace around \"" + Std.string(tok) + "\"",tok.pos);
				continue;
			}
			if(!new EReg("^(\\s.*|)$","").match(after)) {
				this.logPos("No whitespace around \"" + Std.string(tok) + "\"",tok.pos);
				continue;
			}
		}
	}
	,__class__: checkstyle_checks_whitespace_WhitespaceAroundCheck
});
var checkstyle_config_ConfigParser = function(failCallback) {
	this.info = new checkstyle_ChecksInfo();
	this.checker = new checkstyle_Checker();
	this.failWithCallback = failCallback;
	this.paths = [];
	this.allExcludes = [];
	this.seenConfigPaths = [];
	this.excludesMap = new haxe_ds_StringMap();
	this.numberOfCheckerThreads = 5;
	this.overrideCheckerThreads = 0;
	this.validateMode = checkstyle_config_ConfigValidateMode.STRICT;
};
$hxClasses["checkstyle.config.ConfigParser"] = checkstyle_config_ConfigParser;
checkstyle_config_ConfigParser.__name__ = "checkstyle.config.ConfigParser";
checkstyle_config_ConfigParser.prototype = {
	paths: null
	,excludesMap: null
	,allExcludes: null
	,numberOfCheckerThreads: null
	,overrideCheckerThreads: null
	,info: null
	,checker: null
	,validateMode: null
	,seenConfigPaths: null
	,failWithCallback: null
	,loadConfig: function(path) {
		path = this.getAbsoluteConfigPath(path,process.cwd());
		if(path != null && sys_FileSystem.exists(path) && !sys_FileSystem.isDirectory(path)) {
			this.seenConfigPaths.push(path);
			this.parseAndValidateConfig(JSON.parse(js_node_Fs.readFileSync(path,{ encoding : "utf8"})),haxe_io_Path.directory(path));
		} else {
			this.addAllChecks();
		}
	}
	,getAbsoluteConfigPath: function(path,baseFolder) {
		if(path == null) {
			return null;
		}
		if(haxe_io_Path.isAbsolute(path)) {
			return path;
		}
		return haxe_io_Path.join([baseFolder,path]);
	}
	,parseAndValidateConfig: function(config,rootFolder) {
		this.validateAllowedFields(config,Reflect.fields(checkstyle_utils_ConfigUtils.getEmptyConfig()),"Config");
		if(config.version == null) {
			config.version = 1;
		}
		if(config.version != 1) {
			this.failWith("configuration file has unknown version: " + config.version);
		}
		if(!checkstyle_utils_StringUtils.isEmpty(config.extendsConfigPath)) {
			var path = this.getAbsoluteConfigPath(config.extendsConfigPath,rootFolder);
			if(this.seenConfigPaths.indexOf(path) != -1) {
				this.failWith("extendsConfig: config file loop detected!");
			}
			this.seenConfigPaths.push(path);
			if(sys_FileSystem.exists(path) && !sys_FileSystem.isDirectory(path)) {
				this.parseAndValidateConfig(JSON.parse(js_node_Fs.readFileSync(path,{ encoding : "utf8"})),haxe_io_Path.directory(path));
			} else {
				this.failWith("extendsConfig: Failed to load parent configuration file [" + config.extendsConfigPath + "]");
			}
		}
		if(config.exclude != null) {
			this.parseExcludes(config.exclude);
		}
		if(config.checks != null) {
			var _g = 0;
			var _g1 = config.checks;
			while(_g < _g1.length) {
				var checkConf = _g1[_g];
				++_g;
				var check = this.createCheck(checkConf);
				if(check != null) {
					this.setCheckProperties(check,checkConf,config.defaultSeverity);
				}
			}
		}
		if(config.baseDefines != null) {
			this.validateDefines(config.baseDefines);
			this.checker.baseDefines = config.baseDefines;
		}
		if(config.defineCombinations != null) {
			var _g2 = 0;
			var _g11 = config.defineCombinations;
			while(_g2 < _g11.length) {
				var combination = _g11[_g2];
				++_g2;
				this.validateDefines(combination);
			}
			this.checker.defineCombinations = config.defineCombinations;
		}
		this.validateCheckerThreads(config.numberOfCheckerThreads);
	}
	,loadExcludeConfig: function(path) {
		var config = JSON.parse(js_node_Fs.readFileSync(path,{ encoding : "utf8"}));
		this.parseExcludes(config);
	}
	,parseExcludes: function(config) {
		if(config.version == null) {
			config.version = 1;
		}
		if(config.version != 1) {
			this.failWith("exclude configuration file has unknown version: " + config.version);
		}
		var pathType = config.path;
		var excludes = Reflect.fields(config);
		var _g = 0;
		while(_g < excludes.length) {
			var exclude = excludes[_g];
			++_g;
			if(exclude == "path") {
				continue;
			}
			if(exclude == "version") {
				continue;
			}
			this.createExcludeMapElement(exclude);
			var excludeValues = Reflect.field(config,exclude);
			if(excludeValues == null || excludeValues.length == 0) {
				continue;
			}
			var _g1 = 0;
			while(_g1 < excludeValues.length) {
				var val = excludeValues[_g1];
				++_g1;
				this.updateExcludes(exclude,val,pathType);
			}
		}
	}
	,createExcludeMapElement: function(exclude) {
		var _this = this.excludesMap;
		if((__map_reserved[exclude] != null ? _this.getReserved(exclude) : _this.h[exclude]) == null) {
			var _this1 = this.excludesMap;
			var value = [];
			if(__map_reserved[exclude] != null) {
				_this1.setReserved(exclude,value);
			} else {
				_this1.h[exclude] = value;
			}
		}
	}
	,updateExcludes: function(exclude,val,pathType) {
		var range = null;
		var index = val.lastIndexOf(":");
		if(index > 0) {
			range = HxOverrides.substr(val,index + 1,null);
			val = HxOverrides.substr(val,0,index);
		}
		if(pathType == null || pathType == "") {
			this.addNormalisedPathToExclude(exclude,val,range);
			return;
		}
		switch(pathType) {
		case "RELATIVE_TO_PROJECT":
			this.addNormalisedPathToExclude(exclude,val,range);
			break;
		case "RELATIVE_TO_SOURCE":
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				this.addNormalisedPathToExclude(exclude,path + ":" + val,range);
			}
			break;
		}
	}
	,addNormalisedPathToExclude: function(exclude,path,range) {
		var path1 = this.normalisePath(path);
		this.addToExclude(exclude,path1,range);
	}
	,normalisePath: function(path) {
		var slashes_r = new RegExp("[/\\\\]","g".split("u").join(""));
		path = path.split(".").join(":");
		path = path.replace(slashes_r,":");
		return path;
	}
	,addToExclude: function(exclude,value,range) {
		if(exclude == "all") {
			checkstyle_config_ExcludeManager.addGlobalExclude(value,range);
		} else {
			checkstyle_config_ExcludeManager.addConfigExclude(exclude,value,range);
		}
	}
	,createCheck: function(checkConf) {
		var check = this.info.build(checkConf.type);
		if(check == null) {
			var _g = this.validateMode;
			switch(_g._hx_index) {
			case 0:
				this.failWith("Unknown check \"" + checkConf.type + "\"");
				break;
			case 1:
				break;
			}
			return null;
		}
		this.checker.addCheck(check);
		return check;
	}
	,setCheckProperties: function(check,checkConf,defaultSeverity) {
		this.validateAllowedFields(checkConf,["type","props"],check.getModuleName());
		var props = checkConf.props == null ? [] : Reflect.fields(checkConf.props);
		var checkFields = Type.getInstanceFields(check == null ? null : js_Boot.getClass(check));
		var _g = 0;
		while(_g < props.length) {
			var prop = props[_g];
			++_g;
			var val = Reflect.field(checkConf.props,prop);
			if(checkFields.indexOf(prop) == -1) {
				this.failWith("Check " + check.getModuleName() + " has no property named '" + prop + "'");
				continue;
			}
			try {
				check.configureProperty(prop,val);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				var message = "Failed to configure " + prop + " setting for " + check.getModuleName() + ": ";
				message += (e1 instanceof checkstyle_errors_Error) ? e1.message : Std.string(e1);
				this.failWith(message);
			}
		}
		if(defaultSeverity != null && props.indexOf("severity") == -1) {
			check.severity = defaultSeverity;
		}
	}
	,validateAllowedFields: function(object,allowedFields,messagePrefix) {
		var _g = 0;
		var _g1 = Reflect.fields(object);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(allowedFields.indexOf(field) == -1) {
				this.failWith(messagePrefix + " has unknown field '" + field + "'");
			}
		}
	}
	,validateDefines: function(defines) {
		var _g = 0;
		while(_g < defines.length) {
			var define = defines[_g];
			++_g;
			if(define.split("=").length > 2) {
				this.failWith("Found a define with more than one = sign: '" + define + "'");
			}
		}
	}
	,validateCheckerThreads: function(checkerThreads) {
		if(checkerThreads != null) {
			this.numberOfCheckerThreads = checkerThreads;
		}
		if(this.overrideCheckerThreads > 0) {
			this.numberOfCheckerThreads = this.overrideCheckerThreads;
		}
		if(this.numberOfCheckerThreads <= 0) {
			this.numberOfCheckerThreads = 5;
		}
		if(this.numberOfCheckerThreads > 15) {
			this.numberOfCheckerThreads = 15;
		}
	}
	,addAllChecks: function() {
		var _g = 0;
		var _g1 = this.getSortedCheckInfos();
		while(_g < _g1.length) {
			var check = _g1[_g];
			++_g;
			if(!check.isAlias) {
				this.checker.addCheck(this.info.build(check.name));
			}
		}
	}
	,getSortedCheckInfos: function() {
		var _g = [];
		var check = this.info.checks();
		while(check.hasNext()) {
			var check1 = check.next();
			_g.push(check1);
		}
		var checks = _g;
		checks.sort(checkstyle_utils_ConfigUtils.checkInfoSort);
		return checks;
	}
	,getCheckCount: function() {
		var count = 0;
		var check = this.info.checks();
		while(check.hasNext()) {
			var check1 = check.next();
			if(new EReg("\\[DEPRECATED","").match(check1.description)) {
				continue;
			}
			++count;
		}
		return count;
	}
	,getUsedCheckCount: function() {
		var count = 0;
		var list = [];
		var _g = 0;
		var _g1 = this.checker.checks;
		while(_g < _g1.length) {
			var check = _g1[_g];
			++_g;
			var c = check == null ? null : js_Boot.getClass(check);
			var name = c.__name__;
			if(list.indexOf(name) >= 0) {
				continue;
			}
			list.push(name);
			++count;
		}
		return count;
	}
	,failWith: function(msg) {
		var _g = this.validateMode;
		switch(_g._hx_index) {
		case 0:
			this.failWithCallback(msg);
			break;
		case 1:
			break;
		}
	}
	,__class__: checkstyle_config_ConfigParser
};
var checkstyle_config_ConfigValidateMode = $hxEnums["checkstyle.config.ConfigValidateMode"] = { __ename__ : true, __constructs__ : ["STRICT","RELAXED"]
	,STRICT: {_hx_index:0,__enum__:"checkstyle.config.ConfigValidateMode",toString:$estr}
	,RELAXED: {_hx_index:1,__enum__:"checkstyle.config.ConfigValidateMode",toString:$estr}
};
var checkstyle_config_ExcludeDefinition = $hxEnums["checkstyle.config.ExcludeDefinition"] = { __ename__ : true, __constructs__ : ["FULL","LINE","RANGE","IDENTIFIER"]
	,FULL: ($_=function(filter) { return {_hx_index:0,filter:filter,__enum__:"checkstyle.config.ExcludeDefinition",toString:$estr}; },$_.__params__ = ["filter"],$_)
	,LINE: ($_=function(filter,line) { return {_hx_index:1,filter:filter,line:line,__enum__:"checkstyle.config.ExcludeDefinition",toString:$estr}; },$_.__params__ = ["filter","line"],$_)
	,RANGE: ($_=function(filter,lineStart,lineEnd) { return {_hx_index:2,filter:filter,lineStart:lineStart,lineEnd:lineEnd,__enum__:"checkstyle.config.ExcludeDefinition",toString:$estr}; },$_.__params__ = ["filter","lineStart","lineEnd"],$_)
	,IDENTIFIER: ($_=function(filter,name) { return {_hx_index:3,filter:filter,name:name,__enum__:"checkstyle.config.ExcludeDefinition",toString:$estr}; },$_.__params__ = ["filter","name"],$_)
};
var checkstyle_config_ExcludeManager = function() {
	this.clear();
};
$hxClasses["checkstyle.config.ExcludeManager"] = checkstyle_config_ExcludeManager;
checkstyle_config_ExcludeManager.__name__ = "checkstyle.config.ExcludeManager";
checkstyle_config_ExcludeManager.addGlobalExclude = function(filter,range) {
	checkstyle_config_ExcludeManager.INSTANCE.globalExclude.push(checkstyle_config_ExcludeManager.createExcludeDefinition(filter,range));
};
checkstyle_config_ExcludeManager.addConfigExclude = function(checkName,filter,range) {
	var _this = checkstyle_config_ExcludeManager.INSTANCE.excludeMap;
	var list = __map_reserved[checkName] != null ? _this.getReserved(checkName) : _this.h[checkName];
	if(list == null) {
		list = [];
	}
	list.push(checkstyle_config_ExcludeManager.createExcludeDefinition(filter,range));
	var _this1 = checkstyle_config_ExcludeManager.INSTANCE.excludeMap;
	if(__map_reserved[checkName] != null) {
		_this1.setReserved(checkName,list);
	} else {
		_this1.h[checkName] = list;
	}
};
checkstyle_config_ExcludeManager.createExcludeDefinition = function(filter,range) {
	if(range == null || range == "") {
		return checkstyle_config_ExcludeDefinition.FULL(filter);
	}
	if(new EReg("^[1-9][0-9]*$","").match(range)) {
		return checkstyle_config_ExcludeDefinition.LINE(filter,Std.parseInt(range));
	}
	if(new EReg("^[1-9][0-9]*-[1-9][0-9]*$","").match(range)) {
		var parts = range.split("-");
		return checkstyle_config_ExcludeDefinition.RANGE(filter,Std.parseInt(parts[0]),Std.parseInt(parts[1]));
	}
	return checkstyle_config_ExcludeDefinition.IDENTIFIER(filter,range);
};
checkstyle_config_ExcludeManager.isExcludedFromAll = function(fileName) {
	return checkstyle_config_ExcludeManager.INSTANCE.checkFileExcluded(fileName,checkstyle_config_ExcludeManager.INSTANCE.globalExclude);
};
checkstyle_config_ExcludeManager.isExcludedFromCheck = function(fileName,checkName) {
	var _this = checkstyle_config_ExcludeManager.INSTANCE.excludeMap;
	return checkstyle_config_ExcludeManager.INSTANCE.checkFileExcluded(fileName,__map_reserved[checkName] != null ? _this.getReserved(checkName) : _this.h[checkName]);
};
checkstyle_config_ExcludeManager.prototype = {
	globalExclude: null
	,excludeMap: null
	,clear: function() {
		this.globalExclude = [];
		this.excludeMap = new haxe_ds_StringMap();
	}
	,checkFileExcluded: function(fileName,list) {
		if(list == null) {
			return false;
		}
		var _g = 0;
		while(_g < list.length) {
			var exclude = list[_g];
			++_g;
			if(this.matchFullExlude(fileName,exclude)) {
				return true;
			}
		}
		return false;
	}
	,matchFullExlude: function(fileName,exclude) {
		switch(exclude._hx_index) {
		case 0:
			var filter = exclude.filter;
			return this.filterFileName(fileName,filter);
		case 1:
			var line = exclude.line;
			var filter1 = exclude.filter;
			return false;
		case 2:
			var lineEnd = exclude.lineEnd;
			var lineStart = exclude.lineStart;
			var filter2 = exclude.filter;
			return false;
		case 3:
			var name = exclude.name;
			var filter3 = exclude.filter;
			return false;
		}
	}
	,filterFileName: function(fileName,filter) {
		var cls = fileName.substring(0,fileName.indexOf(".hx"));
		if(filter == cls) {
			return true;
		}
		var slashes_r = new RegExp("[/\\\\]","g".split("u").join(""));
		cls = cls.replace(slashes_r,":");
		var r = new EReg(filter,"i");
		return r.match(cls);
	}
	,getPosExcludes: function(checker) {
		var posExcludes = this.getGlobalPosExcludes(checker);
		var checkName = this.excludeMap.keys();
		while(checkName.hasNext()) {
			var checkName1 = checkName.next();
			var _this = this.excludeMap;
			var list = __map_reserved[checkName1] != null ? _this.getReserved(checkName1) : _this.h[checkName1];
			if(list != null) {
				var _g = 0;
				while(_g < list.length) {
					var exclude = list[_g];
					++_g;
					switch(exclude._hx_index) {
					case 0:
						var filter = exclude.filter;
						continue;
					case 1:
						var line = exclude.line;
						var filter1 = exclude.filter;
						if(!this.filterFileName(checker.file.name,filter1)) {
							continue;
						}
						posExcludes.push(this.makeLinesExcludeRange(checker,checkName1,line - 1,line));
						break;
					case 2:
						var lineEnd = exclude.lineEnd;
						var lineStart = exclude.lineStart;
						var filter2 = exclude.filter;
						if(!this.filterFileName(checker.file.name,filter2)) {
							continue;
						}
						posExcludes.push(this.makeLinesExcludeRange(checker,checkName1,lineStart - 1,lineEnd - 1));
						break;
					case 3:
						var name = exclude.name;
						var filter3 = exclude.filter;
						if(!this.filterFileName(checker.file.name,filter3)) {
							continue;
						}
						posExcludes = posExcludes.concat(this.makeIdentifierRange(checker,checkName1,name));
						break;
					}
				}
			}
		}
		return this.makeExcludeRangMap(posExcludes.concat(this.getInlineExcludes(checker)));
	}
	,getGlobalPosExcludes: function(checker) {
		var posExcludes = [];
		var _g = 0;
		var _g1 = this.globalExclude;
		while(_g < _g1.length) {
			var exclude = _g1[_g];
			++_g;
			switch(exclude._hx_index) {
			case 0:
				var filter = exclude.filter;
				continue;
			case 1:
				var line = exclude.line;
				var filter1 = exclude.filter;
				if(!this.filterFileName(checker.file.name,filter1)) {
					continue;
				}
				var _g2 = 0;
				var _g3 = checker.checks;
				while(_g2 < _g3.length) {
					var check = _g3[_g2];
					++_g2;
					posExcludes.push(this.makeLinesExcludeRange(checker,check.getModuleName(),line - 1,line));
				}
				break;
			case 2:
				var lineEnd = exclude.lineEnd;
				var lineStart = exclude.lineStart;
				var filter2 = exclude.filter;
				if(!this.filterFileName(checker.file.name,filter2)) {
					continue;
				}
				var _g21 = 0;
				var _g31 = checker.checks;
				while(_g21 < _g31.length) {
					var check1 = _g31[_g21];
					++_g21;
					posExcludes.push(this.makeLinesExcludeRange(checker,check1.getModuleName(),lineStart - 1,lineEnd - 1));
				}
				break;
			case 3:
				var name = exclude.name;
				var filter3 = exclude.filter;
				if(!this.filterFileName(checker.file.name,filter3)) {
					continue;
				}
				var _g22 = 0;
				var _g32 = checker.checks;
				while(_g22 < _g32.length) {
					var check2 = _g32[_g22];
					++_g22;
					posExcludes = posExcludes.concat(this.makeIdentifierRange(checker,check2.getModuleName(),name));
				}
				break;
			}
		}
		return posExcludes;
	}
	,getInlineExcludes: function(checker) {
		var inlineExcludes = [];
		var root = checker.getTokenTree();
		var allAtTokens = root.filter([haxeparser_TokenDef.At],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allAtTokens.length) {
			var atToken = allAtTokens[_g];
			++_g;
			var child = atToken.getFirstChild();
			if(child == null) {
				continue;
			}
			if(!child.is(haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent("SuppressWarnings")))) {
				continue;
			}
			var pOpen = child.getFirstChild();
			if(pOpen == null) {
				continue;
			}
			if(!pOpen.is(haxeparser_TokenDef.POpen)) {
				continue;
			}
			var checkNames = [[]];
			pOpen.filterCallback((function(checkNames1) {
				return function(token,depth) {
					var _g1 = token.tok;
					if(_g1._hx_index == 1) {
						if(_g1.c._hx_index == 2) {
							var name = _g1.c.s;
							if(!StringTools.startsWith(name,"checkstyle:")) {
								return tokentree_FilterResult.SKIP_SUBTREE;
							}
							checkNames1[0].push(HxOverrides.substr(name,11,null));
							return tokentree_FilterResult.SKIP_SUBTREE;
						} else {
							return tokentree_FilterResult.GO_DEEPER;
						}
					} else {
						return tokentree_FilterResult.GO_DEEPER;
					}
				};
			})(checkNames));
			var _g11 = 0;
			while(_g11 < checkNames[0].length) {
				var name1 = checkNames[0][_g11];
				++_g11;
				inlineExcludes.push(this.makeTokenExcludeRange(checker,name1,atToken.parent));
			}
		}
		return inlineExcludes;
	}
	,makeExcludeRangMap: function(list) {
		var map = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < list.length) {
			var range = list[_g];
			++_g;
			var key = range.checkName;
			var rangeList = __map_reserved[key] != null ? map.getReserved(key) : map.h[key];
			if(rangeList == null) {
				rangeList = [];
			}
			rangeList.push(range);
			var key1 = range.checkName;
			if(__map_reserved[key1] != null) {
				map.setReserved(key1,rangeList);
			} else {
				map.h[key1] = rangeList;
			}
		}
		return map;
	}
	,makeIdentifierRange: function(checker,checkName,name) {
		var identifierExcludes = [];
		var root = checker.getTokenTree();
		var allTokens = root.filter([haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent(name))],tokentree_TokenFilterMode.ALL);
		var _g = 0;
		while(_g < allTokens.length) {
			var token = allTokens[_g];
			++_g;
			identifierExcludes.push(this.makeTokenExcludeRange(checker,checkName,token));
		}
		return identifierExcludes;
	}
	,makeLinesExcludeRange: function(checker,checkName,lineStart,lineEnd) {
		if(lineStart < 0) {
			lineStart = 0;
		}
		if(lineEnd < 0) {
			lineEnd = lineStart;
		}
		if(lineStart > checker.lines.length) {
			lineStart = checker.lines.length - 1;
		}
		if(lineEnd > checker.lines.length) {
			lineEnd = checker.lines.length - 1;
		}
		return { checkName : checkName, linePosStart : { line : lineStart, ofs : 0}, linePosEnd : { line : lineEnd, ofs : 0}, charPosStart : checker.linesIdx[lineStart].l, charPosEnd : checker.linesIdx[lineEnd].r};
	}
	,makeTokenExcludeRange: function(checker,checkName,token) {
		var pos = token.getPos();
		return { checkName : checkName, linePosStart : checker.getLinePos(pos.min), linePosEnd : checker.getLinePos(pos.max), charPosStart : pos.min, charPosEnd : pos.max};
	}
	,__class__: checkstyle_config_ExcludeManager
};
var checkstyle_detect_DetectCodingStyle = function() { };
$hxClasses["checkstyle.detect.DetectCodingStyle"] = checkstyle_detect_DetectCodingStyle;
checkstyle_detect_DetectCodingStyle.__name__ = "checkstyle.detect.DetectCodingStyle";
checkstyle_detect_DetectCodingStyle.detectCodingStyle = function(checks,fileList) {
	var detectedChecks = [];
	haxe_ds_ArraySort.sort(checks,checkstyle_utils_ConfigUtils.checkSort);
	var _g = 0;
	while(_g < checks.length) {
		var check = checks[_g];
		++_g;
		checkstyle_detect_DetectCodingStyle.detectCheck(check,detectedChecks,fileList);
	}
	return detectedChecks;
};
checkstyle_detect_DetectCodingStyle.detectCheck = function(check,detectedChecks,fileList) {
	var detectableInstances = check.detectableInstances();
	if(detectableInstances.length <= 0) {
		return;
	}
	checkstyle_detect_DetectCodingStyle.printProgress(check.getModuleName() + ": ");
	if(check.severity == "IGNORE") {
		check.severity = "INFO";
	}
	var _g = 0;
	while(_g < detectableInstances.length) {
		var instance = detectableInstances[_g];
		++_g;
		var _g1 = 0;
		var _g2 = instance.fixed;
		while(_g1 < _g2.length) {
			var fixedProp = _g2[_g1];
			++_g1;
			check.configureProperty(fixedProp.propertyName,fixedProp.value);
		}
		var checkConfig = checkstyle_detect_DetectCodingStyle.detectPropertyIterations(check,instance.properties,fileList);
		if(checkConfig != null) {
			detectedChecks.push(checkConfig);
		}
	}
};
checkstyle_detect_DetectCodingStyle.detectPropertyIterations = function(check,detectableProperties,fileList) {
	var ignored = true;
	var _g = 0;
	while(_g < detectableProperties.length) {
		var property = detectableProperties[_g];
		++_g;
		check.reset();
		if(checkstyle_detect_DetectCodingStyle.detectInFiles(check,property,fileList)) {
			ignored = false;
		}
	}
	if(ignored) {
		checkstyle_detect_DetectCodingStyle.printProgress(" ignored",true);
		return null;
	} else {
		checkstyle_detect_DetectCodingStyle.printProgress(" ok",true);
		return checkstyle_utils_ConfigUtils.makeCheckConfig(check);
	}
};
checkstyle_detect_DetectCodingStyle.detectInFiles = function(check,property,fileList) {
	var detectedValue = null;
	var _g = 0;
	while(_g < fileList.length) {
		var file = fileList[_g];
		++_g;
		var result = checkstyle_detect_DetectCodingStyle.iterateProperty(check,property,file);
		switch(result._hx_index) {
		case 0:
			break;
		case 1:
			var value = result.value;
			check.configureProperty(property.propertyName,value);
			return true;
		case 2:
			var value1 = result.value;
			detectedValue = value1;
			break;
		}
	}
	if(detectedValue != null) {
		check.configureProperty(property.propertyName,detectedValue);
		return true;
	}
	return false;
};
checkstyle_detect_DetectCodingStyle.iterateProperty = function(check,property,file) {
	if(property.values.length <= 0) {
		return checkstyle_detect_DetectionResult.NO_CHANGE;
	}
	if(property.values.length == 1) {
		return checkstyle_detect_DetectionResult.CHANGE_DETECTED(property.values[0]);
	}
	var checker = new checkstyle_Checker();
	checker.addCheck(check);
	checker.loadFileContent(file);
	if(!checker.createContext(file)) {
		return checkstyle_detect_DetectionResult.NO_CHANGE;
	}
	var lastCount = -1;
	var lowestCountValue = null;
	var changed = false;
	var _g = 0;
	var _g1 = property.values;
	while(_g < _g1.length) {
		var value = _g1[_g];
		++_g;
		check.configureProperty(property.propertyName,value);
		var count = checkstyle_detect_DetectCodingStyle.runCheck(checker,[file]);
		if(lastCount == -1) {
			lastCount = count;
			lowestCountValue = value;
			continue;
		}
		if(count == lastCount) {
			continue;
		}
		checkstyle_detect_DetectCodingStyle.printProgress(".");
		if(count < lastCount) {
			lastCount = count;
			lowestCountValue = value;
		}
		changed = true;
	}
	if(changed) {
		var index = property.values.indexOf(lowestCountValue);
		if(index <= 0) {
			return checkstyle_detect_DetectionResult.CHANGE_DETECTED(lowestCountValue);
		}
		property.values = property.values.slice(index);
		if(property.values.length > 2) {
			return checkstyle_detect_DetectionResult.REDUCED_VALUE_LIST(lowestCountValue);
		}
		return checkstyle_detect_DetectionResult.CHANGE_DETECTED(lowestCountValue);
	}
	return checkstyle_detect_DetectionResult.NO_CHANGE;
};
checkstyle_detect_DetectCodingStyle.runCheck = function(checker,fileList) {
	checkstyle_reporter_ReporterManager.INSTANCE.clear();
	var reporter = new checkstyle_detect_DetectionReporter();
	checkstyle_reporter_ReporterManager.INSTANCE.addReporter(reporter);
	checker.run();
	return reporter.messageCount;
};
checkstyle_detect_DetectCodingStyle.printProgress = function(text,nl) {
	if(nl == null) {
		nl = false;
	}
	if(nl) {
		process.stdout.write(text);
		process.stdout.write("\n");
	} else {
		process.stdout.write(text);
	}
};
var checkstyle_detect_DetectionReporter = function() {
	this.messageCount = 0;
};
$hxClasses["checkstyle.detect.DetectionReporter"] = checkstyle_detect_DetectionReporter;
checkstyle_detect_DetectionReporter.__name__ = "checkstyle.detect.DetectionReporter";
checkstyle_detect_DetectionReporter.__interfaces__ = [checkstyle_reporter_IReporter];
checkstyle_detect_DetectionReporter.prototype = {
	messageCount: null
	,start: function() {
	}
	,finish: function() {
	}
	,fileStart: function(f) {
	}
	,fileFinish: function(f) {
	}
	,addMessage: function(m) {
		this.messageCount++;
	}
	,__class__: checkstyle_detect_DetectionReporter
};
var checkstyle_detect_DetectionResult = $hxEnums["checkstyle.detect.DetectionResult"] = { __ename__ : true, __constructs__ : ["NO_CHANGE","CHANGE_DETECTED","REDUCED_VALUE_LIST"]
	,NO_CHANGE: {_hx_index:0,__enum__:"checkstyle.detect.DetectionResult",toString:$estr}
	,CHANGE_DETECTED: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"checkstyle.detect.DetectionResult",toString:$estr}; },$_.__params__ = ["value"],$_)
	,REDUCED_VALUE_LIST: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"checkstyle.detect.DetectionResult",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var checkstyle_errors_Error = function(message) {
	this.message = message;
};
$hxClasses["checkstyle.errors.Error"] = checkstyle_errors_Error;
checkstyle_errors_Error.__name__ = "checkstyle.errors.Error";
checkstyle_errors_Error.prototype = {
	message: null
	,toString: function() {
		return this.message;
	}
	,__class__: checkstyle_errors_Error
};
var checkstyle_reporter_CodeClimateReporter = function(fileCount,checkCount,usedCheckCount,path,ns) {
	checkstyle_reporter_BaseReporter.call(this,fileCount,checkCount,usedCheckCount,path,ns);
};
$hxClasses["checkstyle.reporter.CodeClimateReporter"] = checkstyle_reporter_CodeClimateReporter;
checkstyle_reporter_CodeClimateReporter.__name__ = "checkstyle.reporter.CodeClimateReporter";
checkstyle_reporter_CodeClimateReporter.__super__ = checkstyle_reporter_BaseReporter;
checkstyle_reporter_CodeClimateReporter.prototype = $extend(checkstyle_reporter_BaseReporter.prototype,{
	start: function() {
	}
	,finish: function() {
	}
	,addMessage: function(m) {
		var _this_r = new RegExp("^/code/","".split("u").join(""));
		var file = m.fileName.replace(_this_r,"");
		var _this_r1 = new RegExp("//","".split("u").join(""));
		file = file.replace(_this_r1,"/");
		var issue = { type : "issue", check_name : m.moduleName, description : StringTools.replace(m.message,"\"","`"), content : { body : m.desc}, severity : this.getSeverity(m.severity), categories : m.categories, remediation_points : m.points * 50000, location : { path : file, positions : { begin : { line : m.startLine, column : m.startColumn}, end : { line : m.endLine, column : m.endColumn}}}};
		var v = JSON.stringify(issue);
		process.stdout.write(v);
		Sys.stdout().writeByte(0);
	}
	,getSeverity: function(severity) {
		switch(severity) {
		case "ERROR":
			return "critical";
		case "INFO":
			return "info";
		case "WARNING":
			return "normal";
		default:
			return "info";
		}
	}
	,__class__: checkstyle_reporter_CodeClimateReporter
});
var checkstyle_reporter_ExitCodeReporter = function() {
	this.failCheckCount = 0;
};
$hxClasses["checkstyle.reporter.ExitCodeReporter"] = checkstyle_reporter_ExitCodeReporter;
checkstyle_reporter_ExitCodeReporter.__name__ = "checkstyle.reporter.ExitCodeReporter";
checkstyle_reporter_ExitCodeReporter.__interfaces__ = [checkstyle_reporter_IReporter];
checkstyle_reporter_ExitCodeReporter.prototype = {
	failCheckCount: null
	,start: function() {
	}
	,finish: function() {
		checkstyle_Main.setExitCode(this.failCheckCount);
	}
	,fileStart: function(f) {
	}
	,fileFinish: function(f) {
	}
	,addMessage: function(m) {
		if(m.severity == "ERROR") {
			this.failCheckCount++;
		}
	}
	,__class__: checkstyle_reporter_ExitCodeReporter
};
var checkstyle_reporter_JSONReporter = function(fileCount,checkCount,usedCheckCount,path,ns) {
	checkstyle_reporter_BaseReporter.call(this,fileCount,checkCount,usedCheckCount,path,ns);
};
$hxClasses["checkstyle.reporter.JSONReporter"] = checkstyle_reporter_JSONReporter;
checkstyle_reporter_JSONReporter.__name__ = "checkstyle.reporter.JSONReporter";
checkstyle_reporter_JSONReporter.__super__ = checkstyle_reporter_BaseReporter;
checkstyle_reporter_JSONReporter.prototype = $extend(checkstyle_reporter_BaseReporter.prototype,{
	jsonReport: null
	,fileReport: null
	,start: function() {
		this.jsonReport = [];
		checkstyle_reporter_BaseReporter.prototype.start.call(this);
	}
	,fileStart: function(f) {
		this.fileReport = { fileName : f.name, messages : []};
		this.jsonReport.push(this.fileReport);
	}
	,finish: function() {
		if(this.file != null) {
			var _this = this.report;
			var x = JSON.stringify(this.jsonReport);
			_this.b += Std.string(x);
		}
		checkstyle_reporter_BaseReporter.prototype.finish.call(this);
	}
	,addMessage: function(m) {
		var reportMessage = { line : m.startLine, column : m.startColumn, severity : checkstyle_reporter_BaseReporter.severityString(m.severity), message : m.message};
		this.fileReport.messages.push(reportMessage);
		var _g = m.severity;
		switch(_g) {
		case "ERROR":
			this.errors++;
			break;
		case "INFO":
			this.infos++;
			break;
		case "WARNING":
			this.warnings++;
			break;
		default:
		}
		var v = this.applyColour(this.getMessage(m).b,m.severity);
		process.stdout.write(v);
	}
	,__class__: checkstyle_reporter_JSONReporter
});
var checkstyle_reporter_ProgressReporter = function(numFiles) {
	this.numFiles = numFiles;
};
$hxClasses["checkstyle.reporter.ProgressReporter"] = checkstyle_reporter_ProgressReporter;
checkstyle_reporter_ProgressReporter.__name__ = "checkstyle.reporter.ProgressReporter";
checkstyle_reporter_ProgressReporter.__interfaces__ = [checkstyle_reporter_IReporter];
checkstyle_reporter_ProgressReporter.prototype = {
	lineLength: null
	,numFiles: null
	,start: function() {
	}
	,finish: function() {
		this.clear();
	}
	,fileStart: function(f) {
		this.clear();
		var percentage = Math.floor((f.index + 1) / this.numFiles * 100);
		var line = "" + percentage + "% - " + f.name;
		this.lineLength = line.length;
		process.stdout.write(line);
		if(f.index == this.numFiles - 1) {
			process.stdout.write("\n");
		}
	}
	,clear: function() {
		process.stdout.write("\r");
		var _g1 = 0;
		var _g = this.lineLength;
		while(_g1 < _g) {
			var count = _g1++;
			process.stdout.write(" ");
		}
		process.stdout.write("\r");
	}
	,fileFinish: function(f) {
	}
	,addMessage: function(m) {
	}
	,__class__: checkstyle_reporter_ProgressReporter
};
var checkstyle_utils_Mutex = function() {
};
$hxClasses["checkstyle.utils.Mutex"] = checkstyle_utils_Mutex;
checkstyle_utils_Mutex.__name__ = "checkstyle.utils.Mutex";
checkstyle_utils_Mutex.prototype = {
	acquire: function() {
	}
	,release: function() {
	}
	,__class__: checkstyle_utils_Mutex
};
var checkstyle_reporter_ReporterManager = function() {
	this.clear();
	this.lock = new checkstyle_utils_Mutex();
};
$hxClasses["checkstyle.reporter.ReporterManager"] = checkstyle_reporter_ReporterManager;
checkstyle_reporter_ReporterManager.__name__ = "checkstyle.reporter.ReporterManager";
checkstyle_reporter_ReporterManager.prototype = {
	reporters: null
	,lock: null
	,clear: function() {
		this.reporters = [];
	}
	,addReporter: function(r) {
		this.reporters.push(r);
	}
	,start: function() {
		var _g = 0;
		var _g1 = this.reporters;
		while(_g < _g1.length) {
			var reporter = _g1[_g];
			++_g;
			reporter.start();
		}
	}
	,finish: function() {
		var _g = 0;
		var _g1 = this.reporters;
		while(_g < _g1.length) {
			var reporter = _g1[_g];
			++_g;
			reporter.finish();
		}
	}
	,fileStart: function(f) {
		this.lock.acquire();
		var _g = 0;
		var _g1 = this.reporters;
		while(_g < _g1.length) {
			var reporter = _g1[_g];
			++_g;
			reporter.fileStart(f);
		}
		this.lock.release();
	}
	,fileFinish: function(f) {
		this.lock.acquire();
		var _g = 0;
		var _g1 = this.reporters;
		while(_g < _g1.length) {
			var reporter = _g1[_g];
			++_g;
			reporter.fileFinish(f);
		}
		this.lock.release();
	}
	,addError: function(f,e,name) {
		if(!checkstyle_reporter_ReporterManager.SHOW_PARSE_ERRORS) {
			return;
		}
		this.lock.acquire();
		var _g = 0;
		var _g1 = this.reporters;
		while(_g < _g1.length) {
			var reporter = _g1[_g];
			++_g;
			reporter.addMessage(this.getErrorMessage(e,f.name,"Check " + name));
		}
		this.lock.release();
	}
	,addMessages: function(messages) {
		if(messages == null || messages.length <= 0) {
			return;
		}
		this.lock.acquire();
		messages = this.filterDuplicateMessages(messages);
		var _g = 0;
		var _g1 = this.reporters;
		while(_g < _g1.length) {
			var reporter = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < messages.length) {
				var m = messages[_g2];
				++_g2;
				reporter.addMessage(m);
			}
		}
		this.lock.release();
	}
	,filterDuplicateMessages: function(messages) {
		var filteredMessages = [];
		var _g = 0;
		while(_g < messages.length) {
			var message = messages[_g];
			++_g;
			var anyDuplicates = false;
			var _g1 = 0;
			while(_g1 < filteredMessages.length) {
				var filteredMessage = filteredMessages[_g1];
				++_g1;
				if(this.areMessagesSame(message,filteredMessage)) {
					anyDuplicates = true;
					break;
				}
			}
			if(!anyDuplicates) {
				filteredMessages.push(message);
			}
		}
		return filteredMessages;
	}
	,areMessagesSame: function(message1,message2) {
		if(message1.fileName == message2.fileName && message1.message == message2.message && message1.code == message2.code && message1.startLine == message2.startLine && message1.startColumn == message2.startColumn && message1.endLine == message2.endLine && message1.endColumn == message2.endColumn && message1.severity == message2.severity) {
			return message1.moduleName == message2.moduleName;
		} else {
			return false;
		}
	}
	,getErrorMessage: function(e,fileName,step) {
		return { fileName : fileName, startLine : 1, endLine : 1, startColumn : 0, endColumn : 0, severity : "ERROR", moduleName : "Checker", categories : ["Style"], points : 1, desc : "", code : "" + Std.string(e), message : "" + step + " failed: " + Std.string(e) + "\nPlease file a github issue at https://github.com/HaxeCheckstyle/haxe-checkstyle/issues"};
	}
	,__class__: checkstyle_reporter_ReporterManager
};
var checkstyle_reporter_TextReporter = function(fileCount,checkCount,usedCheckCount,path,ns) {
	checkstyle_reporter_BaseReporter.call(this,fileCount,checkCount,usedCheckCount,path,ns);
};
$hxClasses["checkstyle.reporter.TextReporter"] = checkstyle_reporter_TextReporter;
checkstyle_reporter_TextReporter.__name__ = "checkstyle.reporter.TextReporter";
checkstyle_reporter_TextReporter.__super__ = checkstyle_reporter_BaseReporter;
checkstyle_reporter_TextReporter.prototype = $extend(checkstyle_reporter_BaseReporter.prototype,{
	addMessage: function(m) {
		var sb = this.getMessage(m);
		var output = Sys.stderr();
		var _g = m.severity;
		switch(_g) {
		case "ERROR":
			this.errors++;
			break;
		case "INFO":
			this.infos++;
			output = Sys.stdout();
			break;
		case "WARNING":
			this.warnings++;
			break;
		default:
		}
		var line = sb.b;
		if(Sys.systemName() == "Windows") {
			output.writeString(line);
		} else {
			var v = this.applyColour(line,m.severity);
			process.stdout.write(v);
		}
		if(this.file != null) {
			this.report.b += line == null ? "null" : "" + line;
		}
	}
	,__class__: checkstyle_reporter_TextReporter
});
var checkstyle_reporter_XMLReporter = function(numFiles,checkCount,usedCheckCount,path,s,ns) {
	checkstyle_reporter_BaseReporter.call(this,numFiles,checkCount,usedCheckCount,path,ns);
	this.messageCache = new haxe_ds_StringMap();
	this.style = s;
};
$hxClasses["checkstyle.reporter.XMLReporter"] = checkstyle_reporter_XMLReporter;
checkstyle_reporter_XMLReporter.__name__ = "checkstyle.reporter.XMLReporter";
checkstyle_reporter_XMLReporter.replace = function(str,re) {
	return re.map(str,function(re1) {
		var this1 = checkstyle_reporter_XMLReporter.ENTITY_MAP;
		var key = re1.matched(0);
		var _this = this1;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	});
};
checkstyle_reporter_XMLReporter.escapeXML = function(string) {
	return checkstyle_reporter_XMLReporter.replace(string,checkstyle_reporter_XMLReporter.ENTITY_RE);
};
checkstyle_reporter_XMLReporter.__super__ = checkstyle_reporter_BaseReporter;
checkstyle_reporter_XMLReporter.prototype = $extend(checkstyle_reporter_BaseReporter.prototype,{
	style: null
	,messageCache: null
	,start: function() {
		var sb_b = "";
		sb_b += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
		if(this.style != "") {
			sb_b += Std.string("<?xml-stylesheet type=\"text/xsl\" href=\"" + this.style + "\" ?>\n");
		}
		sb_b += "<checkstyle version=\"5.7\">\n";
		if(this.file != null) {
			this.report.b += Std.string(sb_b);
		}
		checkstyle_reporter_BaseReporter.prototype.start.call(this);
	}
	,finish: function() {
		var sb_b = "";
		sb_b += "</checkstyle>\n";
		if(this.file != null) {
			this.report.b += Std.string(sb_b);
		}
		checkstyle_reporter_BaseReporter.prototype.finish.call(this);
	}
	,encode: function(s) {
		return checkstyle_reporter_XMLReporter.escapeXML(s);
	}
	,fileStart: function(f) {
		var key = f.name;
		var _this = this.messageCache;
		var value = [];
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,fileFinish: function(f) {
		var sb_b = "";
		sb_b += "\t<file name=\"";
		sb_b += Std.string(this.encode(f.name));
		sb_b += "\">\n";
		var key = f.name;
		var _this = this.messageCache;
		var messages = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var _g = 0;
		while(_g < messages.length) {
			var m = messages[_g];
			++_g;
			sb_b += Std.string(this.formatMessage(m));
		}
		this.messageCache.remove(f.name);
		sb_b += "\t</file>\n";
		if(this.file != null) {
			this.report.b += Std.string(sb_b);
		}
	}
	,addMessage: function(m) {
		var key = m.fileName;
		var _this = this.messageCache;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			var key1 = m.fileName;
			var _this1 = this.messageCache;
			var value = [m];
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		} else {
			var key2 = m.fileName;
			var _this2 = this.messageCache;
			(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]).push(m);
		}
	}
	,formatMessage: function(m) {
		var sb_b = "";
		sb_b += "\t\t<error line=\"";
		sb_b += Std.string(m.startLine);
		sb_b += "\"";
		if(m.startColumn >= 0) {
			sb_b += " column=\"";
			sb_b += Std.string(m.startColumn);
			sb_b += "\"";
		}
		sb_b += " severity=\"";
		sb_b += Std.string(checkstyle_reporter_BaseReporter.severityString(m.severity));
		sb_b += "\"";
		sb_b += " message=\"";
		sb_b += Std.string(this.encode(m.moduleName) + " - " + this.encode(m.message));
		sb_b += "\"";
		sb_b += " source=\"";
		sb_b += Std.string(this.encode(m.fileName));
		sb_b += "\"/>\n";
		var _g = m.severity;
		switch(_g) {
		case "ERROR":
			this.errors++;
			break;
		case "INFO":
			this.infos++;
			break;
		case "WARNING":
			this.warnings++;
			break;
		default:
		}
		var v = this.applyColour(this.getMessage(m).b,m.severity);
		process.stdout.write(v);
		return sb_b;
	}
	,__class__: checkstyle_reporter_XMLReporter
});
var checkstyle_utils_ArrayUtils = function() { };
$hxClasses["checkstyle.utils.ArrayUtils"] = checkstyle_utils_ArrayUtils;
checkstyle_utils_ArrayUtils.__name__ = "checkstyle.utils.ArrayUtils";
checkstyle_utils_ArrayUtils.contains = function(a,el) {
	return a.indexOf(el) != -1;
};
checkstyle_utils_ArrayUtils.sortStrings = function(texts) {
	haxe_ds_ArraySort.sort(texts,function(a,b) {
		if(a > b) {
			return 1;
		}
		if(a < b) {
			return -1;
		}
		return 0;
	});
};
var checkstyle_utils_ComplexTypeUtils = function() { };
$hxClasses["checkstyle.utils.ComplexTypeUtils"] = checkstyle_utils_ComplexTypeUtils;
checkstyle_utils_ComplexTypeUtils.__name__ = "checkstyle.utils.ComplexTypeUtils";
checkstyle_utils_ComplexTypeUtils.walkFile = function(file,cb) {
	var _g = 0;
	var _g1 = file.decls;
	while(_g < _g1.length) {
		var decl = _g1[_g];
		++_g;
		checkstyle_utils_ComplexTypeUtils.walkTypeDecl(decl,cb);
	}
};
checkstyle_utils_ComplexTypeUtils.walkTypeDecl = function(td,cb) {
	var _g = td.decl;
	switch(_g._hx_index) {
	case 0:
		var d = _g.d;
		checkstyle_utils_ComplexTypeUtils.walkClass(d,td.pos,cb);
		break;
	case 1:
		var d1 = _g.d;
		checkstyle_utils_ComplexTypeUtils.walkEnum(d1,td.pos,cb);
		break;
	case 2:
		var a = _g.a;
		checkstyle_utils_ComplexTypeUtils.walkAbstract(a,td.pos,cb);
		break;
	case 3:
		var mode = _g.mode;
		var sl = _g.sl;
		checkstyle_utils_ComplexTypeUtils.walkImport(sl,mode,cb);
		break;
	case 4:
		var d2 = _g.d;
		checkstyle_utils_ComplexTypeUtils.walkTypedef(d2,td.pos,cb);
		break;
	case 5:
		var path = _g.path;
		checkstyle_utils_ComplexTypeUtils.walkTypePath(path,path.name,td.pos,cb);
		break;
	}
};
checkstyle_utils_ComplexTypeUtils.walkMeta = function(meta,cb) {
	var _g = 0;
	while(_g < meta.length) {
		var m = meta[_g];
		++_g;
		var _g1 = 0;
		var _g2 = m.params;
		while(_g1 < _g2.length) {
			var p = _g2[_g1];
			++_g1;
			checkstyle_utils_ComplexTypeUtils.walkExpr(p,cb);
		}
	}
};
checkstyle_utils_ComplexTypeUtils.walkCommonDefinition = function(d,pos,cb) {
	var _g = 0;
	var _g1 = d.params;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		checkstyle_utils_ComplexTypeUtils.walkTypeParamDecl(p,pos,cb);
	}
	checkstyle_utils_ComplexTypeUtils.walkMeta(d.meta,cb);
};
checkstyle_utils_ComplexTypeUtils.walkClass = function(d,pos,cb) {
	checkstyle_utils_ComplexTypeUtils.walkCommonDefinition(d,pos,cb);
	var _g = 0;
	var _g1 = d.flags;
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		switch(f._hx_index) {
		case 3:
			var t = f.t;
			checkstyle_utils_ComplexTypeUtils.walkTypePath(t,d.name,pos,cb);
			break;
		case 4:
			var t1 = f.t;
			checkstyle_utils_ComplexTypeUtils.walkTypePath(t1,d.name,pos,cb);
			break;
		default:
		}
	}
	var _g2 = 0;
	var _g11 = d.data;
	while(_g2 < _g11.length) {
		var f1 = _g11[_g2];
		++_g2;
		checkstyle_utils_ComplexTypeUtils.walkField(f1,cb);
	}
};
checkstyle_utils_ComplexTypeUtils.walkEnum = function(d,pos,cb) {
	checkstyle_utils_ComplexTypeUtils.walkCommonDefinition(d,pos,cb);
	var _g = 0;
	var _g1 = d.data;
	while(_g < _g1.length) {
		var ec = _g1[_g];
		++_g;
		checkstyle_utils_ComplexTypeUtils.walkMeta(ec.meta,cb);
		var _g2 = 0;
		var _g3 = ec.args;
		while(_g2 < _g3.length) {
			var arg = _g3[_g2];
			++_g2;
			checkstyle_utils_ComplexTypeUtils.walkComplexType(arg.type,ec.name,ec.pos,cb);
		}
		var _g21 = 0;
		var _g31 = ec.params;
		while(_g21 < _g31.length) {
			var param = _g31[_g21];
			++_g21;
			checkstyle_utils_ComplexTypeUtils.walkTypeParamDecl(param,ec.pos,cb);
		}
		if(ec.type != null) {
			checkstyle_utils_ComplexTypeUtils.walkComplexType(ec.type,ec.name,ec.pos,cb);
		}
	}
};
checkstyle_utils_ComplexTypeUtils.walkAbstract = function(d,pos,cb) {
	checkstyle_utils_ComplexTypeUtils.walkCommonDefinition(d,pos,cb);
	var _g = 0;
	var _g1 = d.flags;
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		switch(f._hx_index) {
		case 1:
			var ct = f.ct;
			checkstyle_utils_ComplexTypeUtils.walkComplexType(ct,$hxEnums[f.__enum__].__constructs__[f._hx_index],pos,cb);
			break;
		case 2:
			var ct1 = f.ct;
			checkstyle_utils_ComplexTypeUtils.walkComplexType(ct1,$hxEnums[f.__enum__].__constructs__[f._hx_index],pos,cb);
			break;
		case 3:
			var ct2 = f.ct;
			checkstyle_utils_ComplexTypeUtils.walkComplexType(ct2,$hxEnums[f.__enum__].__constructs__[f._hx_index],pos,cb);
			break;
		default:
		}
	}
	var _g2 = 0;
	var _g11 = d.data;
	while(_g2 < _g11.length) {
		var f1 = _g11[_g2];
		++_g2;
		checkstyle_utils_ComplexTypeUtils.walkField(f1,cb);
	}
};
checkstyle_utils_ComplexTypeUtils.walkImport = function(sl,mode,cb) {
};
checkstyle_utils_ComplexTypeUtils.walkTypedef = function(d,pos,cb) {
	checkstyle_utils_ComplexTypeUtils.walkCommonDefinition(d,pos,cb);
	checkstyle_utils_ComplexTypeUtils.walkComplexType(d.data,d.name,pos,cb);
};
checkstyle_utils_ComplexTypeUtils.walkTypePath = function(tp,name,pos,cb) {
	if(tp.params != null) {
		var _g = 0;
		var _g1 = tp.params;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			switch(p._hx_index) {
			case 0:
				var t = p.t;
				checkstyle_utils_ComplexTypeUtils.walkComplexType(t,name,pos,cb);
				break;
			case 1:
				var e = p.e;
				checkstyle_utils_ComplexTypeUtils.walkExpr(e,cb);
				break;
			}
		}
	}
};
checkstyle_utils_ComplexTypeUtils.walkVar = function(v,pos,cb) {
	if(v.type != null) {
		checkstyle_utils_ComplexTypeUtils.walkComplexType(v.type,v.name,pos,cb);
	}
	if(v.expr != null) {
		checkstyle_utils_ComplexTypeUtils.walkExpr(v.expr,cb);
	}
};
checkstyle_utils_ComplexTypeUtils.walkTypeParamDecl = function(tp,pos,cb) {
	if(tp.constraints != null) {
		var _g = 0;
		var _g1 = tp.constraints;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			checkstyle_utils_ComplexTypeUtils.walkComplexType(c,tp.name,pos,cb);
		}
	}
	if(tp.params != null) {
		var _g2 = 0;
		var _g11 = tp.params;
		while(_g2 < _g11.length) {
			var t = _g11[_g2];
			++_g2;
			checkstyle_utils_ComplexTypeUtils.walkTypeParamDecl(t,pos,cb);
		}
	}
};
checkstyle_utils_ComplexTypeUtils.walkFunction = function(f,name,pos,cb) {
	var _g = 0;
	var _g1 = f.args;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.type != null) {
			checkstyle_utils_ComplexTypeUtils.walkComplexType(a.type,a.name,pos,cb);
		}
		if(a.value != null) {
			checkstyle_utils_ComplexTypeUtils.walkExpr(a.value,cb);
		}
	}
	if(f.ret != null) {
		checkstyle_utils_ComplexTypeUtils.walkComplexType(f.ret,name,pos,cb);
	}
	if(f.expr != null) {
		checkstyle_utils_ComplexTypeUtils.walkExpr(f.expr,cb);
	}
	if(f.params != null) {
		var _g2 = 0;
		var _g11 = f.params;
		while(_g2 < _g11.length) {
			var tp = _g11[_g2];
			++_g2;
			checkstyle_utils_ComplexTypeUtils.walkTypeParamDecl(tp,pos,cb);
		}
	}
};
checkstyle_utils_ComplexTypeUtils.walkCase = function(c,cb) {
	var _g = 0;
	var _g1 = c.values;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		checkstyle_utils_ComplexTypeUtils.walkExpr(v,cb);
	}
	if(c.guard != null) {
		checkstyle_utils_ComplexTypeUtils.walkExpr(c.guard,cb);
	}
	if(c.expr != null) {
		checkstyle_utils_ComplexTypeUtils.walkExpr(c.expr,cb);
	}
};
checkstyle_utils_ComplexTypeUtils.walkCatch = function(c,cb) {
	checkstyle_utils_ComplexTypeUtils.walkComplexType(c.type,c.name,c.expr.pos,cb);
	checkstyle_utils_ComplexTypeUtils.walkExpr(c.expr,cb);
};
checkstyle_utils_ComplexTypeUtils.walkField = function(f,cb) {
	var _g = f.kind;
	switch(_g._hx_index) {
	case 0:
		var e = _g.e;
		var t = _g.t;
		if(t != null) {
			checkstyle_utils_ComplexTypeUtils.walkComplexType(t,f.name,f.pos,cb);
		}
		if(e != null) {
			checkstyle_utils_ComplexTypeUtils.walkExpr(e,cb);
		}
		break;
	case 1:
		var fun = _g.f;
		checkstyle_utils_ComplexTypeUtils.walkFunction(fun,f.name,f.pos,cb);
		break;
	case 2:
		var e1 = _g.e;
		var t1 = _g.t;
		var set = _g.set;
		var get = _g.get;
		if(t1 != null) {
			checkstyle_utils_ComplexTypeUtils.walkComplexType(t1,f.name,f.pos,cb);
		}
		if(e1 != null) {
			checkstyle_utils_ComplexTypeUtils.walkExpr(e1,cb);
		}
		break;
	}
};
checkstyle_utils_ComplexTypeUtils.walkComplexType = function(t,name,pos,cb) {
	cb(t,name,pos);
	if(t == null) {
		return;
	}
	switch(t._hx_index) {
	case 0:
		var p = t.p;
		checkstyle_utils_ComplexTypeUtils.walkTypePath(p,name,pos,cb);
		break;
	case 1:
		var ret = t.ret;
		var args = t.args;
		var _g = 0;
		while(_g < args.length) {
			var a = args[_g];
			++_g;
			checkstyle_utils_ComplexTypeUtils.walkComplexType(a,name,pos,cb);
		}
		checkstyle_utils_ComplexTypeUtils.walkComplexType(ret,name,pos,cb);
		break;
	case 2:
		var fields = t.fields;
		var _g1 = 0;
		while(_g1 < fields.length) {
			var f = fields[_g1];
			++_g1;
			checkstyle_utils_ComplexTypeUtils.walkField(f,cb);
		}
		break;
	case 3:
		var t1 = t.t;
		checkstyle_utils_ComplexTypeUtils.walkComplexType(t1,name,pos,cb);
		break;
	case 4:
		var fields1 = t.fields;
		var p1 = t.p;
		var _g2 = 0;
		while(_g2 < p1.length) {
			var tp = p1[_g2];
			++_g2;
			checkstyle_utils_ComplexTypeUtils.walkTypePath(tp,name,pos,cb);
		}
		var _g3 = 0;
		while(_g3 < fields1.length) {
			var f1 = fields1[_g3];
			++_g3;
			checkstyle_utils_ComplexTypeUtils.walkField(f1,cb);
		}
		break;
	case 5:
		var t2 = t.t;
		checkstyle_utils_ComplexTypeUtils.walkComplexType(t2,name,pos,cb);
		break;
	case 6:
		var t3 = t.t;
		var n = t.n;
		checkstyle_utils_ComplexTypeUtils.walkComplexType(t3,n,pos,cb);
		break;
	case 7:
		var types = t.tl;
		var _g4 = 0;
		while(_g4 < types.length) {
			var t4 = types[_g4];
			++_g4;
			checkstyle_utils_ComplexTypeUtils.walkComplexType(t4,name,pos,cb);
		}
		break;
	}
};
checkstyle_utils_ComplexTypeUtils.walkExpr = function(e,cb) {
	var _g = e.expr;
	switch(_g._hx_index) {
	case 0:
		var c = _g.c;
		break;
	case 1:
		var e2 = _g.e2;
		var e1 = _g.e1;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e1,cb);
		checkstyle_utils_ComplexTypeUtils.walkExpr(e2,cb);
		break;
	case 2:
		var e21 = _g.e2;
		var e11 = _g.e1;
		var op = _g.op;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e11,cb);
		checkstyle_utils_ComplexTypeUtils.walkExpr(e21,cb);
		break;
	case 3:
		var field = _g.field;
		var e3 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e3,cb);
		break;
	case 4:
		var e4 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e4,cb);
		break;
	case 5:
		var fields = _g.fields;
		var _g1 = 0;
		while(_g1 < fields.length) {
			var f = fields[_g1];
			++_g1;
			checkstyle_utils_ComplexTypeUtils.walkExpr(f.expr,cb);
		}
		break;
	case 6:
		var values = _g.values;
		var _g2 = 0;
		while(_g2 < values.length) {
			var v = values[_g2];
			++_g2;
			checkstyle_utils_ComplexTypeUtils.walkExpr(v,cb);
		}
		break;
	case 7:
		var params = _g.params;
		var e5 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e5,cb);
		var _g3 = 0;
		while(_g3 < params.length) {
			var p = params[_g3];
			++_g3;
			checkstyle_utils_ComplexTypeUtils.walkExpr(p,cb);
		}
		break;
	case 8:
		var params1 = _g.params;
		var t = _g.t;
		checkstyle_utils_ComplexTypeUtils.walkTypePath(t,"",e.pos,cb);
		var _g4 = 0;
		while(_g4 < params1.length) {
			var p1 = params1[_g4];
			++_g4;
			checkstyle_utils_ComplexTypeUtils.walkExpr(p1,cb);
		}
		break;
	case 9:
		var e6 = _g.e;
		var postFix = _g.postFix;
		var op1 = _g.op;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e6,cb);
		break;
	case 10:
		var vars = _g.vars;
		var _g5 = 0;
		while(_g5 < vars.length) {
			var v1 = vars[_g5];
			++_g5;
			checkstyle_utils_ComplexTypeUtils.walkVar(v1,e.pos,cb);
		}
		break;
	case 11:
		var f1 = _g.f;
		var name = _g.name;
		checkstyle_utils_ComplexTypeUtils.walkFunction(f1,name,e.pos,cb);
		break;
	case 12:
		var exprs = _g.exprs;
		var _g6 = 0;
		while(_g6 < exprs.length) {
			var e7 = exprs[_g6];
			++_g6;
			checkstyle_utils_ComplexTypeUtils.walkExpr(e7,cb);
		}
		break;
	case 13:
		var expr = _g.expr;
		var it = _g.it;
		checkstyle_utils_ComplexTypeUtils.walkExpr(it,cb);
		checkstyle_utils_ComplexTypeUtils.walkExpr(expr,cb);
		break;
	case 14:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		checkstyle_utils_ComplexTypeUtils.walkExpr(econd,cb);
		checkstyle_utils_ComplexTypeUtils.walkExpr(eif,cb);
		if(eelse != null) {
			checkstyle_utils_ComplexTypeUtils.walkExpr(eelse,cb);
		}
		break;
	case 15:
		var normalWhile = _g.normalWhile;
		var e8 = _g.e;
		var econd1 = _g.econd;
		checkstyle_utils_ComplexTypeUtils.walkExpr(econd1,cb);
		checkstyle_utils_ComplexTypeUtils.walkExpr(e8,cb);
		break;
	case 16:
		var edef = _g.edef;
		var cases = _g.cases;
		var e9 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e9,cb);
		var _g7 = 0;
		while(_g7 < cases.length) {
			var c1 = cases[_g7];
			++_g7;
			checkstyle_utils_ComplexTypeUtils.walkCase(c1,cb);
		}
		if(edef != null && edef.expr != null) {
			checkstyle_utils_ComplexTypeUtils.walkExpr(edef,cb);
		}
		break;
	case 17:
		var catches = _g.catches;
		var e10 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e10,cb);
		var _g8 = 0;
		while(_g8 < catches.length) {
			var c2 = catches[_g8];
			++_g8;
			checkstyle_utils_ComplexTypeUtils.walkCatch(c2,cb);
		}
		break;
	case 18:
		var e12 = _g.e;
		if(e12 != null) {
			checkstyle_utils_ComplexTypeUtils.walkExpr(e12,cb);
		}
		break;
	case 19:
		break;
	case 20:
		break;
	case 21:
		var e13 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e13,cb);
		break;
	case 22:
		var e14 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e14,cb);
		break;
	case 23:
		var t1 = _g.t;
		var e15 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e15,cb);
		if(t1 != null) {
			checkstyle_utils_ComplexTypeUtils.walkComplexType(t1,"",e15.pos,cb);
		}
		break;
	case 24:
		var displayKind = _g.displayKind;
		var e16 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e16,cb);
		break;
	case 25:
		var t2 = _g.t;
		checkstyle_utils_ComplexTypeUtils.walkTypePath(t2,t2.name,e.pos,cb);
		break;
	case 26:
		var eelse1 = _g.eelse;
		var eif1 = _g.eif;
		var econd2 = _g.econd;
		checkstyle_utils_ComplexTypeUtils.walkExpr(econd2,cb);
		checkstyle_utils_ComplexTypeUtils.walkExpr(eif1,cb);
		checkstyle_utils_ComplexTypeUtils.walkExpr(eelse1,cb);
		break;
	case 27:
		var t3 = _g.t;
		var e17 = _g.e;
		checkstyle_utils_ComplexTypeUtils.walkExpr(e17,cb);
		checkstyle_utils_ComplexTypeUtils.walkComplexType(t3,"",e17.pos,cb);
		break;
	case 28:
		var e18 = _g.e;
		var s = _g.s;
		if(s.params != null) {
			var _g9 = 0;
			var _g11 = s.params;
			while(_g9 < _g11.length) {
				var mp = _g11[_g9];
				++_g9;
				checkstyle_utils_ComplexTypeUtils.walkExpr(mp,cb);
			}
		}
		checkstyle_utils_ComplexTypeUtils.walkExpr(e18,cb);
		break;
	}
};
var checkstyle_utils_ConfigUtils = function() { };
$hxClasses["checkstyle.utils.ConfigUtils"] = checkstyle_utils_ConfigUtils;
checkstyle_utils_ConfigUtils.__name__ = "checkstyle.utils.ConfigUtils";
checkstyle_utils_ConfigUtils.getEmptyConfig = function() {
	return { defaultSeverity : "INFO", extendsConfigPath : "", numberOfCheckerThreads : 5, baseDefines : [], defineCombinations : [], checks : [], exclude : { }, version : 1};
};
checkstyle_utils_ConfigUtils.saveConfig = function(checker,path) {
	var file = sys_io_File.write(path,false);
	file.writeString(JSON.stringify(checkstyle_utils_ConfigUtils.makeConfigFromChecker(checker),null,"\t"));
	file.close();
};
checkstyle_utils_ConfigUtils.saveCheckConfigList = function(list,path) {
	var file = sys_io_File.write(path,false);
	file.writeString(JSON.stringify(checkstyle_utils_ConfigUtils.makeConfigFromList(list),null,"\t"));
	file.close();
};
checkstyle_utils_ConfigUtils.makeConfigFromChecker = function(checker) {
	var list = [];
	var _g = 0;
	var _g1 = checker.checks;
	while(_g < _g1.length) {
		var check = _g1[_g];
		++_g;
		list.push(checkstyle_utils_ConfigUtils.makeCheckConfig(check));
	}
	return checkstyle_utils_ConfigUtils.makeConfigFromList(list);
};
checkstyle_utils_ConfigUtils.makeConfigFromList = function(list) {
	var config = checkstyle_utils_ConfigUtils.getEmptyConfig();
	config.checks = list;
	haxe_ds_ArraySort.sort(config.checks,checkstyle_utils_ConfigUtils.checkConfigSort);
	return config;
};
checkstyle_utils_ConfigUtils.checkConfigSort = function(a,b) {
	if(a.type == b.type) {
		return 0;
	}
	if(a.type < b.type) {
		return -1;
	}
	return 1;
};
checkstyle_utils_ConfigUtils.checkSort = function(a,b) {
	if(a.getModuleName() == b.getModuleName()) {
		return 0;
	}
	if(a.getModuleName() < b.getModuleName()) {
		return -1;
	}
	return 1;
};
checkstyle_utils_ConfigUtils.checkInfoSort = function(a,b) {
	if(a.name == b.name) {
		return 0;
	}
	if(a.name < b.name) {
		return -1;
	}
	return 1;
};
checkstyle_utils_ConfigUtils.makeCheckConfig = function(check) {
	var propsNotAllowed = ["moduleName","severity","type","categories","points","desc","currentState","skipOverStringStart","commentStartRE","commentBlockEndRE","stringStartRE","stringInterpolatedEndRE","stringLiteralEndRE","formatRE","skipOverInitialQuote","messages","checker","placemap","metaName"];
	var checkConfig = { type : check.getModuleName(), props : { }};
	var _g = 0;
	var _g1 = Reflect.fields(check);
	while(_g < _g1.length) {
		var prop = _g1[_g];
		++_g;
		if(propsNotAllowed.indexOf(prop) != -1) {
			continue;
		}
		checkConfig.props[prop] = Reflect.field(check,prop);
	}
	return checkConfig;
};
var checkstyle_utils_ErrorUtils = function() { };
$hxClasses["checkstyle.utils.ErrorUtils"] = checkstyle_utils_ErrorUtils;
checkstyle_utils_ErrorUtils.__name__ = "checkstyle.utils.ErrorUtils";
checkstyle_utils_ErrorUtils.handleException = function(e,file,name) {
	checkstyle_reporter_ReporterManager.INSTANCE.addError(file,e,name);
};
var checkstyle_utils_ExprUtils = function() { };
$hxClasses["checkstyle.utils.ExprUtils"] = checkstyle_utils_ExprUtils;
checkstyle_utils_ExprUtils.__name__ = "checkstyle.utils.ExprUtils";
checkstyle_utils_ExprUtils.walkFile = function(file,cb) {
	var _g = 0;
	var _g1 = file.decls;
	while(_g < _g1.length) {
		var decl = _g1[_g];
		++_g;
		checkstyle_utils_ExprUtils.walkTypeDecl(decl,cb);
	}
};
checkstyle_utils_ExprUtils.walkTypeDecl = function(td,cb) {
	var _g = td.decl;
	switch(_g._hx_index) {
	case 0:
		var d = _g.d;
		checkstyle_utils_ExprUtils.walkClass(d,cb);
		break;
	case 1:
		var d1 = _g.d;
		checkstyle_utils_ExprUtils.walkEnum(d1,cb);
		break;
	case 2:
		var a = _g.a;
		checkstyle_utils_ExprUtils.walkAbstract(a,cb);
		break;
	case 3:
		var mode = _g.mode;
		var sl = _g.sl;
		checkstyle_utils_ExprUtils.walkImport(sl,mode,cb);
		break;
	case 4:
		var d2 = _g.d;
		checkstyle_utils_ExprUtils.walkTypedef(d2,cb);
		break;
	case 5:
		var path = _g.path;
		checkstyle_utils_ExprUtils.walkTypePath(path,cb);
		break;
	}
};
checkstyle_utils_ExprUtils.walkMeta = function(meta,cb) {
	var _g = 0;
	while(_g < meta.length) {
		var m = meta[_g];
		++_g;
		var _g1 = 0;
		var _g2 = m.params;
		while(_g1 < _g2.length) {
			var p = _g2[_g1];
			++_g1;
			checkstyle_utils_ExprUtils.walkExpr(p,cb);
		}
	}
};
checkstyle_utils_ExprUtils.walkCommonDefinition = function(d,cb) {
	var _g = 0;
	var _g1 = d.params;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		checkstyle_utils_ExprUtils.walkTypeParamDecl(p,cb);
	}
	checkstyle_utils_ExprUtils.walkMeta(d.meta,cb);
};
checkstyle_utils_ExprUtils.walkClass = function(d,cb) {
	checkstyle_utils_ExprUtils.walkCommonDefinition(d,cb);
	var _g = 0;
	var _g1 = d.flags;
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		switch(f._hx_index) {
		case 3:
			var t = f.t;
			checkstyle_utils_ExprUtils.walkTypePath(t,cb);
			break;
		case 4:
			var t1 = f.t;
			checkstyle_utils_ExprUtils.walkTypePath(t1,cb);
			break;
		default:
		}
	}
	var _g2 = 0;
	var _g11 = d.data;
	while(_g2 < _g11.length) {
		var f1 = _g11[_g2];
		++_g2;
		checkstyle_utils_ExprUtils.walkField(f1,cb);
	}
};
checkstyle_utils_ExprUtils.walkEnum = function(d,cb) {
	checkstyle_utils_ExprUtils.walkCommonDefinition(d,cb);
	var _g = 0;
	var _g1 = d.data;
	while(_g < _g1.length) {
		var ec = _g1[_g];
		++_g;
		checkstyle_utils_ExprUtils.walkMeta(ec.meta,cb);
		var _g2 = 0;
		var _g3 = ec.args;
		while(_g2 < _g3.length) {
			var arg = _g3[_g2];
			++_g2;
			checkstyle_utils_ExprUtils.walkComplexType(arg.type,cb);
		}
		var _g21 = 0;
		var _g31 = ec.params;
		while(_g21 < _g31.length) {
			var param = _g31[_g21];
			++_g21;
			checkstyle_utils_ExprUtils.walkTypeParamDecl(param,cb);
		}
		if(ec.type != null) {
			checkstyle_utils_ExprUtils.walkComplexType(ec.type,cb);
		}
	}
};
checkstyle_utils_ExprUtils.walkAbstract = function(d,cb) {
	checkstyle_utils_ExprUtils.walkCommonDefinition(d,cb);
	var _g = 0;
	var _g1 = d.flags;
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		switch(f._hx_index) {
		case 1:
			var ct = f.ct;
			checkstyle_utils_ExprUtils.walkComplexType(ct,cb);
			break;
		case 2:
			var ct1 = f.ct;
			checkstyle_utils_ExprUtils.walkComplexType(ct1,cb);
			break;
		case 3:
			var ct2 = f.ct;
			checkstyle_utils_ExprUtils.walkComplexType(ct2,cb);
			break;
		default:
		}
	}
	var _g2 = 0;
	var _g11 = d.data;
	while(_g2 < _g11.length) {
		var f1 = _g11[_g2];
		++_g2;
		checkstyle_utils_ExprUtils.walkField(f1,cb);
	}
};
checkstyle_utils_ExprUtils.walkImport = function(sl,mode,cb) {
};
checkstyle_utils_ExprUtils.walkTypedef = function(d,cb) {
	checkstyle_utils_ExprUtils.walkCommonDefinition(d,cb);
	checkstyle_utils_ExprUtils.walkComplexType(d.data,cb);
};
checkstyle_utils_ExprUtils.walkTypePath = function(tp,cb) {
	if(tp.params != null) {
		var _g = 0;
		var _g1 = tp.params;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			switch(p._hx_index) {
			case 0:
				var t = p.t;
				checkstyle_utils_ExprUtils.walkComplexType(t,cb);
				break;
			case 1:
				var e = p.e;
				checkstyle_utils_ExprUtils.walkExpr(e,cb);
				break;
			}
		}
	}
};
checkstyle_utils_ExprUtils.walkVar = function(v,cb) {
	if(v.type != null) {
		checkstyle_utils_ExprUtils.walkComplexType(v.type,cb);
	}
	if(v.expr != null) {
		checkstyle_utils_ExprUtils.walkExpr(v.expr,cb);
	}
};
checkstyle_utils_ExprUtils.walkTypeParamDecl = function(tp,cb) {
	if(tp.constraints != null) {
		var _g = 0;
		var _g1 = tp.constraints;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			checkstyle_utils_ExprUtils.walkComplexType(c,cb);
		}
	}
	if(tp.params != null) {
		var _g2 = 0;
		var _g11 = tp.params;
		while(_g2 < _g11.length) {
			var t = _g11[_g2];
			++_g2;
			checkstyle_utils_ExprUtils.walkTypeParamDecl(t,cb);
		}
	}
};
checkstyle_utils_ExprUtils.walkFunction = function(f,cb) {
	var _g = 0;
	var _g1 = f.args;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.type != null) {
			checkstyle_utils_ExprUtils.walkComplexType(a.type,cb);
		}
		if(a.value != null) {
			checkstyle_utils_ExprUtils.walkExpr(a.value,cb);
		}
	}
	if(f.ret != null) {
		checkstyle_utils_ExprUtils.walkComplexType(f.ret,cb);
	}
	if(f.expr != null) {
		checkstyle_utils_ExprUtils.walkExpr(f.expr,cb);
	}
	if(f.params != null) {
		var _g2 = 0;
		var _g11 = f.params;
		while(_g2 < _g11.length) {
			var tp = _g11[_g2];
			++_g2;
			checkstyle_utils_ExprUtils.walkTypeParamDecl(tp,cb);
		}
	}
};
checkstyle_utils_ExprUtils.walkCase = function(c,cb) {
	var _g = 0;
	var _g1 = c.values;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		checkstyle_utils_ExprUtils.walkExpr(v,cb);
	}
	if(c.guard != null) {
		checkstyle_utils_ExprUtils.walkExpr(c.guard,cb);
	}
	if(c.expr != null) {
		checkstyle_utils_ExprUtils.walkExpr(c.expr,cb);
	}
};
checkstyle_utils_ExprUtils.walkCatch = function(c,cb) {
	checkstyle_utils_ExprUtils.walkComplexType(c.type,cb);
	checkstyle_utils_ExprUtils.walkExpr(c.expr,cb);
};
checkstyle_utils_ExprUtils.walkField = function(f,cb) {
	var _g = f.kind;
	switch(_g._hx_index) {
	case 0:
		var e = _g.e;
		var t = _g.t;
		if(t != null) {
			checkstyle_utils_ExprUtils.walkComplexType(t,cb);
		}
		if(e != null) {
			checkstyle_utils_ExprUtils.walkExpr(e,cb);
		}
		break;
	case 1:
		var f1 = _g.f;
		checkstyle_utils_ExprUtils.walkFunction(f1,cb);
		break;
	case 2:
		var e1 = _g.e;
		var t1 = _g.t;
		var set = _g.set;
		var get = _g.get;
		if(t1 != null) {
			checkstyle_utils_ExprUtils.walkComplexType(t1,cb);
		}
		if(e1 != null) {
			checkstyle_utils_ExprUtils.walkExpr(e1,cb);
		}
		break;
	}
};
checkstyle_utils_ExprUtils.walkComplexType = function(t,cb) {
	if(t == null) {
		return;
	}
	switch(t._hx_index) {
	case 0:
		var p = t.p;
		checkstyle_utils_ExprUtils.walkTypePath(p,cb);
		break;
	case 1:
		var ret = t.ret;
		var args = t.args;
		var _g = 0;
		while(_g < args.length) {
			var a = args[_g];
			++_g;
			checkstyle_utils_ExprUtils.walkComplexType(a,cb);
		}
		checkstyle_utils_ExprUtils.walkComplexType(ret,cb);
		break;
	case 2:
		var fields = t.fields;
		var _g1 = 0;
		while(_g1 < fields.length) {
			var f = fields[_g1];
			++_g1;
			checkstyle_utils_ExprUtils.walkField(f,cb);
		}
		break;
	case 3:
		var t1 = t.t;
		checkstyle_utils_ExprUtils.walkComplexType(t1,cb);
		break;
	case 4:
		var fields1 = t.fields;
		var p1 = t.p;
		var _g2 = 0;
		while(_g2 < p1.length) {
			var tp = p1[_g2];
			++_g2;
			checkstyle_utils_ExprUtils.walkTypePath(tp,cb);
		}
		var _g3 = 0;
		while(_g3 < fields1.length) {
			var f1 = fields1[_g3];
			++_g3;
			checkstyle_utils_ExprUtils.walkField(f1,cb);
		}
		break;
	case 5:
		var t2 = t.t;
		checkstyle_utils_ExprUtils.walkComplexType(t2,cb);
		break;
	case 6:
		var t3 = t.t;
		var n = t.n;
		checkstyle_utils_ExprUtils.walkComplexType(t3,cb);
		break;
	case 7:
		var types = t.tl;
		var _g4 = 0;
		while(_g4 < types.length) {
			var t4 = types[_g4];
			++_g4;
			checkstyle_utils_ExprUtils.walkComplexType(t4,cb);
		}
		break;
	}
};
checkstyle_utils_ExprUtils.walkExpr = function(e,cb) {
	cb(e);
	var _g = e.expr;
	switch(_g._hx_index) {
	case 0:
		var c = _g.c;
		break;
	case 1:
		var e2 = _g.e2;
		var e1 = _g.e1;
		checkstyle_utils_ExprUtils.walkExpr(e1,cb);
		checkstyle_utils_ExprUtils.walkExpr(e2,cb);
		break;
	case 2:
		var e21 = _g.e2;
		var e11 = _g.e1;
		var op = _g.op;
		checkstyle_utils_ExprUtils.walkExpr(e11,cb);
		checkstyle_utils_ExprUtils.walkExpr(e21,cb);
		break;
	case 3:
		var field = _g.field;
		var e3 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e3,cb);
		break;
	case 4:
		var e4 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e4,cb);
		break;
	case 5:
		var fields = _g.fields;
		var _g1 = 0;
		while(_g1 < fields.length) {
			var f = fields[_g1];
			++_g1;
			checkstyle_utils_ExprUtils.walkExpr(f.expr,cb);
		}
		break;
	case 6:
		var values = _g.values;
		var _g2 = 0;
		while(_g2 < values.length) {
			var v = values[_g2];
			++_g2;
			checkstyle_utils_ExprUtils.walkExpr(v,cb);
		}
		break;
	case 7:
		var params = _g.params;
		var e5 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e5,cb);
		var _g3 = 0;
		while(_g3 < params.length) {
			var p = params[_g3];
			++_g3;
			checkstyle_utils_ExprUtils.walkExpr(p,cb);
		}
		break;
	case 8:
		var params1 = _g.params;
		var t = _g.t;
		checkstyle_utils_ExprUtils.walkTypePath(t,cb);
		var _g4 = 0;
		while(_g4 < params1.length) {
			var p1 = params1[_g4];
			++_g4;
			checkstyle_utils_ExprUtils.walkExpr(p1,cb);
		}
		break;
	case 9:
		var e6 = _g.e;
		var postFix = _g.postFix;
		var op1 = _g.op;
		checkstyle_utils_ExprUtils.walkExpr(e6,cb);
		break;
	case 10:
		var vars = _g.vars;
		var _g5 = 0;
		while(_g5 < vars.length) {
			var v1 = vars[_g5];
			++_g5;
			checkstyle_utils_ExprUtils.walkVar(v1,cb);
		}
		break;
	case 11:
		var f1 = _g.f;
		var name = _g.name;
		checkstyle_utils_ExprUtils.walkFunction(f1,cb);
		break;
	case 12:
		var exprs = _g.exprs;
		var _g6 = 0;
		while(_g6 < exprs.length) {
			var e7 = exprs[_g6];
			++_g6;
			checkstyle_utils_ExprUtils.walkExpr(e7,cb);
		}
		break;
	case 13:
		var expr = _g.expr;
		var it = _g.it;
		checkstyle_utils_ExprUtils.walkExpr(it,cb);
		checkstyle_utils_ExprUtils.walkExpr(expr,cb);
		break;
	case 14:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		checkstyle_utils_ExprUtils.walkExpr(econd,cb);
		checkstyle_utils_ExprUtils.walkExpr(eif,cb);
		if(eelse != null) {
			checkstyle_utils_ExprUtils.walkExpr(eelse,cb);
		}
		break;
	case 15:
		var normalWhile = _g.normalWhile;
		var e8 = _g.e;
		var econd1 = _g.econd;
		checkstyle_utils_ExprUtils.walkExpr(econd1,cb);
		checkstyle_utils_ExprUtils.walkExpr(e8,cb);
		break;
	case 16:
		var edef = _g.edef;
		var cases = _g.cases;
		var e9 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e9,cb);
		var _g7 = 0;
		while(_g7 < cases.length) {
			var c1 = cases[_g7];
			++_g7;
			checkstyle_utils_ExprUtils.walkCase(c1,cb);
		}
		if(edef != null && edef.expr != null) {
			checkstyle_utils_ExprUtils.walkExpr(edef,cb);
		}
		break;
	case 17:
		var catches = _g.catches;
		var e10 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e10,cb);
		var _g8 = 0;
		while(_g8 < catches.length) {
			var c2 = catches[_g8];
			++_g8;
			checkstyle_utils_ExprUtils.walkCatch(c2,cb);
		}
		break;
	case 18:
		var e12 = _g.e;
		if(e12 != null) {
			checkstyle_utils_ExprUtils.walkExpr(e12,cb);
		}
		break;
	case 19:
		break;
	case 20:
		break;
	case 21:
		var e13 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e13,cb);
		break;
	case 22:
		var e14 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e14,cb);
		break;
	case 23:
		var t1 = _g.t;
		var e15 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e15,cb);
		if(t1 != null) {
			checkstyle_utils_ExprUtils.walkComplexType(t1,cb);
		}
		break;
	case 24:
		var displayKind = _g.displayKind;
		var e16 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e16,cb);
		break;
	case 25:
		var t2 = _g.t;
		checkstyle_utils_ExprUtils.walkTypePath(t2,cb);
		break;
	case 26:
		var eelse1 = _g.eelse;
		var eif1 = _g.eif;
		var econd2 = _g.econd;
		checkstyle_utils_ExprUtils.walkExpr(econd2,cb);
		checkstyle_utils_ExprUtils.walkExpr(eif1,cb);
		checkstyle_utils_ExprUtils.walkExpr(eelse1,cb);
		break;
	case 27:
		var t3 = _g.t;
		var e17 = _g.e;
		checkstyle_utils_ExprUtils.walkExpr(e17,cb);
		checkstyle_utils_ExprUtils.walkComplexType(t3,cb);
		break;
	case 28:
		var e18 = _g.e;
		var s = _g.s;
		if(s.params != null) {
			var _g9 = 0;
			var _g11 = s.params;
			while(_g9 < _g11.length) {
				var mp = _g11[_g9];
				++_g9;
				checkstyle_utils_ExprUtils.walkExpr(mp,cb);
			}
		}
		checkstyle_utils_ExprUtils.walkExpr(e18,cb);
		break;
	}
};
checkstyle_utils_ExprUtils.hasMeta = function(meta,name) {
	var _g = 0;
	while(_g < meta.length) {
		var entry = meta[_g];
		++_g;
		if(entry.name == name) {
			return true;
		}
	}
	return false;
};
var checkstyle_utils_FieldUtils = function() { };
$hxClasses["checkstyle.utils.FieldUtils"] = checkstyle_utils_FieldUtils;
checkstyle_utils_FieldUtils.__name__ = "checkstyle.utils.FieldUtils";
checkstyle_utils_FieldUtils.isPublic = function(f,p) {
	if(f.access.indexOf(haxe_macro_Access.APublic) != -1) {
		return true;
	}
	if(f.access.indexOf(haxe_macro_Access.APrivate) != -1) {
		return false;
	}
	return !checkstyle_utils_FieldUtils.isDefaultPrivate(f,p);
};
checkstyle_utils_FieldUtils.isPrivate = function(f,p) {
	if(f.access.indexOf(haxe_macro_Access.APrivate) != -1) {
		return true;
	}
	if(f.access.indexOf(haxe_macro_Access.APublic) != -1) {
		return false;
	}
	return checkstyle_utils_FieldUtils.isDefaultPrivate(f,p);
};
checkstyle_utils_FieldUtils.isInline = function(f,p) {
	if(f.access.indexOf(haxe_macro_Access.AInline) == -1) {
		return p.kind == checkstyle_utils_FieldParentKind.ENUM_ABSTRACT;
	} else {
		return true;
	}
};
checkstyle_utils_FieldUtils.isStatic = function(f,p) {
	return f.access.indexOf(haxe_macro_Access.AStatic) != -1;
};
checkstyle_utils_FieldUtils.isDefaultPrivate = function(f,p) {
	if(p.kind == checkstyle_utils_FieldParentKind.INTERFACE) {
		return false;
	}
	var tmp;
	if(p.kind == checkstyle_utils_FieldParentKind.ENUM_ABSTRACT && f.access.indexOf(haxe_macro_Access.AStatic) == -1) {
		var _g = f.kind;
		tmp = _g._hx_index == 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		return false;
	}
	var _g1 = p.decl;
	if(_g1._hx_index == 0) {
		var d = _g1.d;
		if(checkstyle_utils_ExprUtils.hasMeta(d.meta,":publicFields")) {
			return false;
		}
	}
	return true;
};
checkstyle_utils_FieldUtils.isGetter = function(f) {
	return StringTools.startsWith(f.name,"get_");
};
checkstyle_utils_FieldUtils.isSetter = function(f) {
	return StringTools.startsWith(f.name,"set_");
};
checkstyle_utils_FieldUtils.isConstructor = function(f) {
	return f.name == "new";
};
checkstyle_utils_FieldUtils.toParentType = function(decl) {
	switch(decl._hx_index) {
	case 0:
		var d = decl.d;
		var kind = d.flags.indexOf(haxeparser_ClassFlag.HInterface) != -1 ? checkstyle_utils_FieldParentKind.INTERFACE : checkstyle_utils_FieldParentKind.CLASS;
		return { decl : decl, kind : kind};
	case 2:
		var a = decl.a;
		var metaName = ":enum";
		var kind1 = checkstyle_utils_ExprUtils.hasMeta(a.meta,metaName) ? checkstyle_utils_FieldParentKind.ENUM_ABSTRACT : checkstyle_utils_FieldParentKind.ABSTRACT;
		return { decl : decl, kind : kind1};
	case 4:
		var d1 = decl.d;
		return { decl : decl, kind : checkstyle_utils_FieldParentKind.TYPEDEF};
	default:
		return null;
	}
};
var checkstyle_utils_FieldParentKind = $hxEnums["checkstyle.utils.FieldParentKind"] = { __ename__ : true, __constructs__ : ["CLASS","INTERFACE","ABSTRACT","ENUM_ABSTRACT","TYPEDEF"]
	,CLASS: {_hx_index:0,__enum__:"checkstyle.utils.FieldParentKind",toString:$estr}
	,INTERFACE: {_hx_index:1,__enum__:"checkstyle.utils.FieldParentKind",toString:$estr}
	,ABSTRACT: {_hx_index:2,__enum__:"checkstyle.utils.FieldParentKind",toString:$estr}
	,ENUM_ABSTRACT: {_hx_index:3,__enum__:"checkstyle.utils.FieldParentKind",toString:$estr}
	,TYPEDEF: {_hx_index:4,__enum__:"checkstyle.utils.FieldParentKind",toString:$estr}
};
var checkstyle_utils_StringUtils = function() { };
$hxClasses["checkstyle.utils.StringUtils"] = checkstyle_utils_StringUtils;
checkstyle_utils_StringUtils.__name__ = "checkstyle.utils.StringUtils";
checkstyle_utils_StringUtils.contains = function(s,c) {
	return s.indexOf(c) != -1;
};
checkstyle_utils_StringUtils.isStringInterpolation = function(s,fileContent,pos) {
	var code = fileContent;
	var quote = code.sub(pos.min,1).toString();
	if(quote != "'") {
		return false;
	}
	var regex = new EReg("(^|[^$])\\$(\\{|[a-zA-Z0-9_]+)","");
	return regex.match(s);
};
checkstyle_utils_StringUtils.isEmpty = function(s) {
	if(s != null) {
		return s.length <= 0;
	} else {
		return true;
	}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,__class__: haxe_IMap
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		var _g = to;
		while(_g1 < _g) {
			var i = _g1++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,close: function() {
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	});
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		var i = _g1++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var _g21 = tmp.charCodeAt(i);
		switch(_g21) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i1 = _g21;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCharCode(i1);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i2 = _g21;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCharCode(i2);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_macro_Constant = $hxEnums["haxe.macro.Constant"] = { __ename__ : true, __constructs__ : ["CInt","CFloat","CString","CIdent","CRegexp"]
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["s"],$_)
	,CIdent: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["s"],$_)
	,CRegexp: ($_=function(r,opt) { return {_hx_index:4,r:r,opt:opt,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["r","opt"],$_)
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
var haxe_macro_QuoteStatus = $hxEnums["haxe.macro.QuoteStatus"] = { __ename__ : true, __constructs__ : ["Unquoted","Quoted"]
	,Unquoted: {_hx_index:0,__enum__:"haxe.macro.QuoteStatus",toString:$estr}
	,Quoted: {_hx_index:1,__enum__:"haxe.macro.QuoteStatus",toString:$estr}
};
var haxe_macro_ExprDef = $hxEnums["haxe.macro.ExprDef"] = { __ename__ : true, __constructs__ : ["EConst","EArray","EBinop","EField","EParenthesis","EObjectDecl","EArrayDecl","ECall","ENew","EUnop","EVars","EFunction","EBlock","EFor","EIf","EWhile","ESwitch","ETry","EReturn","EBreak","EContinue","EUntyped","EThrow","ECast","EDisplay","EDisplayNew","ETernary","ECheckType","EMeta"]
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EArray: ($_=function(e1,e2) { return {_hx_index:1,e1:e1,e2:e2,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e1","e2"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:2,op:op,e1:e1,e2:e2,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,EField: ($_=function(e,field) { return {_hx_index:3,e:e,field:field,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","field"],$_)
	,EParenthesis: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EObjectDecl: ($_=function(fields) { return {_hx_index:5,fields:fields,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,EArrayDecl: ($_=function(values) { return {_hx_index:6,values:values,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["values"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:7,e:e,params:params,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","params"],$_)
	,ENew: ($_=function(t,params) { return {_hx_index:8,t:t,params:params,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["t","params"],$_)
	,EUnop: ($_=function(op,postFix,e) { return {_hx_index:9,op:op,postFix:postFix,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["op","postFix","e"],$_)
	,EVars: ($_=function(vars) { return {_hx_index:10,vars:vars,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["vars"],$_)
	,EFunction: ($_=function(name,f) { return {_hx_index:11,name:name,f:f,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["name","f"],$_)
	,EBlock: ($_=function(exprs) { return {_hx_index:12,exprs:exprs,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["exprs"],$_)
	,EFor: ($_=function(it,expr) { return {_hx_index:13,it:it,expr:expr,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["it","expr"],$_)
	,EIf: ($_=function(econd,eif,eelse) { return {_hx_index:14,econd:econd,eif:eif,eelse:eelse,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,EWhile: ($_=function(econd,e,normalWhile) { return {_hx_index:15,econd:econd,e:e,normalWhile:normalWhile,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["econd","e","normalWhile"],$_)
	,ESwitch: ($_=function(e,cases,edef) { return {_hx_index:16,e:e,cases:cases,edef:edef,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","cases","edef"],$_)
	,ETry: ($_=function(e,catches) { return {_hx_index:17,e:e,catches:catches,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","catches"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:18,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EBreak: {_hx_index:19,__enum__:"haxe.macro.ExprDef",toString:$estr}
	,EContinue: {_hx_index:20,__enum__:"haxe.macro.ExprDef",toString:$estr}
	,EUntyped: ($_=function(e) { return {_hx_index:21,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:22,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ECast: ($_=function(e,t) { return {_hx_index:23,e:e,t:t,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","t"],$_)
	,EDisplay: ($_=function(e,displayKind) { return {_hx_index:24,e:e,displayKind:displayKind,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","displayKind"],$_)
	,EDisplayNew: ($_=function(t) { return {_hx_index:25,t:t,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["t"],$_)
	,ETernary: ($_=function(econd,eif,eelse) { return {_hx_index:26,econd:econd,eif:eif,eelse:eelse,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,ECheckType: ($_=function(e,t) { return {_hx_index:27,e:e,t:t,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","t"],$_)
	,EMeta: ($_=function(s,e) { return {_hx_index:28,s:s,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["s","e"],$_)
};
var haxe_macro_DisplayKind = $hxEnums["haxe.macro.DisplayKind"] = { __ename__ : true, __constructs__ : ["DKCall","DKDot","DKStructure","DKMarked","DKPattern"]
	,DKCall: {_hx_index:0,__enum__:"haxe.macro.DisplayKind",toString:$estr}
	,DKDot: {_hx_index:1,__enum__:"haxe.macro.DisplayKind",toString:$estr}
	,DKStructure: {_hx_index:2,__enum__:"haxe.macro.DisplayKind",toString:$estr}
	,DKMarked: {_hx_index:3,__enum__:"haxe.macro.DisplayKind",toString:$estr}
	,DKPattern: {_hx_index:4,__enum__:"haxe.macro.DisplayKind",toString:$estr}
};
var haxe_macro_ComplexType = $hxEnums["haxe.macro.ComplexType"] = { __ename__ : true, __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional","TNamed","TIntersection"]
	,TPath: ($_=function(p) { return {_hx_index:0,p:p,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["p"],$_)
	,TFunction: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["args","ret"],$_)
	,TAnonymous: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,TParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TExtend: ($_=function(p,fields) { return {_hx_index:4,p:p,fields:fields,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["p","fields"],$_)
	,TOptional: ($_=function(t) { return {_hx_index:5,t:t,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TNamed: ($_=function(n,t) { return {_hx_index:6,n:n,t:t,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["n","t"],$_)
	,TIntersection: ($_=function(tl) { return {_hx_index:7,tl:tl,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["tl"],$_)
};
var haxe_macro_TypeParam = $hxEnums["haxe.macro.TypeParam"] = { __ename__ : true, __constructs__ : ["TPType","TPExpr"]
	,TPType: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"haxe.macro.TypeParam",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TPExpr: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"haxe.macro.TypeParam",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_macro_Access = $hxEnums["haxe.macro.Access"] = { __ename__ : true, __constructs__ : ["APublic","APrivate","AStatic","AOverride","ADynamic","AInline","AMacro","AFinal","AExtern"]
	,APublic: {_hx_index:0,__enum__:"haxe.macro.Access",toString:$estr}
	,APrivate: {_hx_index:1,__enum__:"haxe.macro.Access",toString:$estr}
	,AStatic: {_hx_index:2,__enum__:"haxe.macro.Access",toString:$estr}
	,AOverride: {_hx_index:3,__enum__:"haxe.macro.Access",toString:$estr}
	,ADynamic: {_hx_index:4,__enum__:"haxe.macro.Access",toString:$estr}
	,AInline: {_hx_index:5,__enum__:"haxe.macro.Access",toString:$estr}
	,AMacro: {_hx_index:6,__enum__:"haxe.macro.Access",toString:$estr}
	,AFinal: {_hx_index:7,__enum__:"haxe.macro.Access",toString:$estr}
	,AExtern: {_hx_index:8,__enum__:"haxe.macro.Access",toString:$estr}
};
var haxe_macro_FieldType = $hxEnums["haxe.macro.FieldType"] = { __ename__ : true, __constructs__ : ["FVar","FFun","FProp"]
	,FVar: ($_=function(t,e) { return {_hx_index:0,t:t,e:e,__enum__:"haxe.macro.FieldType",toString:$estr}; },$_.__params__ = ["t","e"],$_)
	,FFun: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"haxe.macro.FieldType",toString:$estr}; },$_.__params__ = ["f"],$_)
	,FProp: ($_=function(get,set,t,e) { return {_hx_index:2,get:get,set:set,t:t,e:e,__enum__:"haxe.macro.FieldType",toString:$estr}; },$_.__params__ = ["get","set","t","e"],$_)
};
var haxe_macro_ExprTools = function() { };
$hxClasses["haxe.macro.ExprTools"] = haxe_macro_ExprTools;
haxe_macro_ExprTools.__name__ = "haxe.macro.ExprTools";
haxe_macro_ExprTools.toString = function(e) {
	return new haxe_macro_Printer().printExpr(e);
};
var haxe_macro_PositionTools = function() { };
$hxClasses["haxe.macro.PositionTools"] = haxe_macro_PositionTools;
haxe_macro_PositionTools.__name__ = "haxe.macro.PositionTools";
haxe_macro_PositionTools.make = function(inf) {
	return inf;
};
var haxe_macro_Printer = function(tabString) {
	if(tabString == null) {
		tabString = "\t";
	}
	this.tabs = "";
	this.tabString = tabString;
};
$hxClasses["haxe.macro.Printer"] = haxe_macro_Printer;
haxe_macro_Printer.__name__ = "haxe.macro.Printer";
haxe_macro_Printer.prototype = {
	tabs: null
	,tabString: null
	,printUnop: function(op) {
		switch(op._hx_index) {
		case 0:
			return "++";
		case 1:
			return "--";
		case 2:
			return "!";
		case 3:
			return "-";
		case 4:
			return "~";
		}
	}
	,printBinop: function(op) {
		switch(op._hx_index) {
		case 0:
			return "+";
		case 1:
			return "*";
		case 2:
			return "/";
		case 3:
			return "-";
		case 4:
			return "=";
		case 5:
			return "==";
		case 6:
			return "!=";
		case 7:
			return ">";
		case 8:
			return ">=";
		case 9:
			return "<";
		case 10:
			return "<=";
		case 11:
			return "&";
		case 12:
			return "|";
		case 13:
			return "^";
		case 14:
			return "&&";
		case 15:
			return "||";
		case 16:
			return "<<";
		case 17:
			return ">>";
		case 18:
			return ">>>";
		case 19:
			return "%";
		case 20:
			var op1 = op.op;
			return this.printBinop(op1) + "=";
		case 21:
			return "...";
		case 22:
			return "=>";
		case 23:
			return "in";
		}
	}
	,escapeString: function(s,delim) {
		return delim + StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(s,"\n","\\n"),"\t","\\t"),"\r","\\r"),"'","\\'"),"\"","\\\"") + delim;
	}
	,printString: function(s) {
		return this.escapeString(s,"\"");
	}
	,printConstant: function(c) {
		switch(c._hx_index) {
		case 0:
			var s = c.v;
			return s;
		case 1:
			var s1 = c.f;
			return s1;
		case 2:
			var s2 = c.s;
			return this.printString(s2);
		case 3:
			var s3 = c.s;
			return s3;
		case 4:
			var opt = c.opt;
			var s4 = c.r;
			return "~/" + s4 + "/" + opt;
		}
	}
	,printTypeParam: function(param) {
		switch(param._hx_index) {
		case 0:
			var ct = param.t;
			return this.printComplexType(ct);
		case 1:
			var e = param.e;
			return this.printExpr(e);
		}
	}
	,printTypePath: function(tp) {
		return (tp.pack.length > 0 ? tp.pack.join(".") + "." : "") + tp.name + (tp.sub != null ? "." + tp.sub : "") + (tp.params == null ? "" : tp.params.length > 0 ? "<" + tp.params.map($bind(this,this.printTypeParam)).join(", ") + ">" : "");
	}
	,printComplexType: function(ct) {
		var _gthis = this;
		switch(ct._hx_index) {
		case 0:
			var tp = ct.p;
			return this.printTypePath(tp);
		case 1:
			var ret = ct.ret;
			var args = ct.args;
			var printArg = function(ct1) {
				if(ct1._hx_index == 1) {
					return "(" + _gthis.printComplexType(ct1) + ")";
				} else {
					return _gthis.printComplexType(ct1);
				}
			};
			return (args.length > 0 ? args.map(printArg).join(" -> ") : "Void") + " -> " + this.printComplexType(ret);
		case 2:
			var fields = ct.fields;
			var _g = [];
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				_g.push(this.printField(f) + "; ");
			}
			return "{ " + _g.join("") + "}";
		case 3:
			var ct2 = ct.t;
			return "(" + this.printComplexType(ct2) + ")";
		case 4:
			var fields1 = ct.fields;
			var tpl = ct.p;
			return "{> " + tpl.map($bind(this,this.printTypePath)).join(" >, ") + ", " + fields1.map($bind(this,this.printField)).join(", ") + " }";
		case 5:
			var ct3 = ct.t;
			return "?" + this.printComplexType(ct3);
		case 6:
			var ct4 = ct.t;
			var n = ct.n;
			return n + ":" + this.printComplexType(ct4);
		case 7:
			var tl = ct.tl;
			return tl.map($bind(this,this.printComplexType)).join(" & ");
		}
	}
	,printMetadata: function(meta) {
		return "@" + meta.name + (meta.params != null && meta.params.length > 0 ? "(" + this.printExprs(meta.params,", ") + ")" : "");
	}
	,printAccess: function(access) {
		switch(access._hx_index) {
		case 0:
			return "public";
		case 1:
			return "private";
		case 2:
			return "static";
		case 3:
			return "override";
		case 4:
			return "dynamic";
		case 5:
			return "inline";
		case 6:
			return "macro";
		case 7:
			return "final";
		case 8:
			return "extern";
		}
	}
	,printField: function(field) {
		var tmp = (field.doc != null && field.doc != "" ? "/**\n" + this.tabs + this.tabString + StringTools.replace(field.doc,"\n","\n" + this.tabs + this.tabString) + "\n" + this.tabs + "**/\n" + this.tabs : "") + (field.meta != null && field.meta.length > 0 ? field.meta.map($bind(this,this.printMetadata)).join("\n" + this.tabs) + ("\n" + this.tabs) : "") + (field.access != null && field.access.length > 0 ? field.access.map($bind(this,this.printAccess)).join(" ") + " " : "");
		var _g = field.kind;
		var tmp1;
		switch(_g._hx_index) {
		case 0:
			var eo = _g.e;
			var t = _g.t;
			tmp1 = "var " + field.name + this.opt(t,$bind(this,this.printComplexType)," : ") + this.opt(eo,$bind(this,this.printExpr)," = ");
			break;
		case 1:
			var func = _g.f;
			tmp1 = "function " + field.name + this.printFunction(func);
			break;
		case 2:
			var eo1 = _g.e;
			var t1 = _g.t;
			var set = _g.set;
			var get = _g.get;
			tmp1 = "var " + field.name + "(" + get + ", " + set + ")" + this.opt(t1,$bind(this,this.printComplexType)," : ") + this.opt(eo1,$bind(this,this.printExpr)," = ");
			break;
		}
		return tmp + tmp1;
	}
	,printTypeParamDecl: function(tpd) {
		return tpd.name + (tpd.params != null && tpd.params.length > 0 ? "<" + tpd.params.map($bind(this,this.printTypeParamDecl)).join(", ") + ">" : "") + (tpd.constraints != null && tpd.constraints.length > 0 ? ":(" + tpd.constraints.map($bind(this,this.printComplexType)).join(", ") + ")" : "");
	}
	,printFunctionArg: function(arg) {
		return (arg.opt ? "?" : "") + arg.name + this.opt(arg.type,$bind(this,this.printComplexType),":") + this.opt(arg.value,$bind(this,this.printExpr)," = ");
	}
	,printFunction: function(func) {
		return (func.params == null ? "" : func.params.length > 0 ? "<" + func.params.map($bind(this,this.printTypeParamDecl)).join(", ") + ">" : "") + "(" + func.args.map($bind(this,this.printFunctionArg)).join(", ") + ")" + this.opt(func.ret,$bind(this,this.printComplexType),":") + this.opt(func.expr,$bind(this,this.printExpr)," ");
	}
	,printVar: function(v) {
		return v.name + this.opt(v.type,$bind(this,this.printComplexType),":") + this.opt(v.expr,$bind(this,this.printExpr)," = ");
	}
	,printObjectFieldKey: function(of) {
		var _g = of.quotes;
		if(_g == null) {
			return of.field;
		} else {
			switch(_g._hx_index) {
			case 0:
				return of.field;
			case 1:
				return "\"" + of.field + "\"";
			}
		}
	}
	,printObjectField: function(of) {
		return "" + this.printObjectFieldKey(of) + " : " + this.printExpr(of.expr);
	}
	,printExpr: function(e) {
		var _gthis = this;
		if(e == null) {
			return "#NULL";
		} else {
			var _g = e.expr;
			switch(_g._hx_index) {
			case 0:
				var c = _g.c;
				return this.printConstant(c);
			case 1:
				var e2 = _g.e2;
				var e1 = _g.e1;
				return "" + this.printExpr(e1) + "[" + this.printExpr(e2) + "]";
			case 2:
				var e21 = _g.e2;
				var e11 = _g.e1;
				var op = _g.op;
				return "" + this.printExpr(e11) + " " + this.printBinop(op) + " " + this.printExpr(e21);
			case 3:
				var n = _g.field;
				var e12 = _g.e;
				return "" + this.printExpr(e12) + "." + n;
			case 4:
				var e13 = _g.e;
				return "(" + this.printExpr(e13) + ")";
			case 5:
				var fl = _g.fields;
				return "{ " + fl.map(function(fld) {
					return _gthis.printObjectField(fld);
				}).join(", ") + " }";
			case 6:
				var el = _g.values;
				return "[" + this.printExprs(el,", ") + "]";
			case 7:
				var el1 = _g.params;
				var e14 = _g.e;
				return "" + this.printExpr(e14) + "(" + this.printExprs(el1,", ") + ")";
			case 8:
				var el2 = _g.params;
				var tp = _g.t;
				return "new " + this.printTypePath(tp) + "(" + this.printExprs(el2,", ") + ")";
			case 9:
				switch(_g.postFix) {
				case false:
					var e15 = _g.e;
					var op1 = _g.op;
					return this.printUnop(op1) + this.printExpr(e15);
				case true:
					var e16 = _g.e;
					var op2 = _g.op;
					return this.printExpr(e16) + this.printUnop(op2);
				}
				break;
			case 10:
				var vl = _g.vars;
				return "var " + vl.map($bind(this,this.printVar)).join(", ");
			case 11:
				var func = _g.f;
				var no = _g.name;
				if(no != null) {
					return "function " + no + this.printFunction(func);
				} else {
					var func1 = _g.f;
					return "function" + this.printFunction(func1);
				}
				break;
			case 12:
				if(_g.exprs.length == 0) {
					return "{ }";
				} else {
					var el3 = _g.exprs;
					var old = this.tabs;
					this.tabs += this.tabString;
					var s = "{\n" + this.tabs + this.printExprs(el3,";\n" + this.tabs);
					this.tabs = old;
					return s + (";\n" + this.tabs + "}");
				}
				break;
			case 13:
				var e22 = _g.expr;
				var e17 = _g.it;
				return "for (" + this.printExpr(e17) + ") " + this.printExpr(e22);
			case 14:
				if(_g.eelse == null) {
					var econd = _g.econd;
					var eif = _g.eif;
					return "if (" + this.printExpr(econd) + ") " + this.printExpr(eif);
				} else {
					var econd1 = _g.econd;
					var eif1 = _g.eif;
					var eelse = _g.eelse;
					return "if (" + this.printExpr(econd1) + ") " + this.printExpr(eif1) + " else " + this.printExpr(eelse);
				}
				break;
			case 15:
				switch(_g.normalWhile) {
				case false:
					var econd2 = _g.econd;
					var e18 = _g.e;
					return "do " + this.printExpr(e18) + " while (" + this.printExpr(econd2) + ")";
				case true:
					var econd3 = _g.econd;
					var e19 = _g.e;
					return "while (" + this.printExpr(econd3) + ") " + this.printExpr(e19);
				}
				break;
			case 16:
				var edef = _g.edef;
				var cl = _g.cases;
				var e110 = _g.e;
				var old1 = this.tabs;
				this.tabs += this.tabString;
				var s1 = "switch " + this.printExpr(e110) + " {\n" + this.tabs + cl.map(function(c1) {
					return "case " + _gthis.printExprs(c1.values,", ") + (c1.guard != null ? " if (" + _gthis.printExpr(c1.guard) + "):" : ":") + (c1.expr != null ? _gthis.opt(c1.expr,$bind(_gthis,_gthis.printExpr)) + ";" : "");
				}).join("\n" + this.tabs);
				if(edef != null) {
					s1 += "\n" + this.tabs + "default:" + (edef.expr == null ? "" : this.printExpr(edef) + ";");
				}
				this.tabs = old1;
				return s1 + ("\n" + this.tabs + "}");
			case 17:
				var cl1 = _g.catches;
				var e111 = _g.e;
				return "try " + this.printExpr(e111) + cl1.map(function(c2) {
					return " catch(" + c2.name + ":" + _gthis.printComplexType(c2.type) + ") " + _gthis.printExpr(c2.expr);
				}).join("");
			case 18:
				var eo = _g.e;
				return "return" + this.opt(eo,$bind(this,this.printExpr)," ");
			case 19:
				return "break";
			case 20:
				return "continue";
			case 21:
				var e112 = _g.e;
				return "untyped " + this.printExpr(e112);
			case 22:
				var e113 = _g.e;
				return "throw " + this.printExpr(e113);
			case 23:
				var cto = _g.t;
				var e114 = _g.e;
				if(cto != null) {
					return "cast(" + this.printExpr(e114) + ", " + this.printComplexType(cto) + ")";
				} else {
					var e115 = _g.e;
					return "cast " + this.printExpr(e115);
				}
				break;
			case 24:
				var e116 = _g.e;
				return "#DISPLAY(" + this.printExpr(e116) + ")";
			case 25:
				var tp1 = _g.t;
				return "#DISPLAY(" + this.printTypePath(tp1) + ")";
			case 26:
				var eelse1 = _g.eelse;
				var eif2 = _g.eif;
				var econd4 = _g.econd;
				return "" + this.printExpr(econd4) + " ? " + this.printExpr(eif2) + " : " + this.printExpr(eelse1);
			case 27:
				var ct = _g.t;
				var e117 = _g.e;
				return "(" + this.printExpr(e117) + " : " + this.printComplexType(ct) + ")";
			case 28:
				var e118 = _g.e;
				var meta = _g.s;
				return this.printMetadata(meta) + " " + this.printExpr(e118);
			}
		}
	}
	,printExprs: function(el,sep) {
		return el.map($bind(this,this.printExpr)).join(sep);
	}
	,opt: function(v,f,prefix) {
		if(prefix == null) {
			prefix = "";
		}
		if(v == null) {
			return "";
		} else {
			return prefix + f(v);
		}
	}
	,__class__: haxe_macro_Printer
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var haxeparser_Keyword = $hxEnums["haxeparser.Keyword"] = { __ename__ : true, __constructs__ : ["KwdFunction","KwdClass","KwdVar","KwdIf","KwdElse","KwdWhile","KwdDo","KwdFor","KwdBreak","KwdContinue","KwdReturn","KwdExtends","KwdImplements","KwdImport","KwdSwitch","KwdCase","KwdDefault","KwdStatic","KwdPublic","KwdPrivate","KwdTry","KwdCatch","KwdNew","KwdThis","KwdThrow","KwdExtern","KwdEnum","KwdInterface","KwdUntyped","KwdCast","KwdOverride","KwdTypedef","KwdDynamic","KwdPackage","KwdInline","KwdUsing","KwdNull","KwdTrue","KwdFalse","KwdAbstract","KwdMacro"]
	,KwdFunction: {_hx_index:0,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdClass: {_hx_index:1,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdVar: {_hx_index:2,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdIf: {_hx_index:3,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdElse: {_hx_index:4,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdWhile: {_hx_index:5,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdDo: {_hx_index:6,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdFor: {_hx_index:7,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdBreak: {_hx_index:8,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdContinue: {_hx_index:9,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdReturn: {_hx_index:10,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdExtends: {_hx_index:11,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdImplements: {_hx_index:12,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdImport: {_hx_index:13,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdSwitch: {_hx_index:14,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdCase: {_hx_index:15,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdDefault: {_hx_index:16,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdStatic: {_hx_index:17,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdPublic: {_hx_index:18,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdPrivate: {_hx_index:19,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdTry: {_hx_index:20,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdCatch: {_hx_index:21,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdNew: {_hx_index:22,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdThis: {_hx_index:23,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdThrow: {_hx_index:24,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdExtern: {_hx_index:25,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdEnum: {_hx_index:26,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdInterface: {_hx_index:27,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdUntyped: {_hx_index:28,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdCast: {_hx_index:29,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdOverride: {_hx_index:30,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdTypedef: {_hx_index:31,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdDynamic: {_hx_index:32,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdPackage: {_hx_index:33,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdInline: {_hx_index:34,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdUsing: {_hx_index:35,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdNull: {_hx_index:36,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdTrue: {_hx_index:37,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdFalse: {_hx_index:38,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdAbstract: {_hx_index:39,__enum__:"haxeparser.Keyword",toString:$estr}
	,KwdMacro: {_hx_index:40,__enum__:"haxeparser.Keyword",toString:$estr}
};
var haxeparser_KeywordPrinter = function() { };
$hxClasses["haxeparser.KeywordPrinter"] = haxeparser_KeywordPrinter;
haxeparser_KeywordPrinter.__name__ = "haxeparser.KeywordPrinter";
haxeparser_KeywordPrinter.toString = function(kwd) {
	switch(kwd._hx_index) {
	case 0:
		return "function";
	case 1:
		return "class";
	case 2:
		return "var";
	case 3:
		return "if";
	case 4:
		return "else";
	case 5:
		return "while";
	case 6:
		return "do";
	case 7:
		return "for";
	case 8:
		return "break";
	case 9:
		return "continue";
	case 10:
		return "return";
	case 11:
		return "extends";
	case 12:
		return "implements";
	case 13:
		return "import";
	case 14:
		return "switch";
	case 15:
		return "case";
	case 16:
		return "default";
	case 17:
		return "static";
	case 18:
		return "public";
	case 19:
		return "private";
	case 20:
		return "try";
	case 21:
		return "catch";
	case 22:
		return "new";
	case 23:
		return "this";
	case 24:
		return "throw";
	case 25:
		return "extern";
	case 26:
		return "enum";
	case 27:
		return "interface";
	case 28:
		return "untyped";
	case 29:
		return "cast";
	case 30:
		return "override";
	case 31:
		return "typedef";
	case 32:
		return "dynamic";
	case 33:
		return "package";
	case 34:
		return "inline";
	case 35:
		return "using";
	case 36:
		return "null";
	case 37:
		return "true";
	case 38:
		return "false";
	case 39:
		return "abstract";
	case 40:
		return "macro";
	}
};
var haxeparser_TokenDef = $hxEnums["haxeparser.TokenDef"] = { __ename__ : true, __constructs__ : ["Kwd","Const","Sharp","Dollar","Unop","Binop","Comment","CommentLine","IntInterval","Semicolon","Dot","DblDot","Arrow","Comma","BkOpen","BkClose","BrOpen","BrClose","POpen","PClose","Question","At","Eof"]
	,Kwd: ($_=function(k) { return {_hx_index:0,k:k,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["k"],$_)
	,Const: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,Sharp: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Dollar: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Unop: ($_=function(op) { return {_hx_index:4,op:op,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["op"],$_)
	,Binop: ($_=function(op) { return {_hx_index:5,op:op,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["op"],$_)
	,Comment: ($_=function(s) { return {_hx_index:6,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,CommentLine: ($_=function(s) { return {_hx_index:7,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,IntInterval: ($_=function(s) { return {_hx_index:8,s:s,__enum__:"haxeparser.TokenDef",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Semicolon: {_hx_index:9,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Dot: {_hx_index:10,__enum__:"haxeparser.TokenDef",toString:$estr}
	,DblDot: {_hx_index:11,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Arrow: {_hx_index:12,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Comma: {_hx_index:13,__enum__:"haxeparser.TokenDef",toString:$estr}
	,BkOpen: {_hx_index:14,__enum__:"haxeparser.TokenDef",toString:$estr}
	,BkClose: {_hx_index:15,__enum__:"haxeparser.TokenDef",toString:$estr}
	,BrOpen: {_hx_index:16,__enum__:"haxeparser.TokenDef",toString:$estr}
	,BrClose: {_hx_index:17,__enum__:"haxeparser.TokenDef",toString:$estr}
	,POpen: {_hx_index:18,__enum__:"haxeparser.TokenDef",toString:$estr}
	,PClose: {_hx_index:19,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Question: {_hx_index:20,__enum__:"haxeparser.TokenDef",toString:$estr}
	,At: {_hx_index:21,__enum__:"haxeparser.TokenDef",toString:$estr}
	,Eof: {_hx_index:22,__enum__:"haxeparser.TokenDef",toString:$estr}
};
var haxeparser_TokenDefPrinter = function() { };
$hxClasses["haxeparser.TokenDefPrinter"] = haxeparser_TokenDefPrinter;
haxeparser_TokenDefPrinter.__name__ = "haxeparser.TokenDefPrinter";
haxeparser_TokenDefPrinter.toString = function(def) {
	switch(def._hx_index) {
	case 0:
		var k = def.k;
		return HxOverrides.substr($hxEnums[k.__enum__].__constructs__[k._hx_index],3,null).toLowerCase();
	case 1:
		switch(def.c._hx_index) {
		case 0:
			var s = def.c.v;
			return s;
		case 1:
			var s1 = def.c.f;
			return s1;
		case 2:
			var s2 = def.c.s;
			return "\"" + s2 + "\"";
		case 3:
			var s3 = def.c.s;
			return s3;
		case 4:
			var opt = def.c.opt;
			var r = def.c.r;
			return "~/" + r + "/" + opt;
		}
		break;
	case 2:
		var s4 = def.s;
		return "#" + s4;
	case 3:
		var s5 = def.s;
		return "$" + s5;
	case 4:
		var op = def.op;
		return new haxe_macro_Printer("").printUnop(op);
	case 5:
		var op1 = def.op;
		return new haxe_macro_Printer("").printBinop(op1);
	case 6:
		var s6 = def.s;
		return "/*" + s6 + "*/";
	case 7:
		var s7 = def.s;
		return "//" + s7;
	case 8:
		var s8 = def.s;
		return "" + s8 + "...";
	case 9:
		return ";";
	case 10:
		return ".";
	case 11:
		return ":";
	case 12:
		return "->";
	case 13:
		return ",";
	case 14:
		return "[";
	case 15:
		return "]";
	case 16:
		return "{";
	case 17:
		return "}";
	case 18:
		return "(";
	case 19:
		return ")";
	case 20:
		return "?";
	case 21:
		return "@";
	case 22:
		return "<eof>";
	}
};
haxeparser_TokenDefPrinter.print = function(def) {
	return haxeparser_TokenDefPrinter.toString(def);
};
var haxeparser_Token = function(tok,pos) {
	this.tok = tok;
	this.pos = pos;
};
$hxClasses["haxeparser.Token"] = haxeparser_Token;
haxeparser_Token.__name__ = "haxeparser.Token";
haxeparser_Token.prototype = {
	tok: null
	,pos: null
	,toString: function() {
		return haxeparser_TokenDefPrinter.toString(this.tok);
	}
	,__class__: haxeparser_Token
};
var haxeparser_TypeDef = $hxEnums["haxeparser.TypeDef"] = { __ename__ : true, __constructs__ : ["EClass","EEnum","EAbstract","EImport","ETypedef","EUsing"]
	,EClass: ($_=function(d) { return {_hx_index:0,d:d,__enum__:"haxeparser.TypeDef",toString:$estr}; },$_.__params__ = ["d"],$_)
	,EEnum: ($_=function(d) { return {_hx_index:1,d:d,__enum__:"haxeparser.TypeDef",toString:$estr}; },$_.__params__ = ["d"],$_)
	,EAbstract: ($_=function(a) { return {_hx_index:2,a:a,__enum__:"haxeparser.TypeDef",toString:$estr}; },$_.__params__ = ["a"],$_)
	,EImport: ($_=function(sl,mode) { return {_hx_index:3,sl:sl,mode:mode,__enum__:"haxeparser.TypeDef",toString:$estr}; },$_.__params__ = ["sl","mode"],$_)
	,ETypedef: ($_=function(d) { return {_hx_index:4,d:d,__enum__:"haxeparser.TypeDef",toString:$estr}; },$_.__params__ = ["d"],$_)
	,EUsing: ($_=function(path) { return {_hx_index:5,path:path,__enum__:"haxeparser.TypeDef",toString:$estr}; },$_.__params__ = ["path"],$_)
};
var haxeparser_ClassFlag = $hxEnums["haxeparser.ClassFlag"] = { __ename__ : true, __constructs__ : ["HInterface","HExtern","HPrivate","HExtends","HImplements"]
	,HInterface: {_hx_index:0,__enum__:"haxeparser.ClassFlag",toString:$estr}
	,HExtern: {_hx_index:1,__enum__:"haxeparser.ClassFlag",toString:$estr}
	,HPrivate: {_hx_index:2,__enum__:"haxeparser.ClassFlag",toString:$estr}
	,HExtends: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxeparser.ClassFlag",toString:$estr}; },$_.__params__ = ["t"],$_)
	,HImplements: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"haxeparser.ClassFlag",toString:$estr}; },$_.__params__ = ["t"],$_)
};
var haxeparser_AbstractFlag = $hxEnums["haxeparser.AbstractFlag"] = { __ename__ : true, __constructs__ : ["APrivAbstract","AFromType","AToType","AIsType","AExtern"]
	,APrivAbstract: {_hx_index:0,__enum__:"haxeparser.AbstractFlag",toString:$estr}
	,AFromType: ($_=function(ct) { return {_hx_index:1,ct:ct,__enum__:"haxeparser.AbstractFlag",toString:$estr}; },$_.__params__ = ["ct"],$_)
	,AToType: ($_=function(ct) { return {_hx_index:2,ct:ct,__enum__:"haxeparser.AbstractFlag",toString:$estr}; },$_.__params__ = ["ct"],$_)
	,AIsType: ($_=function(ct) { return {_hx_index:3,ct:ct,__enum__:"haxeparser.AbstractFlag",toString:$estr}; },$_.__params__ = ["ct"],$_)
	,AExtern: {_hx_index:4,__enum__:"haxeparser.AbstractFlag",toString:$estr}
};
var haxeparser_EnumFlag = $hxEnums["haxeparser.EnumFlag"] = { __ename__ : true, __constructs__ : ["EPrivate","EExtern"]
	,EPrivate: {_hx_index:0,__enum__:"haxeparser.EnumFlag",toString:$estr}
	,EExtern: {_hx_index:1,__enum__:"haxeparser.EnumFlag",toString:$estr}
};
var haxeparser_ImportMode = $hxEnums["haxeparser.ImportMode"] = { __ename__ : true, __constructs__ : ["INormal","IAsName","IAll"]
	,INormal: {_hx_index:0,__enum__:"haxeparser.ImportMode",toString:$estr}
	,IAsName: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"haxeparser.ImportMode",toString:$estr}; },$_.__params__ = ["s"],$_)
	,IAll: {_hx_index:2,__enum__:"haxeparser.ImportMode",toString:$estr}
};
var haxeparser_LexerErrorMsg = $hxEnums["haxeparser.LexerErrorMsg"] = { __ename__ : true, __constructs__ : ["UnterminatedString","UnterminatedRegExp","UnclosedComment","UnterminatedEscapeSequence","InvalidEscapeSequence","UnknownEscapeSequence","UnclosedCode"]
	,UnterminatedString: {_hx_index:0,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
	,UnterminatedRegExp: {_hx_index:1,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
	,UnclosedComment: {_hx_index:2,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
	,UnterminatedEscapeSequence: {_hx_index:3,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
	,InvalidEscapeSequence: ($_=function(c) { return {_hx_index:4,c:c,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}; },$_.__params__ = ["c"],$_)
	,UnknownEscapeSequence: ($_=function(c) { return {_hx_index:5,c:c,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}; },$_.__params__ = ["c"],$_)
	,UnclosedCode: {_hx_index:6,__enum__:"haxeparser.LexerErrorMsg",toString:$estr}
};
var haxeparser_LexerError = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["haxeparser.LexerError"] = haxeparser_LexerError;
haxeparser_LexerError.__name__ = "haxeparser.LexerError";
haxeparser_LexerError.prototype = {
	msg: null
	,pos: null
	,__class__: haxeparser_LexerError
};
var hxparse_Lexer = function(input,sourceName) {
	if(sourceName == null) {
		sourceName = "<null>";
	}
	this.current = "";
	this.input = input;
	this.source = sourceName;
	this.pos = 0;
};
$hxClasses["hxparse.Lexer"] = hxparse_Lexer;
hxparse_Lexer.__name__ = "hxparse.Lexer";
hxparse_Lexer.buildRuleset = function(rules,name) {
	if(name == null) {
		name = "";
	}
	var cases = [];
	var functions = [];
	var eofFunction = null;
	var _g = 0;
	while(_g < rules.length) {
		var rule = rules[_g];
		++_g;
		if(rule.rule == "") {
			eofFunction = rule.func;
		} else {
			cases.push(hxparse_LexEngine.parse(rule.rule));
			functions.push(rule.func);
		}
	}
	return new hxparse_Ruleset(new hxparse_LexEngine(cases).firstState(),functions,eofFunction,name);
};
hxparse_Lexer.prototype = {
	current: null
	,input: null
	,source: null
	,pos: null
	,curPos: function() {
		return new hxparse_Position(this.source,this.pos - this.current.length,this.pos);
	}
	,token: function(ruleset) {
		if(this.pos == this.input.length) {
			if(ruleset.eofFunction != null) {
				return ruleset.eofFunction(this);
			} else {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			}
		}
		var state = ruleset.state;
		var lastMatch = null;
		var lastMatchPos = this.pos;
		var start = this.pos;
		while(true) {
			if(state.finalId > -1) {
				lastMatch = state;
				lastMatchPos = this.pos;
			}
			if(this.pos == this.input.length) {
				break;
			}
			var i = this.input.b[this.pos];
			++this.pos;
			state = state.trans[i];
			if(state == null) {
				break;
			}
		}
		this.pos = lastMatchPos;
		this.current = this.input.getString(start,this.pos - start);
		if(lastMatch == null || lastMatch.finalId == -1) {
			throw new js__$Boot_HaxeError(new hxparse_UnexpectedChar(String.fromCharCode(this.input.b[this.pos]),new hxparse_Position(this.source,this.pos - this.current.length,this.pos)));
		}
		return ruleset.functions[lastMatch.finalId](this);
	}
	,__class__: hxparse_Lexer
};
var hxparse_RuleBuilder = function() { };
$hxClasses["hxparse.RuleBuilder"] = hxparse_RuleBuilder;
hxparse_RuleBuilder.__name__ = "hxparse.RuleBuilder";
var hxparse_LexEngine = function(patterns) {
	this.nodes = [];
	this.finals = [];
	this.states = [];
	this.hstates = new haxe_ds_StringMap();
	this.uid = 0;
	var pid = 0;
	var _g = 0;
	while(_g < patterns.length) {
		var p = patterns[_g];
		++_g;
		var id = pid++;
		var f = new hxparse__$LexEngine_Node(this.uid++,id);
		var n = this.initNode(p,f,id);
		this.nodes.push(n);
		this.finals.push(f);
	}
	this.makeState(this.addNodes([],this.nodes));
};
$hxClasses["hxparse.LexEngine"] = hxparse_LexEngine;
hxparse_LexEngine.__name__ = "hxparse.LexEngine";
hxparse_LexEngine.single = function(c) {
	return [{ min : c, max : c}];
};
hxparse_LexEngine.parse = function(pattern) {
	var this1 = haxe_io_Bytes.ofString(pattern);
	var p = hxparse_LexEngine.parseInner(this1);
	if(p == null) {
		throw new js__$Boot_HaxeError("Invalid pattern '" + pattern + "'");
	}
	return p.pattern;
};
hxparse_LexEngine.next = function(a,b) {
	if(a == hxparse__$LexEngine_Pattern.Empty) {
		return b;
	} else {
		return hxparse__$LexEngine_Pattern.Next(a,b);
	}
};
hxparse_LexEngine.plus = function(r) {
	if(r._hx_index == 4) {
		var r2 = r.p2;
		var r1 = r.p1;
		return hxparse__$LexEngine_Pattern.Next(r1,hxparse_LexEngine.plus(r2));
	} else {
		return hxparse__$LexEngine_Pattern.Plus(r);
	}
};
hxparse_LexEngine.star = function(r) {
	if(r._hx_index == 4) {
		var r2 = r.p2;
		var r1 = r.p1;
		return hxparse__$LexEngine_Pattern.Next(r1,hxparse_LexEngine.star(r2));
	} else {
		return hxparse__$LexEngine_Pattern.Star(r);
	}
};
hxparse_LexEngine.opt = function(r) {
	if(r._hx_index == 4) {
		var r2 = r.p2;
		var r1 = r.p1;
		return hxparse__$LexEngine_Pattern.Next(r1,hxparse_LexEngine.opt(r2));
	} else {
		return hxparse__$LexEngine_Pattern.Choice(r,hxparse__$LexEngine_Pattern.Empty);
	}
};
hxparse_LexEngine.cinter = function(c1,c2) {
	return hxparse_LexEngine.ccomplement(hxparse_LexEngine.cunion(hxparse_LexEngine.ccomplement(c1),hxparse_LexEngine.ccomplement(c2)));
};
hxparse_LexEngine.cdiff = function(c1,c2) {
	return hxparse_LexEngine.ccomplement(hxparse_LexEngine.cunion(hxparse_LexEngine.ccomplement(c1),c2));
};
hxparse_LexEngine.ccomplement = function(c) {
	var first = c[0];
	var start = first != null && first.min == -1 ? c.shift().max + 1 : -1;
	var out = [];
	var _g = 0;
	while(_g < c.length) {
		var k = c[_g];
		++_g;
		out.push({ min : start, max : k.min - 1});
		start = k.max + 1;
	}
	if(start <= 255) {
		out.push({ min : start, max : 255});
	}
	return out;
};
hxparse_LexEngine.cunion = function(ca,cb) {
	var i = 0;
	var j = 0;
	var out = [];
	var a = ca[i++];
	var b = cb[j++];
	while(true) {
		if(a == null) {
			out.push(b);
			while(j < cb.length) out.push(cb[j++]);
			break;
		}
		if(b == null) {
			out.push(a);
			while(i < ca.length) out.push(ca[i++]);
			break;
		}
		if(a.min <= b.min) {
			if(a.max + 1 < b.min) {
				out.push(a);
				a = ca[i++];
			} else if(a.max < b.max) {
				b = { min : a.min, max : b.max};
				a = ca[i++];
			} else {
				b = cb[j++];
			}
		} else {
			var tmp = ca;
			ca = cb;
			cb = tmp;
			var tmp1 = j;
			j = i;
			i = tmp1;
			var tmp2 = a;
			a = b;
			b = tmp2;
		}
	}
	return out;
};
hxparse_LexEngine.parseInner = function(pattern,i,pDepth) {
	if(pDepth == null) {
		pDepth = 0;
	}
	if(i == null) {
		i = 0;
	}
	var readChar = function() {
		i += 1;
		var c = pattern.b[i - 1];
		if(c != c) {
			c = 92;
		} else if(c == 120) {
			c = Std.parseInt("0x" + pattern.getString(i,2));
			i += 2;
		} else if(c >= 48 && c <= 57) {
			var v = c - 48;
			while(true) {
				var cNext = pattern.b[i];
				if(cNext >= 48 && cNext <= 57) {
					v = v * 10 + (cNext - 48);
					i += 1;
				} else {
					break;
				}
			}
			c = v;
		}
		return c;
	};
	var r = hxparse__$LexEngine_Pattern.Empty;
	var l = pattern.length;
	while(i < l) {
		i += 1;
		var c1 = pattern.b[i - 1];
		if(c1 > 255) {
			throw new js__$Boot_HaxeError(c1);
		}
		switch(c1) {
		case 40:
			var r2 = hxparse_LexEngine.parseInner(pattern,i,pDepth + 1);
			i = r2.pos;
			r = hxparse_LexEngine.next(r,r2.pattern);
			break;
		case 41:
			if(r == hxparse__$LexEngine_Pattern.Empty) {
				throw new js__$Boot_HaxeError("Empty group");
			}
			return { pattern : hxparse__$LexEngine_Pattern.Group(r), pos : i};
		case 42:
			r = r != hxparse__$LexEngine_Pattern.Empty ? hxparse_LexEngine.star(r) : hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([{ min : c1, max : c1}]));
			break;
		case 43:
			r = r != hxparse__$LexEngine_Pattern.Empty ? hxparse_LexEngine.plus(r) : hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([{ min : c1, max : c1}]));
			break;
		case 46:
			r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match(hxparse_LexEngine.ALL_CHARS));
			break;
		case 63:
			r = r != hxparse__$LexEngine_Pattern.Empty ? hxparse_LexEngine.opt(r) : hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([{ min : c1, max : c1}]));
			break;
		case 91:
			if(pattern.length > 1) {
				var range = 0;
				var acc = [];
				var not = pattern.b[i] == 94;
				if(not) {
					i += 1;
				}
				while(true) {
					i += 1;
					var c2 = pattern.b[i - 1];
					if(c2 == 93) {
						if(range != 0) {
							return null;
						}
						break;
					} else if(c2 == 45) {
						if(range != 0) {
							return null;
						}
						var last = acc.pop();
						if(last == null) {
							acc.push({ min : c2, max : c2});
						} else {
							if(last.min != last.max) {
								return null;
							}
							range = last.min;
						}
					} else {
						if(c2 == 92) {
							c2 = readChar();
						}
						if(range == 0) {
							acc.push({ min : c2, max : c2});
						} else {
							acc.push({ min : range, max : c2});
							range = 0;
						}
					}
				}
				var g = [];
				var _g = 0;
				while(_g < acc.length) {
					var k = acc[_g];
					++_g;
					g = hxparse_LexEngine.cunion(g,[k]);
				}
				if(not) {
					g = hxparse_LexEngine.cdiff(hxparse_LexEngine.ALL_CHARS,g);
				}
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match(g));
			} else {
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([{ min : c1, max : c1}]));
			}
			break;
		case 92:
			c1 = readChar();
			r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([{ min : c1, max : c1}]));
			break;
		case 124:
			if(r != hxparse__$LexEngine_Pattern.Empty) {
				var r21 = hxparse_LexEngine.parseInner(pattern,i);
				return { pattern : hxparse__$LexEngine_Pattern.Choice(r,r21.pattern), pos : r21.pos};
			} else {
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([{ min : c1, max : c1}]));
			}
			break;
		default:
			r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([{ min : c1, max : c1}]));
		}
	}
	if(pDepth != 0) {
		throw new js__$Boot_HaxeError("Found unclosed parenthesis while parsing \"" + Std.string(pattern) + "\"");
	}
	return { pattern : r, pos : i};
};
hxparse_LexEngine.prototype = {
	uid: null
	,nodes: null
	,finals: null
	,states: null
	,hstates: null
	,firstState: function() {
		return this.states[0];
	}
	,makeState: function(nodes) {
		var _gthis = this;
		var buf_b = "";
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			buf_b += Std.string(n.id);
			buf_b += "-";
		}
		var key = buf_b;
		var _this = this.hstates;
		var s = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(s != null) {
			return s;
		}
		s = new hxparse_State();
		this.states.push(s);
		var _this1 = this.hstates;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,s);
		} else {
			_this1.h[key] = s;
		}
		var trans = this.getTransitions(nodes);
		var _g1 = 0;
		while(_g1 < trans.length) {
			var t = trans[_g1];
			++_g1;
			var target = this.makeState(t.n);
			var _g11 = 0;
			var _g2 = t.chars;
			while(_g11 < _g2.length) {
				var chr = _g2[_g11];
				++_g11;
				var _g4 = chr.min;
				var _g3 = chr.max + 1;
				while(_g4 < _g3) {
					var i = _g4++;
					s.trans[i] = target;
				}
			}
		}
		var setFinal = function() {
			var _g5 = 0;
			var _g12 = _gthis.finals;
			while(_g5 < _g12.length) {
				var f = _g12[_g5];
				++_g5;
				var _g21 = 0;
				while(_g21 < nodes.length) {
					var n1 = nodes[_g21];
					++_g21;
					if(n1 == f) {
						s.finalId = n1.pid;
						return;
					}
				}
			}
		};
		if(s.finalId == -1) {
			setFinal();
		}
		return s;
	}
	,getTransitions: function(nodes) {
		var tl = [];
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			var _g1 = 0;
			var _g2 = n.trans;
			while(_g1 < _g2.length) {
				var t = _g2[_g1];
				++_g1;
				tl.push(t);
			}
		}
		tl.sort(function(t1,t2) {
			return t1.n.id - t2.n.id;
		});
		var t0 = tl[0];
		var _g11 = 1;
		var _g3 = tl.length;
		while(_g11 < _g3) {
			var i = _g11++;
			var t11 = tl[i];
			if(t0.n == t11.n) {
				tl[i - 1] = null;
				t11 = { chars : hxparse_LexEngine.cunion(t0.chars,t11.chars), n : t11.n};
				tl[i] = t11;
			}
			t0 = t11;
		}
		while(HxOverrides.remove(tl,null)) {
		}
		var allChars = hxparse_LexEngine.EMPTY;
		var allStates = new haxe_ds_List();
		var _g4 = 0;
		while(_g4 < tl.length) {
			var t3 = tl[_g4];
			++_g4;
			var states = new haxe_ds_List();
			states.push({ chars : hxparse_LexEngine.cdiff(t3.chars,allChars), n : [t3.n]});
			var _g1_head = allStates.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var s = val;
				var nodes1 = s.n.slice();
				nodes1.push(t3.n);
				states.push({ chars : hxparse_LexEngine.cinter(s.chars,t3.chars), n : nodes1});
				states.push({ chars : hxparse_LexEngine.cdiff(s.chars,t3.chars), n : s.n});
			}
			var _g1_head1 = states.h;
			while(_g1_head1 != null) {
				var val1 = _g1_head1.item;
				_g1_head1 = _g1_head1.next;
				var s1 = val1;
				if(s1.chars.length == 0) {
					states.remove(s1);
				}
			}
			allChars = hxparse_LexEngine.cunion(allChars,t3.chars);
			allStates = states;
		}
		var states1 = [];
		var _g_head = allStates.h;
		while(_g_head != null) {
			var val2 = _g_head.item;
			_g_head = _g_head.next;
			var s2 = val2;
			states1.push({ chars : s2.chars, n : this.addNodes([],s2.n)});
		}
		states1.sort(function(s11,s21) {
			var a = s11.chars.length;
			var b = s21.chars.length;
			var _g12 = 0;
			var _g5 = a < b ? a : b;
			while(_g12 < _g5) {
				var i1 = _g12++;
				var a1 = s11.chars[i1];
				var b1 = s21.chars[i1];
				if(a1.min != b1.min) {
					return b1.min - a1.min;
				}
				if(a1.max != b1.max) {
					return b1.max - a1.max;
				}
			}
			if(a < b) {
				return b - a;
			}
			return 0;
		});
		return states1;
	}
	,addNode: function(nodes,n) {
		var _g = 0;
		while(_g < nodes.length) {
			var n2 = nodes[_g];
			++_g;
			if(n == n2) {
				return;
			}
		}
		nodes.push(n);
		this.addNodes(nodes,n.epsilon);
	}
	,addNodes: function(nodes,add) {
		var _g = 0;
		while(_g < add.length) {
			var n = add[_g];
			++_g;
			this.addNode(nodes,n);
		}
		return nodes;
	}
	,node: function(pid) {
		return new hxparse__$LexEngine_Node(this.uid++,pid);
	}
	,initNode: function(p,finalId,pid) {
		switch(p._hx_index) {
		case 0:
			return finalId;
		case 1:
			var c = p.c;
			var n = new hxparse__$LexEngine_Node(this.uid++,pid);
			n.trans.push({ chars : c, n : finalId});
			return n;
		case 2:
			var p1 = p.p;
			var n1 = new hxparse__$LexEngine_Node(this.uid++,pid);
			var an = this.initNode(p1,n1,pid);
			n1.epsilon.push(an);
			n1.epsilon.push(finalId);
			return n1;
		case 3:
			var p2 = p.p;
			var n2 = new hxparse__$LexEngine_Node(this.uid++,pid);
			var an1 = this.initNode(p2,n2,pid);
			n2.epsilon.push(an1);
			n2.epsilon.push(finalId);
			return an1;
		case 4:
			var b = p.p2;
			var a = p.p1;
			return this.initNode(a,this.initNode(b,finalId,pid),pid);
		case 5:
			var b1 = p.p2;
			var a1 = p.p1;
			var n3 = new hxparse__$LexEngine_Node(this.uid++,pid);
			n3.epsilon.push(this.initNode(a1,finalId,pid));
			n3.epsilon.push(this.initNode(b1,finalId,pid));
			return n3;
		case 6:
			var p3 = p.p;
			return this.initNode(p3,finalId,pid);
		}
	}
	,__class__: hxparse_LexEngine
};
var hxparse__$LexEngine_Pattern = $hxEnums["hxparse._LexEngine.Pattern"] = { __ename__ : true, __constructs__ : ["Empty","Match","Star","Plus","Next","Choice","Group"]
	,Empty: {_hx_index:0,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}
	,Match: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["c"],$_)
	,Star: ($_=function(p) { return {_hx_index:2,p:p,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Plus: ($_=function(p) { return {_hx_index:3,p:p,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Next: ($_=function(p1,p2) { return {_hx_index:4,p1:p1,p2:p2,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p1","p2"],$_)
	,Choice: ($_=function(p1,p2) { return {_hx_index:5,p1:p1,p2:p2,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p1","p2"],$_)
	,Group: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_.__params__ = ["p"],$_)
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if((o instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g11 = 0;
			var _g3 = l;
			while(_g11 < _g3) {
				var i1 = _g11++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if((o instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if((o instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return $hxEnums[o.__enum__] == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxparse__$LexEngine_Node = function(id,pid) {
	this.id = id;
	this.pid = pid;
	this.trans = [];
	this.epsilon = [];
};
$hxClasses["hxparse._LexEngine.Node"] = hxparse__$LexEngine_Node;
hxparse__$LexEngine_Node.__name__ = "hxparse._LexEngine.Node";
hxparse__$LexEngine_Node.prototype = {
	id: null
	,pid: null
	,trans: null
	,epsilon: null
	,__class__: hxparse__$LexEngine_Node
};
var hxparse_Ruleset = function(state,functions,eofFunction,name) {
	if(name == null) {
		name = "";
	}
	this.state = state;
	this.functions = functions;
	this.eofFunction = eofFunction;
	this.name = name;
};
$hxClasses["hxparse.Ruleset"] = hxparse_Ruleset;
hxparse_Ruleset.__name__ = "hxparse.Ruleset";
hxparse_Ruleset.prototype = {
	state: null
	,functions: null
	,eofFunction: null
	,name: null
	,__class__: hxparse_Ruleset
};
var hxparse_Position = function(source,min,max) {
	this.psource = source;
	this.pmin = min;
	this.pmax = max;
};
$hxClasses["hxparse.Position"] = hxparse_Position;
hxparse_Position.__name__ = "hxparse.Position";
hxparse_Position.union = function(p1,p2) {
	return new hxparse_Position(p1.psource,p1.pmin < p2.pmin ? p1.pmin : p2.pmin,p1.pmax > p2.pmax ? p1.pmax : p2.pmax);
};
hxparse_Position.prototype = {
	psource: null
	,pmin: null
	,pmax: null
	,toString: function() {
		return "" + this.psource + ":characters " + this.pmin + "-" + this.pmax;
	}
	,getLinePosition: function(input) {
		var lineMin = 1;
		var lineMax = 1;
		var posMin = 0;
		var posMax = 0;
		var cur = 0;
		while(cur < this.pmin) {
			if(input.b[cur] == 10) {
				++lineMin;
				posMin = cur + 1;
			}
			++cur;
		}
		lineMax = lineMin;
		posMax = posMin;
		posMin = cur - posMin;
		while(cur < this.pmax) {
			if(input.b[cur] == 10) {
				++lineMax;
				posMax = cur + 1;
			}
			++cur;
		}
		posMax = cur - posMax;
		return { lineMin : lineMin, lineMax : lineMax, posMin : posMin, posMax : posMax};
	}
	,format: function(input) {
		var linePos = this.getLinePosition(input);
		if(linePos.lineMin != linePos.lineMax) {
			return "" + this.psource + ":lines " + linePos.lineMin + "-" + linePos.lineMax;
		} else {
			return "" + this.psource + ":" + linePos.lineMin + ": characters " + linePos.posMin + "-" + linePos.posMax;
		}
	}
	,__class__: hxparse_Position
};
var haxeparser_HaxeLexer = function(input,sourceName) {
	hxparse_Lexer.call(this,input,sourceName);
};
$hxClasses["haxeparser.HaxeLexer"] = haxeparser_HaxeLexer;
haxeparser_HaxeLexer.__name__ = "haxeparser.HaxeLexer";
haxeparser_HaxeLexer.__interfaces__ = [hxparse_RuleBuilder];
haxeparser_HaxeLexer.mkPos = function(p) {
	return { file : p.psource, min : p.pmin, max : p.pmax};
};
haxeparser_HaxeLexer.mk = function(lexer,td) {
	return new haxeparser_Token(td,haxeparser_HaxeLexer.mkPos(new hxparse_Position(lexer.source,lexer.pos - lexer.current.length,lexer.pos)));
};
haxeparser_HaxeLexer.unescapePos = function(pos,index,length) {
	return { file : pos.file, min : pos.min + index, max : pos.min + index + length};
};
haxeparser_HaxeLexer.unescape = function(s,pos) {
	var b_b = "";
	var i = 0;
	var esc = false;
	while(s.length != i) {
		var c = HxOverrides.cca(s,i);
		if(esc) {
			var iNext = i + 1;
			var _hx_tmp;
			if(c == null) {
				_hx_tmp = c >= 48 && c <= 51;
				if(_hx_tmp == true) {
					iNext += 2;
				} else {
					var c1 = c;
					throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnknownEscapeSequence("\\" + String.fromCharCode(c1)),{ file : pos.file, min : pos.min + i, max : pos.min + i + 1}));
				}
			} else {
				switch(c) {
				case 34:case 39:case 92:
					b_b += String.fromCharCode(c);
					break;
				case 110:
					b_b += "\n";
					break;
				case 114:
					b_b += "\r";
					break;
				case 116:
					b_b += "\t";
					break;
				case 117:
					_hx_tmp = c >= 48 && c <= 51;
					if(_hx_tmp == true) {
						iNext += 2;
					} else {
						var c2;
						if(s.charAt(i + 1) == "{") {
							var endIndex = s.indexOf("}",i + 3);
							if(endIndex == -1) {
								throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedEscapeSequence,{ file : pos.file, min : pos.min + i, max : pos.min + i + 2}));
							}
							var l = endIndex - (i + 2);
							var chars = HxOverrides.substr(s,i + 2,l);
							if(!new EReg("^[0-9a-fA-F]+$","").match(chars)) {
								throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.InvalidEscapeSequence("\\u{" + chars + "}"),{ file : pos.file, min : pos.min + i, max : pos.min + i + (3 + l)}));
							}
							c2 = Std.parseInt("0x" + chars);
							if(c2 > 1114111) {
								throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.InvalidEscapeSequence("\\u{" + chars + "}"),{ file : pos.file, min : pos.min + i, max : pos.min + i + (3 + l)}));
							}
							iNext += 2 + l;
						} else {
							var chars1 = HxOverrides.substr(s,i + 1,4);
							if(!new EReg("^[0-9a-fA-F]{4}$","").match(chars1)) {
								throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.InvalidEscapeSequence("\\u" + chars1),{ file : pos.file, min : pos.min + i, max : pos.min + i + 5}));
							}
							c2 = Std.parseInt("0x" + chars1);
							iNext += 4;
						}
						b_b += String.fromCharCode(c2);
					}
					break;
				case 120:
					_hx_tmp = c >= 48 && c <= 51;
					if(_hx_tmp == true) {
						iNext += 2;
					} else {
						var chars2 = HxOverrides.substr(s,i + 1,2);
						if(!new EReg("^[0-9a-fA-F]{2}$","").match(chars2)) {
							throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.InvalidEscapeSequence("\\x" + chars2),{ file : pos.file, min : pos.min + i, max : pos.min + i + 3}));
						}
						var c3 = Std.parseInt("0x" + chars2);
						b_b += String.fromCharCode(c3);
						iNext += 2;
					}
					break;
				default:
					_hx_tmp = c >= 48 && c <= 51;
					if(_hx_tmp == true) {
						iNext += 2;
					} else {
						var c4 = c;
						throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnknownEscapeSequence("\\" + String.fromCharCode(c4)),{ file : pos.file, min : pos.min + i, max : pos.min + i + 1}));
					}
				}
			}
			esc = false;
			i = iNext;
		} else if(c == null) {
			b_b += String.fromCharCode(c);
			++i;
		} else if(c == 92) {
			++i;
			esc = true;
		} else {
			b_b += String.fromCharCode(c);
			++i;
		}
	}
	return b_b;
};
haxeparser_HaxeLexer.__super__ = hxparse_Lexer;
haxeparser_HaxeLexer.prototype = $extend(hxparse_Lexer.prototype,{
	__class__: haxeparser_HaxeLexer
});
var haxeparser_ParserErrorMsg = $hxEnums["haxeparser.ParserErrorMsg"] = { __ename__ : true, __constructs__ : ["MissingSemicolon","MissingType","DuplicateDefault","UnclosedMacro","Unimplemented","Custom","SharpError"]
	,MissingSemicolon: {_hx_index:0,__enum__:"haxeparser.ParserErrorMsg",toString:$estr}
	,MissingType: {_hx_index:1,__enum__:"haxeparser.ParserErrorMsg",toString:$estr}
	,DuplicateDefault: {_hx_index:2,__enum__:"haxeparser.ParserErrorMsg",toString:$estr}
	,UnclosedMacro: {_hx_index:3,__enum__:"haxeparser.ParserErrorMsg",toString:$estr}
	,Unimplemented: {_hx_index:4,__enum__:"haxeparser.ParserErrorMsg",toString:$estr}
	,Custom: ($_=function(s) { return {_hx_index:5,s:s,__enum__:"haxeparser.ParserErrorMsg",toString:$estr}; },$_.__params__ = ["s"],$_)
	,SharpError: ($_=function(s) { return {_hx_index:6,s:s,__enum__:"haxeparser.ParserErrorMsg",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var haxeparser_ParserError = function(message,pos) {
	this.msg = message;
	this.pos = pos;
};
$hxClasses["haxeparser.ParserError"] = haxeparser_ParserError;
haxeparser_ParserError.__name__ = "haxeparser.ParserError";
haxeparser_ParserError.prototype = {
	msg: null
	,pos: null
	,__class__: haxeparser_ParserError
};
var haxeparser_SmallType = $hxEnums["haxeparser.SmallType"] = { __ename__ : true, __constructs__ : ["SNull","SBool","SFloat","SString"]
	,SNull: {_hx_index:0,__enum__:"haxeparser.SmallType",toString:$estr}
	,SBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"haxeparser.SmallType",toString:$estr}; },$_.__params__ = ["b"],$_)
	,SFloat: ($_=function(f) { return {_hx_index:2,f:f,__enum__:"haxeparser.SmallType",toString:$estr}; },$_.__params__ = ["f"],$_)
	,SString: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"haxeparser.SmallType",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var hxparse_Parser_$hxparse_$LexerTokenSource_$haxeparser_$Token_$haxeparser_$Token = function(stream) {
	this.stream = stream;
};
$hxClasses["hxparse.Parser_hxparse_LexerTokenSource_haxeparser_Token_haxeparser_Token"] = hxparse_Parser_$hxparse_$LexerTokenSource_$haxeparser_$Token_$haxeparser_$Token;
hxparse_Parser_$hxparse_$LexerTokenSource_$haxeparser_$Token_$haxeparser_$Token.__name__ = "hxparse.Parser_hxparse_LexerTokenSource_haxeparser_Token_haxeparser_Token";
hxparse_Parser_$hxparse_$LexerTokenSource_$haxeparser_$Token_$haxeparser_$Token.prototype = {
	last: null
	,stream: null
	,token: null
	,peek: function(n) {
		if(this.token == null) {
			this.token = new haxe_ds_GenericCell(this.stream.token(),null);
			--n;
		}
		var tok = this.token;
		while(n > 0) {
			if(tok.next == null) {
				tok.next = new haxe_ds_GenericCell(this.stream.token(),null);
			}
			tok = tok.next;
			--n;
		}
		return tok.elt;
	}
	,junk: function() {
		this.last = this.token.elt;
		this.token = this.token.next;
	}
	,curPos: function() {
		return this.stream.curPos();
	}
	,parseSeparated: function(separatorFunc,f) {
		var acc = [];
		while(true) {
			try {
				acc.push(f());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				if((e1 instanceof hxparse_NoMatch)) {
					var e2 = e1;
					break;
				} else {
					throw e;
				}
			}
			if(separatorFunc(this.peek(0))) {
				this.last = this.token.elt;
				this.token = this.token.next;
			} else {
				break;
			}
		}
		return acc;
	}
	,parseOptional: function(f) {
		try {
			return f();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof hxparse_NoMatch)) {
				var e2 = e1;
				return null;
			} else {
				throw e;
			}
		}
	}
	,parseRepeat: function(f) {
		var acc = [];
		while(true) try {
			acc.push(f());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof hxparse_NoMatch)) {
				var e2 = e1;
				return acc;
			} else {
				throw e;
			}
		}
	}
	,parseExpect: function(f) {
		try {
			return f();
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			} else {
				throw _;
			}
		}
	}
	,noMatch: function() {
		return new hxparse_NoMatch(this.stream.curPos(),this.peek(0));
	}
	,unexpected: function() {
		throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
	}
	,__class__: hxparse_Parser_$hxparse_$LexerTokenSource_$haxeparser_$Token_$haxeparser_$Token
};
var hxparse_ParserBuilder = function() { };
$hxClasses["hxparse.ParserBuilder"] = hxparse_ParserBuilder;
hxparse_ParserBuilder.__name__ = "hxparse.ParserBuilder";
var haxeparser_HaxeCondParser = function(stream) {
	hxparse_Parser_$hxparse_$LexerTokenSource_$haxeparser_$Token_$haxeparser_$Token.call(this,stream);
};
$hxClasses["haxeparser.HaxeCondParser"] = haxeparser_HaxeCondParser;
haxeparser_HaxeCondParser.__name__ = "haxeparser.HaxeCondParser";
haxeparser_HaxeCondParser.__interfaces__ = [hxparse_ParserBuilder];
haxeparser_HaxeCondParser.__super__ = hxparse_Parser_$hxparse_$LexerTokenSource_$haxeparser_$Token_$haxeparser_$Token;
haxeparser_HaxeCondParser.prototype = $extend(hxparse_Parser_$hxparse_$LexerTokenSource_$haxeparser_$Token_$haxeparser_$Token.prototype,{
	parseMacroCond: function(allowOp) {
		var _g = this.peek(0);
		switch(_g.tok._hx_index) {
		case 0:
			var p = _g.pos;
			var k = _g.tok.k;
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.parseMacroIdent(allowOp,haxeparser_HaxeParser.keywordString(k),p);
		case 1:
			switch(_g.tok.c._hx_index) {
			case 0:
				var p1 = _g.pos;
				var s = _g.tok.c.v;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { tk : haxe_ds_Option.None, expr : { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CInt(s)), pos : p1}};
			case 1:
				var p2 = _g.pos;
				var s1 = _g.tok.c.f;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { tk : haxe_ds_Option.None, expr : { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(s1)), pos : p2}};
			case 2:
				var p3 = _g.pos;
				var s2 = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { tk : haxe_ds_Option.None, expr : { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CString(s2)), pos : p3}};
			case 3:
				var p4 = _g.pos;
				var t = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseMacroIdent(allowOp,t,p4);
			default:
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		case 4:
			var p5 = _g.pos;
			var op = _g.tok.op;
			this.last = this.token.elt;
			this.token = this.token.next;
			var o = this.parseMacroCond(allowOp);
			return { tk : o.tk, expr : haxeparser_HaxeParser.makeUnop(op,o.expr,p5)};
		case 18:
			var p11 = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			var o1 = this.parseMacroCond(true);
			var _g1 = this.peek(0);
			if(_g1.tok._hx_index == 19) {
				var p21 = _g1.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var e = { expr : haxe_macro_ExprDef.EParenthesis(o1.expr), pos : haxeparser_HaxeParser.punion(p11,p21)};
				if(allowOp) {
					return this.parseMacroOp(e);
				} else {
					return { tk : haxe_ds_Option.None, expr : e};
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseMacroIdent: function(allowOp,t,p) {
		var e = { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent(t)), pos : p};
		if(!allowOp) {
			return { tk : haxe_ds_Option.None, expr : e};
		} else {
			return this.parseMacroOp(e);
		}
	}
	,parseMacroOp: function(e) {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 5) {
			var op = _g.tok.op;
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g1 = this.peek(0);
			if(_g1.tok._hx_index == 5) {
				if(_g1.tok.op._hx_index == 4) {
					if(op == haxe_macro_Binop.OpGt) {
						this.last = this.token.elt;
						this.token = this.token.next;
						op = haxe_macro_Binop.OpGte;
					} else {
						op = op;
					}
				} else {
					op = op;
				}
			} else {
				op = op;
			}
			var o = this.parseMacroCond(true);
			return { tk : o.tk, expr : haxeparser_HaxeParser.makeBinop(op,e,o.expr)};
		} else {
			var tk = _g;
			return { tk : haxe_ds_Option.Some(tk), expr : e};
		}
	}
	,__class__: haxeparser_HaxeCondParser
});
var haxeparser_HaxeTokenSource = function(lexer,defines) {
	this.lexer = lexer;
	this.mstack = [];
	this.defines = defines;
	this.skipstates = [0];
	this.rawSource = new hxparse_LexerTokenSource(lexer,haxeparser_HaxeLexer.tok);
	this.condParser = new haxeparser_HaxeCondParser(this.rawSource);
};
$hxClasses["haxeparser.HaxeTokenSource"] = haxeparser_HaxeTokenSource;
haxeparser_HaxeTokenSource.__name__ = "haxeparser.HaxeTokenSource";
haxeparser_HaxeTokenSource.prototype = {
	lexer: null
	,mstack: null
	,skipstates: null
	,defines: null
	,rawSource: null
	,condParser: null
	,lexerToken: function() {
		return this.lexer.token(haxeparser_HaxeLexer.tok);
	}
	,getSt: function() {
		return this.skipstates[this.skipstates.length - 1];
	}
	,setSt: function(s) {
		this.skipstates[this.skipstates.length - 1] = s;
	}
	,pushSt: function(s) {
		this.skipstates.push(s);
	}
	,popSt: function() {
		if(this.skipstates.length > 1) {
			return this.skipstates.pop();
		} else {
			throw new js__$Boot_HaxeError("unexpected #end");
		}
	}
	,token: function() {
		while(true) {
			var tk = this.lexerToken();
			var state = this.skipstates[this.skipstates.length - 1];
			var _g = tk.tok;
			switch(_g._hx_index) {
			case 2:
				switch(_g.s) {
				case "else":
					switch(state) {
					case 0:
						this.skipstates[this.skipstates.length - 1] = 2;
						break;
					case 1:
						this.skipstates[this.skipstates.length - 1] = 0;
						break;
					case 2:
						break;
					default:
					}
					break;
				case "elseif":
					switch(state) {
					case 0:
						this.skipstates[this.skipstates.length - 1] = 2;
						break;
					case 1:
						var o = this.condParser.parseMacroCond(false);
						var s = this.isTrue(this["eval"](o.expr)) ? 0 : 1;
						this.skipstates[this.skipstates.length - 1] = s;
						break;
					case 2:
						break;
					default:
					}
					break;
				case "end":
					this.mstack.pop();
					if(this.skipstates.length > 1) {
						this.skipstates.pop();
					} else {
						throw new js__$Boot_HaxeError("unexpected #end");
					}
					break;
				case "error":
					switch(state) {
					case 0:
						var nextTok = this.lexerToken();
						var _g1 = nextTok.tok;
						if(_g1._hx_index == 1) {
							if(_g1.c._hx_index == 2) {
								var str = _g1.c.s;
								throw new js__$Boot_HaxeError(new haxeparser_ParserError(haxeparser_ParserErrorMsg.SharpError(str),tk.pos));
							} else {
								throw new js__$Boot_HaxeError(new haxeparser_ParserError(haxeparser_ParserErrorMsg.Unimplemented,tk.pos));
							}
						} else {
							throw new js__$Boot_HaxeError(new haxeparser_ParserError(haxeparser_ParserErrorMsg.Unimplemented,tk.pos));
						}
						break;
					case 2:
						break;
					default:
					}
					break;
				case "if":
					switch(state) {
					case 0:
						this.mstack.push(tk.pos);
						var o1 = this.condParser.parseMacroCond(false);
						var s1 = this.isTrue(this["eval"](o1.expr)) ? 0 : 1;
						this.skipstates.push(s1);
						break;
					case 1:case 2:
						this.deepSkip();
						break;
					default:
					}
					break;
				case "line":
					break;
				default:
					switch(state) {
					case 0:
						return tk;
					case 2:
						break;
					default:
					}
				}
				break;
			case 6:case 7:
				break;
			case 22:
				if(state == 0) {
					return tk;
				} else {
					return tk;
				}
				break;
			default:
				if(state == 0) {
					return tk;
				}
			}
		}
	}
	,enterMacro: function() {
		var o = this.condParser.parseMacroCond(false);
		return this.isTrue(this["eval"](o.expr));
	}
	,deepSkip: function() {
		var lvl = 1;
		while(true) {
			var tk = this.lexerToken();
			var _g = tk.tok;
			switch(_g._hx_index) {
			case 2:
				switch(_g.s) {
				case "end":
					--lvl;
					if(lvl == 0) {
						return;
					}
					break;
				case "if":
					++lvl;
					break;
				default:
				}
				break;
			case 22:
				throw new js__$Boot_HaxeError("unclosed macro");
			default:
			}
		}
	}
	,isTrue: function(a) {
		switch(a._hx_index) {
		case 0:
			return false;
		case 1:
			if(a.b == false) {
				return false;
			} else {
				return true;
			}
			break;
		case 2:
			if(a.f == 0.0) {
				return false;
			} else {
				return true;
			}
			break;
		case 3:
			if(a.s == "") {
				return false;
			} else {
				return true;
			}
			break;
		}
	}
	,compare: function(a,b) {
		switch(a._hx_index) {
		case 0:
			if(b._hx_index == 0) {
				return 0;
			} else {
				return 0;
			}
			break;
		case 1:
			if(b._hx_index == 1) {
				var a1 = a.b;
				var b1 = b.b;
				return Reflect.compare(a1,b1);
			} else {
				return 0;
			}
			break;
		case 2:
			switch(b._hx_index) {
			case 2:
				var a2 = a.f;
				var b2 = b.f;
				return Reflect.compare(a2,b2);
			case 3:
				var a3 = a.f;
				var b3 = b.s;
				return Reflect.compare(a3,parseFloat(b3));
			default:
				return 0;
			}
			break;
		case 3:
			switch(b._hx_index) {
			case 2:
				var a4 = a.s;
				var b4 = b.f;
				return Reflect.compare(parseFloat(a4),b4);
			case 3:
				var a5 = a.s;
				var b5 = b.s;
				return Reflect.compare(a5,b5);
			default:
				return 0;
			}
			break;
		}
	}
	,'eval': function(e) {
		var _g = e.expr;
		switch(_g._hx_index) {
		case 0:
			switch(_g.c._hx_index) {
			case 0:
				var f = _g.c.v;
				return haxeparser_SmallType.SFloat(parseFloat(f));
			case 1:
				var f1 = _g.c.f;
				return haxeparser_SmallType.SFloat(parseFloat(f1));
			case 2:
				var s = _g.c.s;
				return haxeparser_SmallType.SString(s);
			case 3:
				var s1 = _g.c.s;
				var _this = this.defines;
				if(__map_reserved[s1] != null ? _this.existsReserved(s1) : _this.h.hasOwnProperty(s1)) {
					return haxeparser_SmallType.SString(s1);
				} else {
					return haxeparser_SmallType.SNull;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid condition expression");
			}
			break;
		case 2:
			switch(_g.op._hx_index) {
			case 14:
				var e2 = _g.e2;
				var e1 = _g.e1;
				return haxeparser_SmallType.SBool(this.isTrue(this["eval"](e1)) && this.isTrue(this["eval"](e2)));
			case 15:
				var e21 = _g.e2;
				var e11 = _g.e1;
				return haxeparser_SmallType.SBool(this.isTrue(this["eval"](e11)) || this.isTrue(this["eval"](e21)));
			default:
				var e22 = _g.e2;
				var e12 = _g.e1;
				var op = _g.op;
				var v1 = this["eval"](e12);
				var v2 = this["eval"](e22);
				var cmp = this.compare(v1,v2);
				var val;
				switch(op._hx_index) {
				case 5:
					val = cmp == 0;
					break;
				case 6:
					val = cmp != 0;
					break;
				case 7:
					val = cmp > 0;
					break;
				case 8:
					val = cmp >= 0;
					break;
				case 9:
					val = cmp < 0;
					break;
				case 10:
					val = cmp <= 0;
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported operation");
				}
				return haxeparser_SmallType.SBool(val);
			}
			break;
		case 4:
			var e3 = _g.e;
			return this["eval"](e3);
		case 9:
			if(_g.op._hx_index == 2) {
				var e4 = _g.e;
				return haxeparser_SmallType.SBool(!this.isTrue(this["eval"](e4)));
			} else {
				throw new js__$Boot_HaxeError("Invalid condition expression");
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid condition expression");
		}
	}
	,curPos: function() {
		var _this = this.lexer;
		return new hxparse_Position(_this.source,_this.pos - _this.current.length,_this.pos);
	}
	,__class__: haxeparser_HaxeTokenSource
};
var hxparse_Parser_$haxeparser_$HaxeTokenSource_$haxeparser_$Token = function(stream) {
	this.stream = stream;
};
$hxClasses["hxparse.Parser_haxeparser_HaxeTokenSource_haxeparser_Token"] = hxparse_Parser_$haxeparser_$HaxeTokenSource_$haxeparser_$Token;
hxparse_Parser_$haxeparser_$HaxeTokenSource_$haxeparser_$Token.__name__ = "hxparse.Parser_haxeparser_HaxeTokenSource_haxeparser_Token";
hxparse_Parser_$haxeparser_$HaxeTokenSource_$haxeparser_$Token.prototype = {
	last: null
	,stream: null
	,token: null
	,peek: function(n) {
		if(this.token == null) {
			this.token = new haxe_ds_GenericCell(this.stream.token(),null);
			--n;
		}
		var tok = this.token;
		while(n > 0) {
			if(tok.next == null) {
				tok.next = new haxe_ds_GenericCell(this.stream.token(),null);
			}
			tok = tok.next;
			--n;
		}
		return tok.elt;
	}
	,junk: function() {
		this.last = this.token.elt;
		this.token = this.token.next;
	}
	,curPos: function() {
		return this.stream.curPos();
	}
	,parseSeparated: function(separatorFunc,f) {
		var acc = [];
		while(true) {
			try {
				acc.push(f());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				if((e1 instanceof hxparse_NoMatch)) {
					var e2 = e1;
					break;
				} else {
					throw e;
				}
			}
			if(separatorFunc(this.peek(0))) {
				this.last = this.token.elt;
				this.token = this.token.next;
			} else {
				break;
			}
		}
		return acc;
	}
	,parseOptional: function(f) {
		try {
			return f();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof hxparse_NoMatch)) {
				var e2 = e1;
				return null;
			} else {
				throw e;
			}
		}
	}
	,parseRepeat: function(f) {
		var acc = [];
		while(true) try {
			acc.push(f());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof hxparse_NoMatch)) {
				var e2 = e1;
				return acc;
			} else {
				throw e;
			}
		}
	}
	,parseExpect: function(f) {
		try {
			return f();
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			} else {
				throw _;
			}
		}
	}
	,noMatch: function() {
		return new hxparse_NoMatch(this.stream.curPos(),this.peek(0));
	}
	,unexpected: function() {
		throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
	}
	,__class__: hxparse_Parser_$haxeparser_$HaxeTokenSource_$haxeparser_$Token
};
var haxeparser_HaxeParser = function(input,sourceName) {
	this.doResume = false;
	this.defines = new haxe_ds_StringMap();
	var _this = this.defines;
	if(__map_reserved["true"] != null) {
		_this.setReserved("true",true);
	} else {
		_this.h["true"] = true;
	}
	var lexer = new haxeparser_HaxeLexer(input,sourceName);
	var ts = new haxeparser_HaxeTokenSource(lexer,this.defines);
	hxparse_Parser_$haxeparser_$HaxeTokenSource_$haxeparser_$Token.call(this,ts);
	this.inMacro = false;
	this.doc = "";
};
$hxClasses["haxeparser.HaxeParser"] = haxeparser_HaxeParser;
haxeparser_HaxeParser.__name__ = "haxeparser.HaxeParser";
haxeparser_HaxeParser.__interfaces__ = [hxparse_ParserBuilder];
haxeparser_HaxeParser.keywordString = function(k) {
	return HxOverrides.substr(Std.string(k),3,null).toLowerCase();
};
haxeparser_HaxeParser.punion = function(p1,p2) {
	return { file : p1.file, min : p1.min < p2.min ? p1.min : p2.min, max : p1.max > p2.max ? p1.max : p2.max};
};
haxeparser_HaxeParser.quoteIdent = function(s) {
	return s;
};
haxeparser_HaxeParser.isLowerIdent = function(s) {
	var loop = null;
	loop = function(p) {
		var c = HxOverrides.cca(s,p);
		if(c >= 97 && c <= 122) {
			return true;
		} else if(c == 95) {
			if(p + 1 < s.length) {
				return loop(p + 1);
			} else {
				return true;
			}
		} else {
			return false;
		}
	};
	return loop(0);
};
haxeparser_HaxeParser.isPostfix = function(e,u) {
	switch(u._hx_index) {
	case 0:case 1:
		var _g = e.expr;
		switch(_g._hx_index) {
		case 0:case 1:case 3:
			return true;
		default:
			return false;
		}
		break;
	case 2:case 3:case 4:
		return false;
	}
};
haxeparser_HaxeParser.isPrefix = function(u) {
	switch(u._hx_index) {
	case 0:case 1:
		return true;
	case 2:case 3:case 4:
		return true;
	}
};
haxeparser_HaxeParser.precedence = function(op) {
	var left = true;
	var right = false;
	switch(op._hx_index) {
	case 1:case 2:
		return { p : 2, left : left};
	case 0:case 3:
		return { p : 3, left : left};
	case 5:case 6:case 7:case 8:case 9:case 10:
		return { p : 6, left : left};
	case 11:case 12:case 13:
		return { p : 5, left : left};
	case 14:
		return { p : 8, left : left};
	case 15:
		return { p : 9, left : left};
	case 16:case 17:case 18:
		return { p : 4, left : left};
	case 19:
		return { p : 1, left : left};
	case 4:case 20:
		return { p : 11, left : right};
	case 21:
		return { p : 7, left : left};
	case 22:
		return { p : 10, left : left};
	case 23:
		return { p : 0, left : right};
	}
};
haxeparser_HaxeParser.isNotAssign = function(op) {
	switch(op._hx_index) {
	case 4:case 20:
		return false;
	default:
		return true;
	}
};
haxeparser_HaxeParser.isDollarIdent = function(e) {
	var _g = e.expr;
	if(_g._hx_index == 0) {
		if(_g.c._hx_index == 3) {
			var n = _g.c.s;
			if(HxOverrides.cca(n,0) == 36) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	} else {
		return false;
	}
};
haxeparser_HaxeParser.swap = function(op1,op2) {
	var i1 = haxeparser_HaxeParser.precedence(op1);
	var i2 = haxeparser_HaxeParser.precedence(op2);
	if(i1.left) {
		return i1.p <= i2.p;
	} else {
		return false;
	}
};
haxeparser_HaxeParser.makeBinop = function(op,e,e2) {
	var _g = e2.expr;
	switch(_g._hx_index) {
	case 2:
		var _e2 = _g.e2;
		var _e = _g.e1;
		var _op = _g.op;
		if(haxeparser_HaxeParser.swap(op,_op)) {
			var _e1 = haxeparser_HaxeParser.makeBinop(op,e,_e);
			return { expr : haxe_macro_ExprDef.EBinop(_op,_e1,_e2), pos : haxeparser_HaxeParser.punion(_e1.pos,_e2.pos)};
		} else {
			return { expr : haxe_macro_ExprDef.EBinop(op,e,e2), pos : haxeparser_HaxeParser.punion(e.pos,e2.pos)};
		}
		break;
	case 26:
		var e3 = _g.eelse;
		var e21 = _g.eif;
		var e1 = _g.econd;
		if(haxeparser_HaxeParser.isNotAssign(op)) {
			var e4 = haxeparser_HaxeParser.makeBinop(op,e,e1);
			return { expr : haxe_macro_ExprDef.ETernary(e4,e21,e3), pos : haxeparser_HaxeParser.punion(e4.pos,e3.pos)};
		} else {
			return { expr : haxe_macro_ExprDef.EBinop(op,e,e2), pos : haxeparser_HaxeParser.punion(e.pos,e2.pos)};
		}
		break;
	default:
		return { expr : haxe_macro_ExprDef.EBinop(op,e,e2), pos : haxeparser_HaxeParser.punion(e.pos,e2.pos)};
	}
};
haxeparser_HaxeParser.makeUnop = function(op,e,p1) {
	var _g = e.expr;
	switch(_g._hx_index) {
	case 2:
		var e2 = _g.e2;
		var e1 = _g.e1;
		var bop = _g.op;
		return { expr : haxe_macro_ExprDef.EBinop(bop,haxeparser_HaxeParser.makeUnop(op,e1,p1),e2), pos : haxeparser_HaxeParser.punion(p1,e1.pos)};
	case 26:
		var e3 = _g.eelse;
		var e21 = _g.eif;
		var e11 = _g.econd;
		return { expr : haxe_macro_ExprDef.ETernary(haxeparser_HaxeParser.makeUnop(op,e11,p1),e21,e3), pos : haxeparser_HaxeParser.punion(p1,e.pos)};
	default:
		return { expr : haxe_macro_ExprDef.EUnop(op,false,e), pos : haxeparser_HaxeParser.punion(p1,e.pos)};
	}
};
haxeparser_HaxeParser.makeMeta = function(name,params,e,p1) {
	var _g = e.expr;
	switch(_g._hx_index) {
	case 2:
		var e2 = _g.e2;
		var e1 = _g.e1;
		var bop = _g.op;
		return { expr : haxe_macro_ExprDef.EBinop(bop,haxeparser_HaxeParser.makeMeta(name,params,e1,p1),e2), pos : haxeparser_HaxeParser.punion(p1,e1.pos)};
	case 26:
		var e3 = _g.eelse;
		var e21 = _g.eif;
		var e11 = _g.econd;
		return { expr : haxe_macro_ExprDef.ETernary(haxeparser_HaxeParser.makeMeta(name,params,e11,p1),e21,e3), pos : haxeparser_HaxeParser.punion(p1,e.pos)};
	default:
		var tmp = haxeparser_HaxeParser.punion(p1,e.pos);
		return { expr : haxe_macro_ExprDef.EMeta({ name : name, params : params, pos : p1},e), pos : tmp};
	}
};
haxeparser_HaxeParser.apush = function(a,t) {
	a.push(t);
	return a;
};
haxeparser_HaxeParser.aunshift = function(a,t) {
	a.unshift(t);
	return a;
};
haxeparser_HaxeParser.__super__ = hxparse_Parser_$haxeparser_$HaxeTokenSource_$haxeparser_$Token;
haxeparser_HaxeParser.prototype = $extend(hxparse_Parser_$haxeparser_$HaxeTokenSource_$haxeparser_$Token.prototype,{
	defines: null
	,doResume: null
	,doc: null
	,inMacro: null
	,define: function(flag,value) {
		var _this = this.defines;
		var value1 = value;
		if(__map_reserved[flag] != null) {
			_this.setReserved(flag,value1);
		} else {
			_this.h[flag] = value1;
		}
	}
	,parse: function() {
		var res = this.parseFile();
		if(this.stream.mstack.length != 0) {
			throw new js__$Boot_HaxeError(new haxeparser_ParserError(haxeparser_ParserErrorMsg.UnclosedMacro,this.stream.mstack[this.stream.mstack.length - 1]));
		}
		return res;
	}
	,psep: function(sep,f) {
		var acc = [];
		while(true) try {
			acc.push(f());
			var _g = this.peek(0);
			var sep2 = _g.tok;
			if(sep2 == sep) {
				this.last = this.token.elt;
				this.token = this.token.next;
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof hxparse_NoMatch)) {
				var e2 = e1;
				break;
			} else {
				throw e;
			}
		}
		return acc;
	}
	,ident: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 1) {
			if(_g.tok.c._hx_index == 3) {
				var p = _g.pos;
				var i = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { name : i, pos : p};
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,dollarIdent: function() {
		var _g = this.peek(0);
		switch(_g.tok._hx_index) {
		case 1:
			if(_g.tok.c._hx_index == 3) {
				var p = _g.pos;
				var i = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { name : i, pos : p};
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		case 3:
			var p1 = _g.pos;
			var i1 = _g.tok.s;
			this.last = this.token.elt;
			this.token = this.token.next;
			return { name : "$" + i1, pos : p1};
		default:
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,dollarIdentMacro: function(pack) {
		var _g = this.peek(0);
		switch(_g.tok._hx_index) {
		case 1:
			if(_g.tok.c._hx_index == 3) {
				var p = _g.pos;
				var i = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { name : i, pos : p};
			} else {
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 0) {
					if(_g1.tok.k._hx_index == 40) {
						var p1 = _g1.pos;
						if(pack.length > 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return { name : "macro", pos : p1};
						} else {
							var _g2 = this.peek(0);
							if(_g2.tok._hx_index == 0) {
								if(_g2.tok.k._hx_index == 25) {
									var p2 = _g2.pos;
									if(pack.length > 0) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return { name : "extern", pos : p2};
									} else {
										throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
								} else {
									throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
							} else {
								throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
						}
					} else {
						var _g3 = this.peek(0);
						if(_g3.tok._hx_index == 0) {
							if(_g3.tok.k._hx_index == 25) {
								var p3 = _g3.pos;
								if(pack.length > 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return { name : "extern", pos : p3};
								} else {
									throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
							} else {
								throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
					}
				} else {
					var _g4 = this.peek(0);
					if(_g4.tok._hx_index == 0) {
						if(_g4.tok.k._hx_index == 25) {
							var p4 = _g4.pos;
							if(pack.length > 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return { name : "extern", pos : p4};
							} else {
								throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				}
			}
			break;
		case 3:
			var p5 = _g.pos;
			var i1 = _g.tok.s;
			this.last = this.token.elt;
			this.token = this.token.next;
			return { name : "$" + i1, pos : p5};
		default:
			var _g5 = this.peek(0);
			if(_g5.tok._hx_index == 0) {
				if(_g5.tok.k._hx_index == 40) {
					var p6 = _g5.pos;
					if(pack.length > 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return { name : "macro", pos : p6};
					} else {
						var _g6 = this.peek(0);
						if(_g6.tok._hx_index == 0) {
							if(_g6.tok.k._hx_index == 25) {
								var p7 = _g6.pos;
								if(pack.length > 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return { name : "extern", pos : p7};
								} else {
									throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
							} else {
								throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
					}
				} else {
					var _g7 = this.peek(0);
					if(_g7.tok._hx_index == 0) {
						if(_g7.tok.k._hx_index == 25) {
							var p8 = _g7.pos;
							if(pack.length > 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return { name : "extern", pos : p8};
							} else {
								throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				}
			} else {
				var _g8 = this.peek(0);
				if(_g8.tok._hx_index == 0) {
					if(_g8.tok.k._hx_index == 25) {
						var p9 = _g8.pos;
						if(pack.length > 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return { name : "extern", pos : p9};
						} else {
							throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			}
		}
	}
	,lowerIdentOrMacro: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 1) {
			if(_g.tok.c._hx_index == 3) {
				var i = _g.tok.c.s;
				if(haxeparser_HaxeParser.isLowerIdent(i)) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return i;
				} else {
					var _g1 = this.peek(0);
					if(_g1.tok._hx_index == 0) {
						switch(_g1.tok.k._hx_index) {
						case 25:
							this.last = this.token.elt;
							this.token = this.token.next;
							return "extern";
						case 40:
							this.last = this.token.elt;
							this.token = this.token.next;
							return "macro";
						default:
							throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				}
			} else {
				var _g2 = this.peek(0);
				if(_g2.tok._hx_index == 0) {
					switch(_g2.tok.k._hx_index) {
					case 25:
						this.last = this.token.elt;
						this.token = this.token.next;
						return "extern";
					case 40:
						this.last = this.token.elt;
						this.token = this.token.next;
						return "macro";
					default:
						throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			}
		} else {
			var _g3 = this.peek(0);
			if(_g3.tok._hx_index == 0) {
				switch(_g3.tok.k._hx_index) {
				case 25:
					this.last = this.token.elt;
					this.token = this.token.next;
					return "extern";
				case 40:
					this.last = this.token.elt;
					this.token = this.token.next;
					return "macro";
				default:
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		}
	}
	,anyEnumIdent: function() {
		try {
			var i = this.ident();
			return i;
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				var _g = this.peek(0);
				if(_g.tok._hx_index == 0) {
					var p = _g.pos;
					var k = _g.tok.k;
					this.last = this.token.elt;
					this.token = this.token.next;
					return { name : $hxEnums[k.__enum__].__constructs__[k._hx_index].toLowerCase(), pos : p};
				} else {
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			} else {
				throw _;
			}
		}
	}
	,propertyIdent: function() {
		try {
			var i = this.ident();
			return i.name;
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				var _g = this.peek(0);
				if(_g.tok._hx_index == 0) {
					switch(_g.tok.k._hx_index) {
					case 16:
						this.last = this.token.elt;
						this.token = this.token.next;
						return "default";
					case 32:
						this.last = this.token.elt;
						this.token = this.token.next;
						return "dynamic";
					case 36:
						this.last = this.token.elt;
						this.token = this.token.next;
						return "null";
					default:
						throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			} else {
				throw _;
			}
		}
	}
	,getDoc: function() {
		return "";
	}
	,comma: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 13) {
			this.last = this.token.elt;
			this.token = this.token.next;
			return null;
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,semicolon: function() {
		if(this.last.tok == haxeparser_TokenDef.BrClose) {
			var _g = this.peek(0);
			if(_g.tok._hx_index == 9) {
				var p = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return p;
			} else {
				return this.last.pos;
			}
		} else {
			var _g1 = this.peek(0);
			if(_g1.tok._hx_index == 9) {
				var p1 = _g1.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return p1;
			} else {
				var pos = this.last.pos;
				if(this.doResume) {
					return pos;
				} else {
					throw new js__$Boot_HaxeError(new haxeparser_ParserError(haxeparser_ParserErrorMsg.MissingSemicolon,pos));
				}
			}
		}
	}
	,parseFile: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			if(_g.tok.k._hx_index == 33) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var p = this.parsePackage();
				this.semicolon();
				var l = this.parseTypeDecls(p,[]);
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 22) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return { pack : p, decls : l};
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				var l1 = this.parseTypeDecls([],[]);
				var _g2 = this.peek(0);
				if(_g2.tok._hx_index == 22) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return { pack : [], decls : l1};
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			}
		} else {
			var l2 = this.parseTypeDecls([],[]);
			var _g3 = this.peek(0);
			if(_g3.tok._hx_index == 22) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return { pack : [], decls : l2};
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		}
	}
	,parseTypeDecls: function(pack,acc) {
		try {
			var v = this.parseTypeDecl();
			var l = this.parseTypeDecls(pack,haxeparser_HaxeParser.apush(acc,v));
			return l;
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				return acc;
			} else {
				throw _;
			}
		}
	}
	,parseTypeDecl: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			switch(_g.tok.k._hx_index) {
			case 13:
				var p1 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseImport(p1);
			case 35:
				var p11 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var t = this.parseTypePath();
				var p2 = this.semicolon();
				return { decl : haxeparser_TypeDef.EUsing(t), pos : haxeparser_HaxeParser.punion(p11,p2)};
			default:
				var meta = this.parseMeta();
				var c = this.parseCommonFlags();
				try {
					var flags = this.parseEnumFlags();
					var doc = this.getDoc();
					var name = this.typeName();
					var tl = this.parseConstraintParams();
					var _g1 = this.peek(0);
					if(_g1.tok._hx_index == 16) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var l = this.parseRepeat($bind(this,this.parseEnum));
						var _g2 = this.peek(0);
						if(_g2.tok._hx_index == 17) {
							var p21 = _g2.pos;
							this.last = this.token.elt;
							this.token = this.token.next;
							return { decl : haxeparser_TypeDef.EEnum({ name : name, doc : doc, meta : meta, params : tl, flags : c.map(function(i) {
								return i.e;
							}).concat(flags.flags), data : l}), pos : haxeparser_HaxeParser.punion(flags.pos,p21)};
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} catch( _ ) {
					haxe_CallStack.lastException = _;
					var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
					if((_1 instanceof hxparse_NoMatch)) {
						var _2 = _1;
						try {
							var flags1 = this.parseClassFlags();
							var doc1 = this.getDoc();
							var name1 = this.typeName();
							var tl1 = this.parseConstraintParams();
							var hl = this.parseRepeat($bind(this,this.parseClassHerit));
							var _g3 = this.peek(0);
							if(_g3.tok._hx_index == 16) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var fl = this.parseClassFields(false,flags1.pos);
								return { decl : haxeparser_TypeDef.EClass({ name : name1, doc : doc1, meta : meta, params : tl1, flags : c.map(function(i1) {
									return i1.c;
								}).concat(flags1.flags).concat(hl), data : fl.fields}), pos : haxeparser_HaxeParser.punion(flags1.pos,fl.pos)};
							} else {
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} catch( _3 ) {
							haxe_CallStack.lastException = _3;
							var _4 = (_3 instanceof js__$Boot_HaxeError) ? _3.val : _3;
							if((_4 instanceof hxparse_NoMatch)) {
								var _5 = _4;
								var _g4 = this.peek(0);
								if(_g4.tok._hx_index == 0) {
									switch(_g4.tok.k._hx_index) {
									case 31:
										var p12 = _g4.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var doc2 = this.getDoc();
										var name2 = this.typeName();
										var tl2 = this.parseConstraintParams();
										var _g5 = this.peek(0);
										if(_g5.tok._hx_index == 5) {
											if(_g5.tok.op._hx_index == 4) {
												var p22 = _g5.pos;
												this.last = this.token.elt;
												this.token = this.token.next;
												var t1 = this.parseComplexType();
												var _g6 = this.peek(0);
												if(_g6.tok._hx_index == 9) {
													this.last = this.token.elt;
													this.token = this.token.next;
												}
												return { decl : haxeparser_TypeDef.ETypedef({ name : name2, doc : doc2, meta : meta, params : tl2, flags : c.map(function(i2) {
													return i2.e;
												}), data : t1}), pos : haxeparser_HaxeParser.punion(p12,p22)};
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 39:
										var p13 = _g4.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var name3 = this.typeName();
										var tl3 = this.parseConstraintParams();
										var st = this.parseAbstractSubtype();
										var sl = this.parseRepeat($bind(this,this.parseAbstractRelations));
										var _g7 = this.peek(0);
										if(_g7.tok._hx_index == 16) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var fl1 = this.parseClassFields(false,p13);
											var flags2 = c.map(function(flag) {
												var _g8 = flag.e;
												switch(_g8._hx_index) {
												case 0:
													return haxeparser_AbstractFlag.APrivAbstract;
												case 1:
													return haxeparser_AbstractFlag.AExtern;
												}
											});
											if(st != null) {
												flags2.push(haxeparser_AbstractFlag.AIsType(st));
											}
											return { decl : haxeparser_TypeDef.EAbstract({ name : name3, doc : this.doc, meta : meta, params : tl3, flags : flags2.concat(sl), data : fl1.fields}), pos : haxeparser_HaxeParser.punion(p13,fl1.pos)};
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									default:
										throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
								} else {
									throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
							} else {
								throw _3;
							}
						}
					} else {
						throw _;
					}
				}
			}
		} else {
			var meta1 = this.parseMeta();
			var c1 = this.parseCommonFlags();
			try {
				var flags3 = this.parseEnumFlags();
				var doc3 = this.getDoc();
				var name4 = this.typeName();
				var tl4 = this.parseConstraintParams();
				var _g9 = this.peek(0);
				if(_g9.tok._hx_index == 16) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var l1 = this.parseRepeat($bind(this,this.parseEnum));
					var _g10 = this.peek(0);
					if(_g10.tok._hx_index == 17) {
						var p23 = _g10.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						return { decl : haxeparser_TypeDef.EEnum({ name : name4, doc : doc3, meta : meta1, params : tl4, flags : c1.map(function(i3) {
							return i3.e;
						}).concat(flags3.flags), data : l1}), pos : haxeparser_HaxeParser.punion(flags3.pos,p23)};
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} catch( _6 ) {
				haxe_CallStack.lastException = _6;
				var _7 = (_6 instanceof js__$Boot_HaxeError) ? _6.val : _6;
				if((_7 instanceof hxparse_NoMatch)) {
					var _8 = _7;
					try {
						var flags4 = this.parseClassFlags();
						var doc4 = this.getDoc();
						var name5 = this.typeName();
						var tl5 = this.parseConstraintParams();
						var hl1 = this.parseRepeat($bind(this,this.parseClassHerit));
						var _g11 = this.peek(0);
						if(_g11.tok._hx_index == 16) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var fl2 = this.parseClassFields(false,flags4.pos);
							return { decl : haxeparser_TypeDef.EClass({ name : name5, doc : doc4, meta : meta1, params : tl5, flags : c1.map(function(i4) {
								return i4.c;
							}).concat(flags4.flags).concat(hl1), data : fl2.fields}), pos : haxeparser_HaxeParser.punion(flags4.pos,fl2.pos)};
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} catch( _9 ) {
						haxe_CallStack.lastException = _9;
						var _10 = (_9 instanceof js__$Boot_HaxeError) ? _9.val : _9;
						if((_10 instanceof hxparse_NoMatch)) {
							var _11 = _10;
							var _g12 = this.peek(0);
							if(_g12.tok._hx_index == 0) {
								switch(_g12.tok.k._hx_index) {
								case 31:
									var p14 = _g12.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var doc5 = this.getDoc();
									var name6 = this.typeName();
									var tl6 = this.parseConstraintParams();
									var _g13 = this.peek(0);
									if(_g13.tok._hx_index == 5) {
										if(_g13.tok.op._hx_index == 4) {
											var p24 = _g13.pos;
											this.last = this.token.elt;
											this.token = this.token.next;
											var t2 = this.parseComplexType();
											var _g14 = this.peek(0);
											if(_g14.tok._hx_index == 9) {
												this.last = this.token.elt;
												this.token = this.token.next;
											}
											return { decl : haxeparser_TypeDef.ETypedef({ name : name6, doc : doc5, meta : meta1, params : tl6, flags : c1.map(function(i5) {
												return i5.e;
											}), data : t2}), pos : haxeparser_HaxeParser.punion(p14,p24)};
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 39:
									var p15 = _g12.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var name7 = this.typeName();
									var tl7 = this.parseConstraintParams();
									var st1 = this.parseAbstractSubtype();
									var sl1 = this.parseRepeat($bind(this,this.parseAbstractRelations));
									var _g15 = this.peek(0);
									if(_g15.tok._hx_index == 16) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var fl3 = this.parseClassFields(false,p15);
										var flags5 = c1.map(function(flag1) {
											var _g16 = flag1.e;
											switch(_g16._hx_index) {
											case 0:
												return haxeparser_AbstractFlag.APrivAbstract;
											case 1:
												return haxeparser_AbstractFlag.AExtern;
											}
										});
										if(st1 != null) {
											flags5.push(haxeparser_AbstractFlag.AIsType(st1));
										}
										return { decl : haxeparser_TypeDef.EAbstract({ name : name7, doc : this.doc, meta : meta1, params : tl7, flags : flags5.concat(sl1), data : fl3.fields}), pos : haxeparser_HaxeParser.punion(p15,fl3.pos)};
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
							} else {
								throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
						} else {
							throw _9;
						}
					}
				} else {
					throw _6;
				}
			}
		}
	}
	,parseClass: function(meta,cflags,needName) {
		var _gthis = this;
		var optName = needName ? $bind(this,this.typeName) : function() {
			var t = _gthis.parseOptional($bind(_gthis,_gthis.typeName));
			if(t == null) {
				return "";
			} else {
				return t;
			}
		};
		var flags = this.parseClassFlags();
		var doc = this.getDoc();
		var name = optName();
		var tl = this.parseConstraintParams();
		var hl = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseClassHerit));
		var _g = this.peek(0);
		if(_g.tok._hx_index == 16) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var fl = this.parseClassFields(false,flags.pos);
			return { decl : haxeparser_TypeDef.EClass({ name : name, doc : doc, meta : meta, params : tl, flags : cflags.map(function(i) {
				return i.fst;
			}).concat(flags.flags).concat(hl), data : fl.fields}), pos : haxeparser_HaxeParser.punion(flags.pos,fl.pos)};
		} else {
			throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
		}
	}
	,parseImport: function(p1) {
		var acc;
		var _g = this.peek(0);
		if(_g.tok._hx_index == 1) {
			if(_g.tok.c._hx_index == 3) {
				var p = _g.pos;
				var name = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				acc = [{ pack : name, pos : p}];
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
		}
		while(true) {
			var _g1 = this.peek(0);
			switch(_g1.tok._hx_index) {
			case 1:
				if(_g1.tok.c._hx_index == 3) {
					if(_g1.tok.c.s == "as") {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g11 = this.peek(0);
						if(_g11.tok._hx_index == 1) {
							if(_g11.tok.c._hx_index == 3) {
								var name1 = _g11.tok.c.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g12 = this.peek(0);
								if(_g12.tok._hx_index == 9) {
									var p2 = _g12.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									return { decl : haxeparser_TypeDef.EImport(acc,haxeparser_ImportMode.IAsName(name1)), pos : p2};
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			case 5:
				if(_g1.tok.op._hx_index == 23) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var _g13 = this.peek(0);
					if(_g13.tok._hx_index == 1) {
						if(_g13.tok.c._hx_index == 3) {
							var name2 = _g13.tok.c.s;
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g14 = this.peek(0);
							if(_g14.tok._hx_index == 9) {
								var p21 = _g14.pos;
								this.last = this.token.elt;
								this.token = this.token.next;
								return { decl : haxeparser_TypeDef.EImport(acc,haxeparser_ImportMode.IAsName(name2)), pos : p21};
							} else {
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			case 9:
				var p22 = _g1.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { decl : haxeparser_TypeDef.EImport(acc,haxeparser_ImportMode.INormal), pos : p22};
			case 10:
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g15 = this.peek(0);
				switch(_g15.tok._hx_index) {
				case 0:
					switch(_g15.tok.k._hx_index) {
					case 25:
						var p3 = _g15.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						acc.push({ pack : "extern", pos : p3});
						break;
					case 40:
						var p4 = _g15.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						acc.push({ pack : "macro", pos : p4});
						break;
					default:
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				case 1:
					if(_g15.tok.c._hx_index == 3) {
						var p5 = _g15.pos;
						var k = _g15.tok.c.s;
						this.last = this.token.elt;
						this.token = this.token.next;
						acc.push({ pack : k, pos : p5});
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				case 5:
					if(_g15.tok.op._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g16 = this.peek(0);
						if(_g16.tok._hx_index == 9) {
							var p23 = _g16.pos;
							this.last = this.token.elt;
							this.token = this.token.next;
							return { decl : haxeparser_TypeDef.EImport(acc,haxeparser_ImportMode.IAll), pos : p23};
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				default:
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			default:
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		}
	}
	,parseAbstractRelations: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 1) {
			if(_g.tok.c._hx_index == 3) {
				switch(_g.tok.c.s) {
				case "from":
					this.last = this.token.elt;
					this.token = this.token.next;
					var t = this.parseComplexType();
					return haxeparser_AbstractFlag.AFromType(t);
				case "to":
					this.last = this.token.elt;
					this.token = this.token.next;
					var t1 = this.parseComplexType();
					return haxeparser_AbstractFlag.AToType(t1);
				default:
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseAbstractSubtype: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 18) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var t = this.parseComplexType();
			var _g1 = this.peek(0);
			if(_g1.tok._hx_index == 19) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return t;
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} else {
			return null;
		}
	}
	,parsePackage: function() {
		return this.psep(haxeparser_TokenDef.Dot,$bind(this,this.lowerIdentOrMacro));
	}
	,parseClassFields: function(tdecl,p1) {
		var l = this.parseClassFieldResume(tdecl);
		var p2;
		var _g = this.peek(0);
		if(_g.tok._hx_index == 17) {
			var p21 = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			p2 = p21;
		} else {
			throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
		}
		return { fields : l, pos : p2};
	}
	,parseClassFieldResume: function(tdecl) {
		return this.parseRepeat($bind(this,this.parseClassField));
	}
	,parseCommonFlags: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			switch(_g.tok.k._hx_index) {
			case 19:
				this.last = this.token.elt;
				this.token = this.token.next;
				var l = this.parseCommonFlags();
				return haxeparser_HaxeParser.apush(l,{ c : haxeparser_ClassFlag.HPrivate, e : haxeparser_EnumFlag.EPrivate});
			case 25:
				this.last = this.token.elt;
				this.token = this.token.next;
				var l1 = this.parseCommonFlags();
				return haxeparser_HaxeParser.apush(l1,{ c : haxeparser_ClassFlag.HExtern, e : haxeparser_EnumFlag.EExtern});
			default:
				return [];
			}
		} else {
			return [];
		}
	}
	,parseMetaParams: function(pname) {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 18) {
			var p = _g.pos;
			if(p.min == pname.max) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var params = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.expr));
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 19) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return params;
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				return [];
			}
		} else {
			return [];
		}
	}
	,parseMetaEntry: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 21) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var name = this.metaName();
			var params = this.parseMetaParams(name.pos);
			return { name : name.name, params : params, pos : name.pos};
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseMeta: function() {
		try {
			var entry = this.parseMetaEntry();
			return haxeparser_HaxeParser.apush(this.parseMeta(),entry);
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				return [];
			} else {
				throw _;
			}
		}
	}
	,metaName: function() {
		var _g = this.peek(0);
		switch(_g.tok._hx_index) {
		case 0:
			var p = _g.pos;
			var k = _g.tok.k;
			this.last = this.token.elt;
			this.token = this.token.next;
			return { name : haxeparser_KeywordPrinter.toString(k), pos : p};
		case 1:
			if(_g.tok.c._hx_index == 3) {
				var p1 = _g.pos;
				var i = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { name : i, pos : p1};
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		case 11:
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g1 = this.peek(0);
			switch(_g1.tok._hx_index) {
			case 0:
				var p2 = _g1.pos;
				var k1 = _g1.tok.k;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { name : ":" + haxeparser_KeywordPrinter.toString(k1), pos : p2};
			case 1:
				if(_g1.tok.c._hx_index == 3) {
					var p3 = _g1.pos;
					var i1 = _g1.tok.c.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					return { name : ":" + i1, pos : p3};
				} else {
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			default:
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseEnumFlags: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			if(_g.tok.k._hx_index == 26) {
				var p = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { flags : [], pos : p};
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseClassFlags: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			switch(_g.tok.k._hx_index) {
			case 1:
				var p = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { flags : [], pos : p};
			case 27:
				var p1 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { flags : haxeparser_HaxeParser.apush([],haxeparser_ClassFlag.HInterface), pos : p1};
			default:
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseTypeHint: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 11) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var t = this.parseComplexType();
			return t;
		} else {
			return null;
		}
	}
	,parseTypeOpt: function() {
		try {
			var t = this.parseTypeHint();
			return t;
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				return null;
			} else {
				throw _;
			}
		}
	}
	,parseComplexType: function() {
		var t = this.parseComplexTypeInner();
		return this.parseComplexTypeNext(t);
	}
	,parseStructuralExtension: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 5) {
			if(_g.tok.op._hx_index == 7) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var t = this.parseTypePath();
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 13) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return t;
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseComplexTypeInner: function() {
		var _g = this.peek(0);
		switch(_g.tok._hx_index) {
		case 16:
			var p1 = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			try {
				var l = this.parseTypeAnonymous(false);
				return haxe_macro_ComplexType.TAnonymous(l);
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
				if((_1 instanceof hxparse_NoMatch)) {
					var _2 = _1;
					try {
						var t = this.parseStructuralExtension();
						var tl = this.parseRepeat($bind(this,this.parseStructuralExtension));
						tl.unshift(t);
						try {
							var l1 = this.parseTypeAnonymous(false);
							return haxe_macro_ComplexType.TExtend(tl,l1);
						} catch( _3 ) {
							haxe_CallStack.lastException = _3;
							var _4 = (_3 instanceof js__$Boot_HaxeError) ? _3.val : _3;
							if((_4 instanceof hxparse_NoMatch)) {
								var _5 = _4;
								try {
									var fl = this.parseClassFields(true,p1);
									return haxe_macro_ComplexType.TExtend(tl,fl.fields);
								} catch( _6 ) {
									haxe_CallStack.lastException = _6;
									var _7 = (_6 instanceof js__$Boot_HaxeError) ? _6.val : _6;
									if((_7 instanceof hxparse_NoMatch)) {
										var _8 = _7;
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									} else {
										throw _6;
									}
								}
							} else {
								throw _3;
							}
						}
					} catch( _9 ) {
						haxe_CallStack.lastException = _9;
						var _10 = (_9 instanceof js__$Boot_HaxeError) ? _9.val : _9;
						if((_10 instanceof hxparse_NoMatch)) {
							var _11 = _10;
							try {
								var l2 = this.parseClassFields(true,p1);
								return haxe_macro_ComplexType.TAnonymous(l2.fields);
							} catch( _12 ) {
								haxe_CallStack.lastException = _12;
								var _13 = (_12 instanceof js__$Boot_HaxeError) ? _12.val : _12;
								if((_13 instanceof hxparse_NoMatch)) {
									var _14 = _13;
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								} else {
									throw _12;
								}
							}
						} else {
							throw _9;
						}
					}
				} else {
					throw _;
				}
			}
			break;
		case 18:
			this.last = this.token.elt;
			this.token = this.token.next;
			var t1 = this.parseComplexType();
			var _g1 = this.peek(0);
			if(_g1.tok._hx_index == 19) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return haxe_macro_ComplexType.TParent(t1);
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		case 20:
			this.last = this.token.elt;
			this.token = this.token.next;
			var t2 = this.parseComplexTypeInner();
			return haxe_macro_ComplexType.TOptional(t2);
		default:
			var t3 = this.parseTypePath();
			return haxe_macro_ComplexType.TPath(t3);
		}
	}
	,parseTypePath: function() {
		return this.parseTypePath1([]);
	}
	,parseTypePath1: function(pack) {
		var ident = this.dollarIdentMacro(pack);
		if(haxeparser_HaxeParser.isLowerIdent(ident.name)) {
			var _g = this.peek(0);
			switch(_g.tok._hx_index) {
			case 9:
				this.last = this.token.elt;
				this.token = this.token.next;
				throw new js__$Boot_HaxeError(new haxeparser_ParserError(haxeparser_ParserErrorMsg.Custom("Type name should start with an uppercase letter"),ident.pos));
			case 10:
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseTypePath1(haxeparser_HaxeParser.apush(pack,ident.name));
			default:
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} else {
			var sub;
			var _g1 = this.peek(0);
			if(_g1.tok._hx_index == 10) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g2 = this.peek(0);
				if(_g2.tok._hx_index == 1) {
					if(_g2.tok.c._hx_index == 3) {
						var name = _g2.tok.c.s;
						if(!haxeparser_HaxeParser.isLowerIdent(name)) {
							this.last = this.token.elt;
							this.token = this.token.next;
							sub = name;
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				sub = null;
			}
			var params;
			var _g11 = this.peek(0);
			if(_g11.tok._hx_index == 5) {
				if(_g11.tok.op._hx_index == 9) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var l = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseTypePathOrConst));
					var _g12 = this.peek(0);
					if(_g12.tok._hx_index == 5) {
						if(_g12.tok.op._hx_index == 7) {
							this.last = this.token.elt;
							this.token = this.token.next;
							params = l;
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					params = [];
				}
			} else {
				params = [];
			}
			return { pack : pack, name : ident.name, params : params, sub : sub};
		}
	}
	,typeName: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 1) {
			if(_g.tok.c._hx_index == 3) {
				var p = _g.pos;
				var name = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				if(haxeparser_HaxeParser.isLowerIdent(name)) {
					throw new js__$Boot_HaxeError(new haxeparser_ParserError(haxeparser_ParserErrorMsg.Custom("Type name should start with an uppercase letter"),p));
				} else {
					return name;
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseTypePathOrConst: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 14) {
			var p1 = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			var l = this.parseArrayDecl();
			var _g1 = this.peek(0);
			if(_g1.tok._hx_index == 15) {
				var p2 = _g1.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return haxe_macro_TypeParam.TPExpr({ expr : haxe_macro_ExprDef.EArrayDecl(l), pos : haxeparser_HaxeParser.punion(p1,p2)});
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} else {
			try {
				var t = this.parseComplexType();
				return haxe_macro_TypeParam.TPType(t);
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
				if((_1 instanceof hxparse_NoMatch)) {
					var _2 = _1;
					var _g2 = this.peek(0);
					if(_g2.tok._hx_index == 1) {
						var p = _g2.pos;
						var c = _g2.tok.c;
						this.last = this.token.elt;
						this.token = this.token.next;
						return haxe_macro_TypeParam.TPExpr({ expr : haxe_macro_ExprDef.EConst(c), pos : p});
					} else {
						try {
							var e = this.expr();
							return haxe_macro_TypeParam.TPExpr(e);
						} catch( _3 ) {
							haxe_CallStack.lastException = _3;
							var _4 = (_3 instanceof js__$Boot_HaxeError) ? _3.val : _3;
							if((_4 instanceof hxparse_NoMatch)) {
								var _5 = _4;
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							} else {
								throw _3;
							}
						}
					}
				} else {
					throw _;
				}
			}
		}
	}
	,parseComplexTypeNext: function(t) {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 12) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var t2 = this.parseComplexType();
			if(t2._hx_index == 1) {
				var r = t2.ret;
				var args = t2.args;
				return haxe_macro_ComplexType.TFunction(haxeparser_HaxeParser.apush(args,t),r);
			} else {
				return haxe_macro_ComplexType.TFunction([t],t2);
			}
		} else {
			return t;
		}
	}
	,parseTypeAnonymous: function(opt) {
		try {
			var id = this.ident();
			var t = this.parseTypeHint();
			var next = function(p2,acc) {
				var t1 = !opt ? t : t._hx_index == 0 ? t.p.name == "Null" ? t.p.pack.length == 0 ? t : haxe_macro_ComplexType.TPath({ pack : [], name : "Null", sub : null, params : [haxe_macro_TypeParam.TPType(t)]}) : haxe_macro_ComplexType.TPath({ pack : [], name : "Null", sub : null, params : [haxe_macro_TypeParam.TPType(t)]}) : haxe_macro_ComplexType.TPath({ pack : [], name : "Null", sub : null, params : [haxe_macro_TypeParam.TPType(t)]});
				return haxeparser_HaxeParser.aunshift(acc,{ name : id.name, meta : opt ? [{ name : ":optional", params : [], pos : id.pos}] : [], access : [], doc : null, kind : haxe_macro_FieldType.FVar(t1,null), pos : haxeparser_HaxeParser.punion(id.pos,p2)});
			};
			var _g = this.peek(0);
			switch(_g.tok._hx_index) {
			case 13:
				var p21 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 17) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return next(p21,[]);
				} else {
					try {
						var l = this.parseTypeAnonymous(false);
						return next(p21,l);
					} catch( _ ) {
						haxe_CallStack.lastException = _;
						var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
						if((_1 instanceof hxparse_NoMatch)) {
							var _2 = _1;
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						} else {
							throw _;
						}
					}
				}
				break;
			case 17:
				var p22 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return next(p22,[]);
			default:
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} catch( _3 ) {
			haxe_CallStack.lastException = _3;
			var _4 = (_3 instanceof js__$Boot_HaxeError) ? _3.val : _3;
			if((_4 instanceof hxparse_NoMatch)) {
				var _5 = _4;
				var _g2 = this.peek(0);
				if(_g2.tok._hx_index == 20) {
					if(!opt) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.parseTypeAnonymous(true);
					} else {
						throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			} else {
				throw _3;
			}
		}
	}
	,parseEnum: function() {
		this.doc = null;
		var meta = this.parseMeta();
		var name = this.anyEnumIdent();
		var doc = this.getDoc();
		var params = this.parseConstraintParams();
		var args;
		var _g = this.peek(0);
		if(_g.tok._hx_index == 18) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var l = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseEnumParam));
			var _g1 = this.peek(0);
			if(_g1.tok._hx_index == 19) {
				this.last = this.token.elt;
				this.token = this.token.next;
				args = l;
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} else {
			args = [];
		}
		var t = this.parseTypeOpt();
		var p2;
		try {
			var p = this.semicolon();
			p2 = p;
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			} else {
				throw _;
			}
		}
		return { name : name.name, doc : doc, meta : meta, args : args, params : params, type : t, pos : haxeparser_HaxeParser.punion(name.pos,p2)};
	}
	,parseEnumParam: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 20) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var name = this.ident();
			var t = this.parseTypeHint();
			return { name : name.name, opt : true, type : t};
		} else {
			var name1 = this.ident();
			var t1 = this.parseTypeHint();
			return { name : name1.name, opt : false, type : t1};
		}
	}
	,parseClassField: function() {
		this.doc = null;
		var meta = this.parseMeta();
		var al = this.parseCfRights(true,[]);
		var doc = this.getDoc();
		var data;
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			switch(_g.tok.k._hx_index) {
			case 0:
				var p1 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var name = this.parseFunName();
				var pl = this.parseConstraintParams();
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 18) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var al1 = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseFunParam));
					var _g2 = this.peek(0);
					if(_g2.tok._hx_index == 19) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var t = this.parseTypeOpt();
						var e;
						try {
							var e1 = this.toplevelExpr();
							this.semicolon();
							e = { expr : e1, pos : e1.pos};
						} catch( _ ) {
							haxe_CallStack.lastException = _;
							var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
							if((_1 instanceof hxparse_NoMatch)) {
								var _2 = _1;
								var _g3 = this.peek(0);
								if(_g3.tok._hx_index == 9) {
									var p = _g3.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									e = { expr : null, pos : p};
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw _;
							}
						}
						var f = { params : pl, args : al1, ret : t, expr : e.expr};
						data = { name : name, pos : haxeparser_HaxeParser.punion(p1,e.pos), kind : haxe_macro_FieldType.FFun(f)};
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			case 2:
				var p11 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var name1 = this.ident();
				var _g4 = this.peek(0);
				if(_g4.tok._hx_index == 18) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var i1 = this.propertyIdent();
					var _g5 = this.peek(0);
					if(_g5.tok._hx_index == 13) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var i2 = this.propertyIdent();
						var _g6 = this.peek(0);
						if(_g6.tok._hx_index == 19) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var t1 = this.parseTypeOpt();
							var e2;
							var _g7 = this.peek(0);
							switch(_g7.tok._hx_index) {
							case 5:
								if(_g7.tok.op._hx_index == 4) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var e3 = this.toplevelExpr();
									var p2 = this.semicolon();
									e2 = { expr : e3, pos : p2};
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							case 9:
								var p21 = _g7.pos;
								this.last = this.token.elt;
								this.token = this.token.next;
								e2 = { expr : null, pos : p21};
								break;
							default:
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
							data = { name : name1.name, pos : haxeparser_HaxeParser.punion(p11,e2.pos), kind : haxe_macro_FieldType.FProp(i1,i2,t1,e2.expr)};
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					var t2 = this.parseTypeOpt();
					var e4;
					var _g8 = this.peek(0);
					switch(_g8.tok._hx_index) {
					case 5:
						if(_g8.tok.op._hx_index == 4) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var e5 = this.toplevelExpr();
							var p22 = this.semicolon();
							e4 = { expr : e5, pos : p22};
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 9:
						var p23 = _g8.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						e4 = { expr : null, pos : p23};
						break;
					default:
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					data = { name : name1.name, pos : haxeparser_HaxeParser.punion(p11,e4.pos), kind : haxe_macro_FieldType.FVar(t2,e4.expr)};
				}
				break;
			default:
				if(al.length == 0) {
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			}
		} else if(al.length == 0) {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		} else {
			throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
		}
		return { name : data.name, doc : doc, meta : meta, access : al, pos : data.pos, kind : data.kind};
	}
	,parseCfRights: function(allowStatic,l) {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			if(_g.tok.k._hx_index == 17) {
				if(allowStatic) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var l1 = this.parseCfRights(false,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AStatic));
					return l1;
				} else {
					var _g1 = this.peek(0);
					if(_g1.tok._hx_index == 0) {
						switch(_g1.tok.k._hx_index) {
						case 18:
							this.last = this.token.elt;
							this.token = this.token.next;
							var l2 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.APublic));
							return l2;
						case 19:
							this.last = this.token.elt;
							this.token = this.token.next;
							var l3 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.APrivate));
							return l3;
						case 30:
							this.last = this.token.elt;
							this.token = this.token.next;
							var l4 = this.parseCfRights(false,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AOverride));
							return l4;
						case 32:
							this.last = this.token.elt;
							this.token = this.token.next;
							var l5 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.ADynamic));
							return l5;
						case 34:
							this.last = this.token.elt;
							this.token = this.token.next;
							var l6 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AInline));
							return l6;
						case 40:
							this.last = this.token.elt;
							this.token = this.token.next;
							var l7 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AMacro));
							return l7;
						default:
							return l;
						}
					} else {
						return l;
					}
				}
			} else {
				var _g2 = this.peek(0);
				if(_g2.tok._hx_index == 0) {
					switch(_g2.tok.k._hx_index) {
					case 18:
						this.last = this.token.elt;
						this.token = this.token.next;
						var l8 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.APublic));
						return l8;
					case 19:
						this.last = this.token.elt;
						this.token = this.token.next;
						var l9 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.APrivate));
						return l9;
					case 30:
						this.last = this.token.elt;
						this.token = this.token.next;
						var l10 = this.parseCfRights(false,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AOverride));
						return l10;
					case 32:
						this.last = this.token.elt;
						this.token = this.token.next;
						var l11 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.ADynamic));
						return l11;
					case 34:
						this.last = this.token.elt;
						this.token = this.token.next;
						var l12 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AInline));
						return l12;
					case 40:
						this.last = this.token.elt;
						this.token = this.token.next;
						var l13 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AMacro));
						return l13;
					default:
						return l;
					}
				} else {
					return l;
				}
			}
		} else {
			var _g3 = this.peek(0);
			if(_g3.tok._hx_index == 0) {
				switch(_g3.tok.k._hx_index) {
				case 18:
					this.last = this.token.elt;
					this.token = this.token.next;
					var l14 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.APublic));
					return l14;
				case 19:
					this.last = this.token.elt;
					this.token = this.token.next;
					var l15 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.APrivate));
					return l15;
				case 30:
					this.last = this.token.elt;
					this.token = this.token.next;
					var l16 = this.parseCfRights(false,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AOverride));
					return l16;
				case 32:
					this.last = this.token.elt;
					this.token = this.token.next;
					var l17 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.ADynamic));
					return l17;
				case 34:
					this.last = this.token.elt;
					this.token = this.token.next;
					var l18 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AInline));
					return l18;
				case 40:
					this.last = this.token.elt;
					this.token = this.token.next;
					var l19 = this.parseCfRights(allowStatic,haxeparser_HaxeParser.apush(l,haxe_macro_Access.AMacro));
					return l19;
				default:
					return l;
				}
			} else {
				return l;
			}
		}
	}
	,parseFunName: function() {
		var _g = this.peek(0);
		switch(_g.tok._hx_index) {
		case 0:
			if(_g.tok.k._hx_index == 22) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return "new";
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		case 1:
			if(_g.tok.c._hx_index == 3) {
				var name = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return name;
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseFunParam: function() {
		var meta = this.parseMeta();
		var _g = this.peek(0);
		if(_g.tok._hx_index == 20) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var id = this.ident();
			var t = this.parseTypeOpt();
			var c = this.parseFunParamValue();
			return { name : id.name, opt : true, type : t, value : c, meta : meta};
		} else {
			var id1 = this.ident();
			var t1 = this.parseTypeOpt();
			var c1 = this.parseFunParamValue();
			return { name : id1.name, opt : false, type : t1, value : c1, meta : meta};
		}
	}
	,parseFunParamValue: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 5) {
			if(_g.tok.op._hx_index == 4) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var e = this.toplevelExpr();
				return e;
			} else {
				return null;
			}
		} else {
			return null;
		}
	}
	,parseFunParamType: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 20) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var id = this.ident();
			var t = this.parseTypeHint();
			return { name : id.name, opt : true, type : t};
		} else {
			var id1 = this.ident();
			var t1 = this.parseTypeHint();
			return { name : id1.name, opt : false, type : t1};
		}
	}
	,parseConstraintParams: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 5) {
			if(_g.tok.op._hx_index == 9) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var l = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseConstraintParam));
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 5) {
					if(_g1.tok.op._hx_index == 7) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return l;
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				return [];
			}
		} else {
			return [];
		}
	}
	,parseConstraintParam: function() {
		var meta = this.parseMeta();
		var name = this.typeName();
		var params = [];
		var ctl;
		var _g = this.peek(0);
		if(_g.tok._hx_index == 11) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g1 = this.peek(0);
			if(_g1.tok._hx_index == 18) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var l = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseComplexType));
				var _g2 = this.peek(0);
				if(_g2.tok._hx_index == 19) {
					this.last = this.token.elt;
					this.token = this.token.next;
					ctl = l;
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				try {
					var t = this.parseComplexType();
					ctl = [t];
				} catch( _ ) {
					haxe_CallStack.lastException = _;
					var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
					if((_1 instanceof hxparse_NoMatch)) {
						var _2 = _1;
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					} else {
						throw _;
					}
				}
			}
		} else {
			ctl = [];
		}
		return { name : name, params : params, constraints : ctl, meta : meta};
	}
	,parseClassHerit: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			switch(_g.tok.k._hx_index) {
			case 11:
				this.last = this.token.elt;
				this.token = this.token.next;
				var t = this.parseTypePath();
				return haxeparser_ClassFlag.HExtends(t);
			case 12:
				this.last = this.token.elt;
				this.token = this.token.next;
				var t1 = this.parseTypePath();
				return haxeparser_ClassFlag.HImplements(t1);
			default:
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,block1: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 1) {
			switch(_g.tok.c._hx_index) {
			case 2:
				var p = _g.pos;
				var name = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.block2(haxeparser_HaxeParser.quoteIdent(name),haxe_macro_QuoteStatus.Quoted,haxe_macro_Constant.CString(name),p);
			case 3:
				var p1 = _g.pos;
				var name1 = _g.tok.c.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.block2(name1,haxe_macro_QuoteStatus.Unquoted,haxe_macro_Constant.CIdent(name1),p1);
			default:
				var b = this.block([]);
				return haxe_macro_ExprDef.EBlock(b);
			}
		} else {
			var b1 = this.block([]);
			return haxe_macro_ExprDef.EBlock(b1);
		}
	}
	,block2: function(name,quotes,ident,p) {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 11) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var e = this.expr();
			var l = this.parseObjDecl();
			l.unshift({ field : name, expr : e, quotes : quotes});
			return haxe_macro_ExprDef.EObjectDecl(l);
		} else {
			var e1 = this.exprNext({ expr : haxe_macro_ExprDef.EConst(ident), pos : p});
			var _ = this.semicolon();
			var b = this.block([e1]);
			return haxe_macro_ExprDef.EBlock(b);
		}
	}
	,block: function(acc) {
		try {
			var e = this.parseBlockElt();
			return this.block(haxeparser_HaxeParser.apush(acc,e));
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			if((e2 instanceof hxparse_NoMatch)) {
				var e3 = e2;
				return acc;
			} else {
				throw e1;
			}
		}
	}
	,parseBlockElt: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			if(_g.tok.k._hx_index == 2) {
				var p1 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var vl = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseVarDecl));
				var p2 = this.semicolon();
				return { expr : haxe_macro_ExprDef.EVars(vl), pos : haxeparser_HaxeParser.punion(p1,p2)};
			} else {
				var e = this.expr();
				this.semicolon();
				return e;
			}
		} else {
			var e1 = this.expr();
			this.semicolon();
			return e1;
		}
	}
	,parseObjDecl: function() {
		var acc = [];
		while(true) {
			var _g = this.peek(0);
			if(_g.tok._hx_index == 13) {
				this.last = this.token.elt;
				this.token = this.token.next;
				try {
					var id = this.ident();
					var _g1 = this.peek(0);
					if(_g1.tok._hx_index == 11) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var e = this.expr();
						acc.push({ field : id.name, expr : e, quotes : haxe_macro_QuoteStatus.Unquoted});
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} catch( _ ) {
					haxe_CallStack.lastException = _;
					var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
					if((_1 instanceof hxparse_NoMatch)) {
						var _2 = _1;
						var _g2 = this.peek(0);
						if(_g2.tok._hx_index == 1) {
							if(_g2.tok.c._hx_index == 2) {
								var name = _g2.tok.c.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g3 = this.peek(0);
								if(_g3.tok._hx_index == 11) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var e1 = this.expr();
									acc.push({ field : haxeparser_HaxeParser.quoteIdent(name), expr : e1, quotes : haxe_macro_QuoteStatus.Quoted});
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								break;
							}
						} else {
							break;
						}
					} else {
						throw _;
					}
				}
			} else {
				break;
			}
		}
		return acc;
	}
	,parseArrayDecl: function() {
		var acc = [];
		var br = false;
		while(true) {
			try {
				var e = this.expr();
				acc.push(e);
				var _g = this.peek(0);
				if(_g.tok._hx_index == 13) {
					this.last = this.token.elt;
					this.token = this.token.next;
				} else {
					br = true;
				}
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
				if((_1 instanceof hxparse_NoMatch)) {
					var _2 = _1;
					br = true;
				} else {
					throw _;
				}
			}
			if(br) {
				break;
			}
		}
		return acc;
	}
	,parseVarDecl: function() {
		var id = this.dollarIdent();
		var t = this.parseTypeOpt();
		var _g = this.peek(0);
		if(_g.tok._hx_index == 5) {
			if(_g.tok.op._hx_index == 4) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var e = this.expr();
				return { name : id.name, type : t, expr : e};
			} else {
				return { name : id.name, type : t, expr : null};
			}
		} else {
			return { name : id.name, type : t, expr : null};
		}
	}
	,inlineFunction: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			switch(_g.tok.k._hx_index) {
			case 0:
				var p1 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return { isInline : false, pos : p1};
			case 34:
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 0) {
					if(_g1.tok.k._hx_index == 0) {
						var p11 = _g1.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						return { isInline : true, pos : p11};
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			default:
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,reify: function(inMacro) {
		var reificator = new haxeparser__$HaxeParser_Reificator(inMacro);
		return { toExpr : function(e) {
			return reificator.toExpr(e,e.pos);
		}, toType : $bind(reificator,reificator.toCType), toTypeDef : $bind(reificator,reificator.toTypeDef)};
	}
	,reifyExpr: function(e) {
		var toExpr = this.reify(this.inMacro).toExpr;
		var e1 = toExpr(e);
		return { expr : haxe_macro_ExprDef.ECheckType(e1,haxe_macro_ComplexType.TPath({ pack : ["haxe","macro"], name : "Expr", sub : null, params : []})), pos : e1.pos};
	}
	,parseMacroExpr: function(p) {
		var _g = this.peek(0);
		switch(_g.tok._hx_index) {
		case 0:
			if(_g.tok.k._hx_index == 2) {
				var p1 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var vl = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseVarDecl));
				return this.reifyExpr({ expr : haxe_macro_ExprDef.EVars(vl), pos : p1});
			} else {
				try {
					var d = this.parseClass([],[],false);
					var toType = this.reify(this.inMacro).toTypeDef;
					return { expr : haxe_macro_ExprDef.ECheckType(toType(d),haxe_macro_ComplexType.TPath({ pack : ["haxe","macro"], name : "Expr", sub : "TypeDefinition", params : []})), pos : p};
				} catch( _ ) {
					haxe_CallStack.lastException = _;
					var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
					if((_1 instanceof hxparse_NoMatch)) {
						var _2 = _1;
						var e = this.secureExpr();
						return this.reifyExpr(e);
					} else {
						throw _;
					}
				}
			}
			break;
		case 11:
			this.last = this.token.elt;
			this.token = this.token.next;
			var t = this.parseComplexType();
			var toType1 = this.reify(this.inMacro).toType;
			var t1 = toType1(t,p);
			return { expr : haxe_macro_ExprDef.ECheckType(t1,haxe_macro_ComplexType.TPath({ pack : ["haxe","macro"], name : "Expr", sub : "ComplexType", params : []})), pos : p};
		default:
			try {
				var d1 = this.parseClass([],[],false);
				var toType2 = this.reify(this.inMacro).toTypeDef;
				return { expr : haxe_macro_ExprDef.ECheckType(toType2(d1),haxe_macro_ComplexType.TPath({ pack : ["haxe","macro"], name : "Expr", sub : "TypeDefinition", params : []})), pos : p};
			} catch( _3 ) {
				haxe_CallStack.lastException = _3;
				var _4 = (_3 instanceof js__$Boot_HaxeError) ? _3.val : _3;
				if((_4 instanceof hxparse_NoMatch)) {
					var _5 = _4;
					var e1 = this.secureExpr();
					return this.reifyExpr(e1);
				} else {
					throw _3;
				}
			}
		}
	}
	,expr: function() {
		try {
			var meta = this.parseMetaEntry();
			return haxeparser_HaxeParser.makeMeta(meta.name,meta.params,this.secureExpr(),meta.pos);
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				var _g = this.peek(0);
				switch(_g.tok._hx_index) {
				case 0:
					switch(_g.tok.k._hx_index) {
					case 2:
						var p1 = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						var v = this.parseVarDecl();
						return { expr : haxe_macro_ExprDef.EVars([v]), pos : p1};
					case 22:
						var p11 = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						var t = this.parseTypePath();
						var _g1 = this.peek(0);
						if(_g1.tok._hx_index == 18) {
							this.last = this.token.elt;
							this.token = this.token.next;
							try {
								var al = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.expr));
								var _g2 = this.peek(0);
								if(_g2.tok._hx_index == 19) {
									var p2 = _g2.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									return this.exprNext({ expr : haxe_macro_ExprDef.ENew(t,al), pos : haxeparser_HaxeParser.punion(p11,p2)});
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} catch( _3 ) {
								haxe_CallStack.lastException = _3;
								var _4 = (_3 instanceof js__$Boot_HaxeError) ? _3.val : _3;
								if((_4 instanceof hxparse_NoMatch)) {
									var _5 = _4;
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								} else {
									throw _3;
								}
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 23:
						var p = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("this")), pos : p});
					case 24:
						var p3 = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						var e = this.expr();
						return { expr : haxe_macro_ExprDef.EThrow(e), pos : p3};
					case 29:
						var p12 = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g3 = this.peek(0);
						if(_g3.tok._hx_index == 18) {
							var pp = _g3.pos;
							this.last = this.token.elt;
							this.token = this.token.next;
							var e1 = this.expr();
							var _g4 = this.peek(0);
							if(_g4.tok._hx_index == 13) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var t1 = this.parseComplexType();
								var _g5 = this.peek(0);
								if(_g5.tok._hx_index == 19) {
									var p21 = _g5.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									return this.exprNext({ expr : haxe_macro_ExprDef.ECast(e1,t1), pos : haxeparser_HaxeParser.punion(p12,p21)});
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								try {
									var t2 = this.parseTypeHint();
									var _g6 = this.peek(0);
									if(_g6.tok._hx_index == 19) {
										var p22 = _g6.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var pu = haxeparser_HaxeParser.punion(p12,p22);
										var ep = { expr : haxe_macro_ExprDef.EParenthesis({ expr : haxe_macro_ExprDef.ECheckType(e1,t2), pos : pu}), pos : pu};
										return this.exprNext({ expr : haxe_macro_ExprDef.ECast(ep,null), pos : haxeparser_HaxeParser.punion(p12,pu)});
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} catch( _6 ) {
									haxe_CallStack.lastException = _6;
									var _7 = (_6 instanceof js__$Boot_HaxeError) ? _6.val : _6;
									if((_7 instanceof hxparse_NoMatch)) {
										var _8 = _7;
										var _g7 = this.peek(0);
										if(_g7.tok._hx_index == 19) {
											var p23 = _g7.pos;
											this.last = this.token.elt;
											this.token = this.token.next;
											var ep1 = this.exprNext({ expr : haxe_macro_ExprDef.EParenthesis(e1), pos : haxeparser_HaxeParser.punion(pp,p23)});
											return this.exprNext({ expr : haxe_macro_ExprDef.ECast(ep1,null), pos : haxeparser_HaxeParser.punion(p12,ep1.pos)});
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw _6;
									}
								}
							}
						} else {
							var e2 = this.secureExpr();
							return this.exprNext({ expr : haxe_macro_ExprDef.ECast(e2,null), pos : haxeparser_HaxeParser.punion(p12,e2.pos)});
						}
						break;
					case 36:
						var p4 = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("null")), pos : p4});
					case 37:
						var p5 = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("true")), pos : p5});
					case 38:
						var p6 = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("false")), pos : p6});
					case 40:
						var p7 = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.parseMacroExpr(p7);
					default:
						try {
							var inl = this.inlineFunction();
							var name = this.parseOptional($bind(this,this.dollarIdent));
							var pl = this.parseConstraintParams();
							var _g8 = this.peek(0);
							if(_g8.tok._hx_index == 18) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var al1 = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseFunParam));
								var _g9 = this.peek(0);
								if(_g9.tok._hx_index == 19) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var t3 = this.parseTypeOpt();
									var make = function(e3) {
										var f = { params : pl, ret : t3, args : al1, expr : e3};
										return { expr : haxe_macro_ExprDef.EFunction(name == null ? null : inl.isInline ? "inline_" + name.name : name.name,f), pos : haxeparser_HaxeParser.punion(inl.pos,e3.pos)};
									};
									return this.exprNext(make(this.secureExpr()));
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} catch( _9 ) {
							haxe_CallStack.lastException = _9;
							var _10 = (_9 instanceof js__$Boot_HaxeError) ? _9.val : _9;
							if((_10 instanceof hxparse_NoMatch)) {
								var _11 = _10;
								var _g10 = this.peek(0);
								switch(_g10.tok._hx_index) {
								case 0:
									switch(_g10.tok.k._hx_index) {
									case 3:
										var p8 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var _g11 = this.peek(0);
										if(_g11.tok._hx_index == 18) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var cond = this.expr();
											var _g12 = this.peek(0);
											if(_g12.tok._hx_index == 19) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var e11 = this.expr();
												var e21;
												var _g13 = this.peek(0);
												if(_g13.tok._hx_index == 0) {
													if(_g13.tok.k._hx_index == 4) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var e22 = this.expr();
														e21 = e22;
													} else {
														var _g14 = this.peek(1);
														var _g15 = this.peek(0);
														if(_g15.tok._hx_index == 9) {
															if(_g14.tok._hx_index == 0) {
																if(_g14.tok.k._hx_index == 4) {
																	this.last = this.token.elt;
																	this.token = this.token.next;
																	this.last = this.token.elt;
																	this.token = this.token.next;
																	e21 = this.secureExpr();
																} else {
																	e21 = null;
																}
															} else {
																e21 = null;
															}
														} else {
															e21 = null;
														}
													}
												} else {
													var _g16 = this.peek(1);
													var _g17 = this.peek(0);
													if(_g17.tok._hx_index == 9) {
														if(_g16.tok._hx_index == 0) {
															if(_g16.tok.k._hx_index == 4) {
																this.last = this.token.elt;
																this.token = this.token.next;
																this.last = this.token.elt;
																this.token = this.token.next;
																e21 = this.secureExpr();
															} else {
																e21 = null;
															}
														} else {
															e21 = null;
														}
													} else {
														e21 = null;
													}
												}
												return { expr : haxe_macro_ExprDef.EIf(cond,e11,e21), pos : haxeparser_HaxeParser.punion(p8,e21 == null ? e11.pos : e21.pos)};
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 5:
										var p13 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var _g18 = this.peek(0);
										if(_g18.tok._hx_index == 18) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var cond1 = this.expr();
											var _g19 = this.peek(0);
											if(_g19.tok._hx_index == 19) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var e4 = this.secureExpr();
												return { expr : haxe_macro_ExprDef.EWhile(cond1,e4,true), pos : haxeparser_HaxeParser.punion(p13,e4.pos)};
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 6:
										var p14 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var e5 = this.expr();
										var _g20 = this.peek(0);
										if(_g20.tok._hx_index == 0) {
											if(_g20.tok.k._hx_index == 5) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var _g21 = this.peek(0);
												if(_g21.tok._hx_index == 18) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var cond2 = this.expr();
													var _g22 = this.peek(0);
													if(_g22.tok._hx_index == 19) {
														this.last = this.token.elt;
														this.token = this.token.next;
														return { expr : haxe_macro_ExprDef.EWhile(cond2,e5,false), pos : haxeparser_HaxeParser.punion(p14,e5.pos)};
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 7:
										var p9 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var _g23 = this.peek(0);
										if(_g23.tok._hx_index == 18) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var it = this.expr();
											var _g24 = this.peek(0);
											if(_g24.tok._hx_index == 19) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var e6 = this.secureExpr();
												return { expr : haxe_macro_ExprDef.EFor(it,e6), pos : haxeparser_HaxeParser.punion(p9,e6.pos)};
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 8:
										var p10 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										return { expr : haxe_macro_ExprDef.EBreak, pos : p10};
									case 9:
										var p15 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										return { expr : haxe_macro_ExprDef.EContinue, pos : p15};
									case 10:
										var p16 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var e7 = this.parseOptional($bind(this,this.expr));
										return { expr : haxe_macro_ExprDef.EReturn(e7), pos : e7 == null ? p16 : haxeparser_HaxeParser.punion(p16,e7.pos)};
									case 14:
										var p17 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var e8 = this.expr();
										var _g25 = this.peek(0);
										if(_g25.tok._hx_index == 16) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var cases = this.parseSwitchCases();
											var _g26 = this.peek(0);
											if(_g26.tok._hx_index == 17) {
												var p24 = _g26.pos;
												this.last = this.token.elt;
												this.token = this.token.next;
												return { expr : haxe_macro_ExprDef.ESwitch(e8,cases.cases,cases.def), pos : haxeparser_HaxeParser.punion(p17,p24)};
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 20:
										var p18 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var e9 = this.expr();
										var cl = this.parseRepeat($bind(this,this.parseCatch));
										return { expr : haxe_macro_ExprDef.ETry(e9,cl), pos : p18};
									case 28:
										var p19 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var e10 = this.expr();
										return { expr : haxe_macro_ExprDef.EUntyped(e10), pos : haxeparser_HaxeParser.punion(p19,e10.pos)};
									default:
										throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
									break;
								case 3:
									var p20 = _g10.pos;
									var v1 = _g10.tok.s;
									this.last = this.token.elt;
									this.token = this.token.next;
									return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("$" + v1)), pos : p20});
								case 4:
									var p110 = _g10.pos;
									var op = _g10.tok.op;
									this.last = this.token.elt;
									this.token = this.token.next;
									var e12 = this.expr();
									return haxeparser_HaxeParser.makeUnop(op,e12,p110);
								case 5:
									if(_g10.tok.op._hx_index == 3) {
										var p111 = _g10.pos;
										this.last = this.token.elt;
										this.token = this.token.next;
										var e13 = this.expr();
										var neg = function(s) {
											if(HxOverrides.cca(s,0) == 45) {
												return HxOverrides.substr(s,1,null);
											} else {
												return "-" + s;
											}
										};
										var _g27 = haxeparser_HaxeParser.makeUnop(haxe_macro_Unop.OpNeg,e13,p111);
										if(_g27.expr._hx_index == 9) {
											if(_g27.expr.op._hx_index == 3) {
												if(_g27.expr.postFix == false) {
													if(_g27.expr.e.expr._hx_index == 0) {
														switch(_g27.expr.e.expr.c._hx_index) {
														case 0:
															var p25 = _g27.pos;
															var i = _g27.expr.e.expr.c.v;
															return { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CInt(neg(i))), pos : p25};
														case 1:
															var p26 = _g27.pos;
															var j = _g27.expr.e.expr.c.f;
															return { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(neg(j))), pos : p26};
														default:
															var e14 = _g27;
															return e14;
														}
													} else {
														var e15 = _g27;
														return e15;
													}
												} else {
													var e16 = _g27;
													return e16;
												}
											} else {
												var e17 = _g27;
												return e17;
											}
										} else {
											var e18 = _g27;
											return e18;
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
									break;
								case 8:
									var p112 = _g10.pos;
									var i1 = _g10.tok.s;
									this.last = this.token.elt;
									this.token = this.token.next;
									var e23 = this.expr();
									return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpInterval,{ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CInt(i1)), pos : p112},e23);
								default:
									throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
							} else {
								throw _9;
							}
						}
					}
					break;
				case 1:
					var p27 = _g.pos;
					var c = _g.tok.c;
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.exprNext({ expr : haxe_macro_ExprDef.EConst(c), pos : p27});
				case 14:
					var p113 = _g.pos;
					this.last = this.token.elt;
					this.token = this.token.next;
					var l = this.parseArrayDecl();
					var _g28 = this.peek(0);
					if(_g28.tok._hx_index == 15) {
						var p28 = _g28.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.exprNext({ expr : haxe_macro_ExprDef.EArrayDecl(l), pos : haxeparser_HaxeParser.punion(p113,p28)});
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				case 16:
					var p114 = _g.pos;
					this.last = this.token.elt;
					this.token = this.token.next;
					var b = this.block1();
					var _g29 = this.peek(0);
					if(_g29.tok._hx_index == 17) {
						var p29 = _g29.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						var e19 = { expr : b, pos : haxeparser_HaxeParser.punion(p114,p29)};
						if(b._hx_index == 5) {
							return this.exprNext(e19);
						} else {
							return e19;
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				case 18:
					var p115 = _g.pos;
					this.last = this.token.elt;
					this.token = this.token.next;
					var e20 = this.expr();
					var _g30 = this.peek(0);
					if(_g30.tok._hx_index == 19) {
						var p210 = _g30.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.exprNext({ expr : haxe_macro_ExprDef.EParenthesis(e20), pos : haxeparser_HaxeParser.punion(p115,p210)});
					} else {
						try {
							var t4 = this.parseTypeHint();
							var _g31 = this.peek(0);
							if(_g31.tok._hx_index == 19) {
								var p211 = _g31.pos;
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.exprNext({ expr : haxe_macro_ExprDef.ECheckType(e20,t4), pos : haxeparser_HaxeParser.punion(p115,p211)});
							} else {
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} catch( _12 ) {
							haxe_CallStack.lastException = _12;
							var _13 = (_12 instanceof js__$Boot_HaxeError) ? _12.val : _12;
							if((_13 instanceof hxparse_NoMatch)) {
								var _14 = _13;
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							} else {
								throw _12;
							}
						}
					}
					break;
				default:
					try {
						var inl1 = this.inlineFunction();
						var name1 = this.parseOptional($bind(this,this.dollarIdent));
						var pl1 = this.parseConstraintParams();
						var _g32 = this.peek(0);
						if(_g32.tok._hx_index == 18) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var al2 = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseFunParam));
							var _g33 = this.peek(0);
							if(_g33.tok._hx_index == 19) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var t5 = this.parseTypeOpt();
								var make1 = function(e24) {
									var f1 = { params : pl1, ret : t5, args : al2, expr : e24};
									return { expr : haxe_macro_ExprDef.EFunction(name1 == null ? null : inl1.isInline ? "inline_" + name1.name : name1.name,f1), pos : haxeparser_HaxeParser.punion(inl1.pos,e24.pos)};
								};
								return this.exprNext(make1(this.secureExpr()));
							} else {
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} catch( _15 ) {
						haxe_CallStack.lastException = _15;
						var _16 = (_15 instanceof js__$Boot_HaxeError) ? _15.val : _15;
						if((_16 instanceof hxparse_NoMatch)) {
							var _17 = _16;
							var _g34 = this.peek(0);
							switch(_g34.tok._hx_index) {
							case 0:
								switch(_g34.tok.k._hx_index) {
								case 3:
									var p30 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var _g35 = this.peek(0);
									if(_g35.tok._hx_index == 18) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var cond3 = this.expr();
										var _g36 = this.peek(0);
										if(_g36.tok._hx_index == 19) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var e110 = this.expr();
											var e25;
											var _g37 = this.peek(0);
											if(_g37.tok._hx_index == 0) {
												if(_g37.tok.k._hx_index == 4) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var e26 = this.expr();
													e25 = e26;
												} else {
													var _g38 = this.peek(1);
													var _g110 = this.peek(0);
													if(_g110.tok._hx_index == 9) {
														if(_g38.tok._hx_index == 0) {
															if(_g38.tok.k._hx_index == 4) {
																this.last = this.token.elt;
																this.token = this.token.next;
																this.last = this.token.elt;
																this.token = this.token.next;
																e25 = this.secureExpr();
															} else {
																e25 = null;
															}
														} else {
															e25 = null;
														}
													} else {
														e25 = null;
													}
												}
											} else {
												var _g39 = this.peek(1);
												var _g111 = this.peek(0);
												if(_g111.tok._hx_index == 9) {
													if(_g39.tok._hx_index == 0) {
														if(_g39.tok.k._hx_index == 4) {
															this.last = this.token.elt;
															this.token = this.token.next;
															this.last = this.token.elt;
															this.token = this.token.next;
															e25 = this.secureExpr();
														} else {
															e25 = null;
														}
													} else {
														e25 = null;
													}
												} else {
													e25 = null;
												}
											}
											return { expr : haxe_macro_ExprDef.EIf(cond3,e110,e25), pos : haxeparser_HaxeParser.punion(p30,e25 == null ? e110.pos : e25.pos)};
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 5:
									var p116 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var _g40 = this.peek(0);
									if(_g40.tok._hx_index == 18) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var cond4 = this.expr();
										var _g41 = this.peek(0);
										if(_g41.tok._hx_index == 19) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var e27 = this.secureExpr();
											return { expr : haxe_macro_ExprDef.EWhile(cond4,e27,true), pos : haxeparser_HaxeParser.punion(p116,e27.pos)};
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 6:
									var p117 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var e28 = this.expr();
									var _g42 = this.peek(0);
									if(_g42.tok._hx_index == 0) {
										if(_g42.tok.k._hx_index == 5) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var _g43 = this.peek(0);
											if(_g43.tok._hx_index == 18) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var cond5 = this.expr();
												var _g44 = this.peek(0);
												if(_g44.tok._hx_index == 19) {
													this.last = this.token.elt;
													this.token = this.token.next;
													return { expr : haxe_macro_ExprDef.EWhile(cond5,e28,false), pos : haxeparser_HaxeParser.punion(p117,e28.pos)};
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 7:
									var p31 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var _g45 = this.peek(0);
									if(_g45.tok._hx_index == 18) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var it1 = this.expr();
										var _g46 = this.peek(0);
										if(_g46.tok._hx_index == 19) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var e29 = this.secureExpr();
											return { expr : haxe_macro_ExprDef.EFor(it1,e29), pos : haxeparser_HaxeParser.punion(p31,e29.pos)};
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 8:
									var p32 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									return { expr : haxe_macro_ExprDef.EBreak, pos : p32};
								case 9:
									var p33 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									return { expr : haxe_macro_ExprDef.EContinue, pos : p33};
								case 10:
									var p34 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var e30 = this.parseOptional($bind(this,this.expr));
									return { expr : haxe_macro_ExprDef.EReturn(e30), pos : e30 == null ? p34 : haxeparser_HaxeParser.punion(p34,e30.pos)};
								case 14:
									var p118 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var e31 = this.expr();
									var _g47 = this.peek(0);
									if(_g47.tok._hx_index == 16) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var cases1 = this.parseSwitchCases();
										var _g48 = this.peek(0);
										if(_g48.tok._hx_index == 17) {
											var p212 = _g48.pos;
											this.last = this.token.elt;
											this.token = this.token.next;
											return { expr : haxe_macro_ExprDef.ESwitch(e31,cases1.cases,cases1.def), pos : haxeparser_HaxeParser.punion(p118,p212)};
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 20:
									var p119 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var e32 = this.expr();
									var cl1 = this.parseRepeat($bind(this,this.parseCatch));
									return { expr : haxe_macro_ExprDef.ETry(e32,cl1), pos : p119};
								case 28:
									var p120 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var e33 = this.expr();
									return { expr : haxe_macro_ExprDef.EUntyped(e33), pos : haxeparser_HaxeParser.punion(p120,e33.pos)};
								default:
									throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
								break;
							case 3:
								var p35 = _g34.pos;
								var v2 = _g34.tok.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("$" + v2)), pos : p35});
							case 4:
								var p121 = _g34.pos;
								var op1 = _g34.tok.op;
								this.last = this.token.elt;
								this.token = this.token.next;
								var e34 = this.expr();
								return haxeparser_HaxeParser.makeUnop(op1,e34,p121);
							case 5:
								if(_g34.tok.op._hx_index == 3) {
									var p122 = _g34.pos;
									this.last = this.token.elt;
									this.token = this.token.next;
									var e35 = this.expr();
									var neg1 = function(s1) {
										if(HxOverrides.cca(s1,0) == 45) {
											return HxOverrides.substr(s1,1,null);
										} else {
											return "-" + s1;
										}
									};
									var _g49 = haxeparser_HaxeParser.makeUnop(haxe_macro_Unop.OpNeg,e35,p122);
									if(_g49.expr._hx_index == 9) {
										if(_g49.expr.op._hx_index == 3) {
											if(_g49.expr.postFix == false) {
												if(_g49.expr.e.expr._hx_index == 0) {
													switch(_g49.expr.e.expr.c._hx_index) {
													case 0:
														var p36 = _g49.pos;
														var i2 = _g49.expr.e.expr.c.v;
														return { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CInt(neg1(i2))), pos : p36};
													case 1:
														var p37 = _g49.pos;
														var j1 = _g49.expr.e.expr.c.f;
														return { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(neg1(j1))), pos : p37};
													default:
														var e36 = _g49;
														return e36;
													}
												} else {
													var e37 = _g49;
													return e37;
												}
											} else {
												var e38 = _g49;
												return e38;
											}
										} else {
											var e39 = _g49;
											return e39;
										}
									} else {
										var e40 = _g49;
										return e40;
									}
								} else {
									throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
								break;
							case 8:
								var p123 = _g34.pos;
								var i3 = _g34.tok.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								var e210 = this.expr();
								return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpInterval,{ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CInt(i3)), pos : p123},e210);
							default:
								throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
						} else {
							throw _15;
						}
					}
				}
			} else {
				throw _;
			}
		}
	}
	,toplevelExpr: function() {
		return this.expr();
	}
	,exprNext: function(e1) {
		var _g = this.peek(0);
		switch(_g.tok._hx_index) {
		case 5:
			if(_g.tok.op._hx_index == 7) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 5) {
					switch(_g1.tok.op._hx_index) {
					case 4:
						this.last = this.token.elt;
						this.token = this.token.next;
						return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpGte,e1,this.secureExpr());
					case 7:
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g2 = this.peek(0);
						if(_g2.tok._hx_index == 5) {
							switch(_g2.tok.op._hx_index) {
							case 4:
								this.last = this.token.elt;
								this.token = this.token.next;
								var e2 = this.expr();
								return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr),e1,e2);
							case 7:
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g3 = this.peek(0);
								if(_g3.tok._hx_index == 5) {
									if(_g3.tok.op._hx_index == 4) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var e21 = this.expr();
										return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpUShr),e1,e21);
									} else {
										var e22 = this.secureExpr();
										return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpUShr,e1,e22);
									}
								} else {
									var e23 = this.secureExpr();
									return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpUShr,e1,e23);
								}
								break;
							default:
								var e24 = this.secureExpr();
								return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpShr,e1,e24);
							}
						} else {
							var e25 = this.secureExpr();
							return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpShr,e1,e25);
						}
						break;
					default:
						var e26 = this.secureExpr();
						return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpGt,e1,e26);
					}
				} else {
					var e27 = this.secureExpr();
					return haxeparser_HaxeParser.makeBinop(haxe_macro_Binop.OpGt,e1,e27);
				}
			} else {
				var op = _g.tok.op;
				this.last = this.token.elt;
				this.token = this.token.next;
				var e28 = this.expr();
				return haxeparser_HaxeParser.makeBinop(op,e1,e28);
			}
			break;
		case 10:
			var p = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g4 = this.peek(0);
			if(_g4.tok._hx_index == 3) {
				var p2 = _g4.pos;
				var v = _g4.tok.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"$" + v), pos : haxeparser_HaxeParser.punion(e1.pos,p2)});
			} else {
				var _g5 = this.peek(0);
				if(_g5.tok._hx_index == 1) {
					if(_g5.tok.c._hx_index == 3) {
						var p21 = _g5.pos;
						var f = _g5.tok.c.s;
						if(p.max == p21.min) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,f), pos : haxeparser_HaxeParser.punion(e1.pos,p21)});
						} else {
							var _g6 = this.peek(0);
							if(_g6.tok._hx_index == 0) {
								if(_g6.tok.k._hx_index == 40) {
									var p22 = _g6.pos;
									if(p.max == p22.min) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"macro"), pos : haxeparser_HaxeParser.punion(e1.pos,p22)});
									} else {
										var _g7 = this.peek(0);
										if(_g7.tok._hx_index == 0) {
											if(_g7.tok.k._hx_index == 25) {
												var p23 = _g7.pos;
												if(p.max == p23.min) {
													this.last = this.token.elt;
													this.token = this.token.next;
													return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"extern"), pos : haxeparser_HaxeParser.punion(e1.pos,p23)});
												} else {
													var _g8 = this.peek(0);
													if(_g8.tok._hx_index == 0) {
														if(_g8.tok.k._hx_index == 22) {
															var p24 = _g8.pos;
															if(p.max == p24.min) {
																this.last = this.token.elt;
																this.token = this.token.next;
																return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p24)});
															} else if(e1.expr._hx_index == 0) {
																if(e1.expr.c._hx_index == 0) {
																	var p25 = e1.pos;
																	var v1 = e1.expr.c.v;
																	if(p25.max == p.min) {
																		return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v1 + ".")), pos : haxeparser_HaxeParser.punion(p,p25)});
																	} else {
																		throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																	}
																} else {
																	throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																}
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else if(e1.expr._hx_index == 0) {
															if(e1.expr.c._hx_index == 0) {
																var p26 = e1.pos;
																var v2 = e1.expr.c.v;
																if(p26.max == p.min) {
																	return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v2 + ".")), pos : haxeparser_HaxeParser.punion(p,p26)});
																} else {
																	throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																}
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p27 = e1.pos;
															var v3 = e1.expr.c.v;
															if(p27.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v3 + ".")), pos : haxeparser_HaxeParser.punion(p,p27)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												}
											} else {
												var _g9 = this.peek(0);
												if(_g9.tok._hx_index == 0) {
													if(_g9.tok.k._hx_index == 22) {
														var p28 = _g9.pos;
														if(p.max == p28.min) {
															this.last = this.token.elt;
															this.token = this.token.next;
															return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p28)});
														} else if(e1.expr._hx_index == 0) {
															if(e1.expr.c._hx_index == 0) {
																var p29 = e1.pos;
																var v4 = e1.expr.c.v;
																if(p29.max == p.min) {
																	return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v4 + ".")), pos : haxeparser_HaxeParser.punion(p,p29)});
																} else {
																	throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																}
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p210 = e1.pos;
															var v5 = e1.expr.c.v;
															if(p210.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v5 + ".")), pos : haxeparser_HaxeParser.punion(p,p210)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p211 = e1.pos;
														var v6 = e1.expr.c.v;
														if(p211.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v6 + ".")), pos : haxeparser_HaxeParser.punion(p,p211)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											}
										} else {
											var _g10 = this.peek(0);
											if(_g10.tok._hx_index == 0) {
												if(_g10.tok.k._hx_index == 22) {
													var p212 = _g10.pos;
													if(p.max == p212.min) {
														this.last = this.token.elt;
														this.token = this.token.next;
														return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p212)});
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p213 = e1.pos;
															var v7 = e1.expr.c.v;
															if(p213.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v7 + ".")), pos : haxeparser_HaxeParser.punion(p,p213)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p214 = e1.pos;
														var v8 = e1.expr.c.v;
														if(p214.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v8 + ".")), pos : haxeparser_HaxeParser.punion(p,p214)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p215 = e1.pos;
													var v9 = e1.expr.c.v;
													if(p215.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v9 + ".")), pos : haxeparser_HaxeParser.punion(p,p215)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										}
									}
								} else {
									var _g11 = this.peek(0);
									if(_g11.tok._hx_index == 0) {
										if(_g11.tok.k._hx_index == 25) {
											var p216 = _g11.pos;
											if(p.max == p216.min) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"extern"), pos : haxeparser_HaxeParser.punion(e1.pos,p216)});
											} else {
												var _g12 = this.peek(0);
												if(_g12.tok._hx_index == 0) {
													if(_g12.tok.k._hx_index == 22) {
														var p217 = _g12.pos;
														if(p.max == p217.min) {
															this.last = this.token.elt;
															this.token = this.token.next;
															return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p217)});
														} else if(e1.expr._hx_index == 0) {
															if(e1.expr.c._hx_index == 0) {
																var p218 = e1.pos;
																var v10 = e1.expr.c.v;
																if(p218.max == p.min) {
																	return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v10 + ".")), pos : haxeparser_HaxeParser.punion(p,p218)});
																} else {
																	throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																}
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p219 = e1.pos;
															var v11 = e1.expr.c.v;
															if(p219.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v11 + ".")), pos : haxeparser_HaxeParser.punion(p,p219)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p220 = e1.pos;
														var v12 = e1.expr.c.v;
														if(p220.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v12 + ".")), pos : haxeparser_HaxeParser.punion(p,p220)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											}
										} else {
											var _g13 = this.peek(0);
											if(_g13.tok._hx_index == 0) {
												if(_g13.tok.k._hx_index == 22) {
													var p221 = _g13.pos;
													if(p.max == p221.min) {
														this.last = this.token.elt;
														this.token = this.token.next;
														return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p221)});
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p222 = e1.pos;
															var v13 = e1.expr.c.v;
															if(p222.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v13 + ".")), pos : haxeparser_HaxeParser.punion(p,p222)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p223 = e1.pos;
														var v14 = e1.expr.c.v;
														if(p223.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v14 + ".")), pos : haxeparser_HaxeParser.punion(p,p223)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p224 = e1.pos;
													var v15 = e1.expr.c.v;
													if(p224.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v15 + ".")), pos : haxeparser_HaxeParser.punion(p,p224)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										}
									} else {
										var _g14 = this.peek(0);
										if(_g14.tok._hx_index == 0) {
											if(_g14.tok.k._hx_index == 22) {
												var p225 = _g14.pos;
												if(p.max == p225.min) {
													this.last = this.token.elt;
													this.token = this.token.next;
													return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p225)});
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p226 = e1.pos;
														var v16 = e1.expr.c.v;
														if(p226.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v16 + ".")), pos : haxeparser_HaxeParser.punion(p,p226)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p227 = e1.pos;
													var v17 = e1.expr.c.v;
													if(p227.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v17 + ".")), pos : haxeparser_HaxeParser.punion(p,p227)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p228 = e1.pos;
												var v18 = e1.expr.c.v;
												if(p228.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v18 + ".")), pos : haxeparser_HaxeParser.punion(p,p228)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									}
								}
							} else {
								var _g15 = this.peek(0);
								if(_g15.tok._hx_index == 0) {
									if(_g15.tok.k._hx_index == 25) {
										var p229 = _g15.pos;
										if(p.max == p229.min) {
											this.last = this.token.elt;
											this.token = this.token.next;
											return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"extern"), pos : haxeparser_HaxeParser.punion(e1.pos,p229)});
										} else {
											var _g16 = this.peek(0);
											if(_g16.tok._hx_index == 0) {
												if(_g16.tok.k._hx_index == 22) {
													var p230 = _g16.pos;
													if(p.max == p230.min) {
														this.last = this.token.elt;
														this.token = this.token.next;
														return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p230)});
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p231 = e1.pos;
															var v19 = e1.expr.c.v;
															if(p231.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v19 + ".")), pos : haxeparser_HaxeParser.punion(p,p231)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p232 = e1.pos;
														var v20 = e1.expr.c.v;
														if(p232.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v20 + ".")), pos : haxeparser_HaxeParser.punion(p,p232)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p233 = e1.pos;
													var v21 = e1.expr.c.v;
													if(p233.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v21 + ".")), pos : haxeparser_HaxeParser.punion(p,p233)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										}
									} else {
										var _g17 = this.peek(0);
										if(_g17.tok._hx_index == 0) {
											if(_g17.tok.k._hx_index == 22) {
												var p234 = _g17.pos;
												if(p.max == p234.min) {
													this.last = this.token.elt;
													this.token = this.token.next;
													return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p234)});
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p235 = e1.pos;
														var v22 = e1.expr.c.v;
														if(p235.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v22 + ".")), pos : haxeparser_HaxeParser.punion(p,p235)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p236 = e1.pos;
													var v23 = e1.expr.c.v;
													if(p236.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v23 + ".")), pos : haxeparser_HaxeParser.punion(p,p236)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p237 = e1.pos;
												var v24 = e1.expr.c.v;
												if(p237.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v24 + ".")), pos : haxeparser_HaxeParser.punion(p,p237)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									}
								} else {
									var _g18 = this.peek(0);
									if(_g18.tok._hx_index == 0) {
										if(_g18.tok.k._hx_index == 22) {
											var p238 = _g18.pos;
											if(p.max == p238.min) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p238)});
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p239 = e1.pos;
													var v25 = e1.expr.c.v;
													if(p239.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v25 + ".")), pos : haxeparser_HaxeParser.punion(p,p239)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p240 = e1.pos;
												var v26 = e1.expr.c.v;
												if(p240.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v26 + ".")), pos : haxeparser_HaxeParser.punion(p,p240)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p241 = e1.pos;
											var v27 = e1.expr.c.v;
											if(p241.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v27 + ".")), pos : haxeparser_HaxeParser.punion(p,p241)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								}
							}
						}
					} else {
						var _g19 = this.peek(0);
						if(_g19.tok._hx_index == 0) {
							if(_g19.tok.k._hx_index == 40) {
								var p242 = _g19.pos;
								if(p.max == p242.min) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"macro"), pos : haxeparser_HaxeParser.punion(e1.pos,p242)});
								} else {
									var _g20 = this.peek(0);
									if(_g20.tok._hx_index == 0) {
										if(_g20.tok.k._hx_index == 25) {
											var p243 = _g20.pos;
											if(p.max == p243.min) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"extern"), pos : haxeparser_HaxeParser.punion(e1.pos,p243)});
											} else {
												var _g21 = this.peek(0);
												if(_g21.tok._hx_index == 0) {
													if(_g21.tok.k._hx_index == 22) {
														var p244 = _g21.pos;
														if(p.max == p244.min) {
															this.last = this.token.elt;
															this.token = this.token.next;
															return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p244)});
														} else if(e1.expr._hx_index == 0) {
															if(e1.expr.c._hx_index == 0) {
																var p245 = e1.pos;
																var v28 = e1.expr.c.v;
																if(p245.max == p.min) {
																	return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v28 + ".")), pos : haxeparser_HaxeParser.punion(p,p245)});
																} else {
																	throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																}
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p246 = e1.pos;
															var v29 = e1.expr.c.v;
															if(p246.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v29 + ".")), pos : haxeparser_HaxeParser.punion(p,p246)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p247 = e1.pos;
														var v30 = e1.expr.c.v;
														if(p247.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v30 + ".")), pos : haxeparser_HaxeParser.punion(p,p247)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											}
										} else {
											var _g22 = this.peek(0);
											if(_g22.tok._hx_index == 0) {
												if(_g22.tok.k._hx_index == 22) {
													var p248 = _g22.pos;
													if(p.max == p248.min) {
														this.last = this.token.elt;
														this.token = this.token.next;
														return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p248)});
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p249 = e1.pos;
															var v31 = e1.expr.c.v;
															if(p249.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v31 + ".")), pos : haxeparser_HaxeParser.punion(p,p249)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p250 = e1.pos;
														var v32 = e1.expr.c.v;
														if(p250.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v32 + ".")), pos : haxeparser_HaxeParser.punion(p,p250)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p251 = e1.pos;
													var v33 = e1.expr.c.v;
													if(p251.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v33 + ".")), pos : haxeparser_HaxeParser.punion(p,p251)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										}
									} else {
										var _g23 = this.peek(0);
										if(_g23.tok._hx_index == 0) {
											if(_g23.tok.k._hx_index == 22) {
												var p252 = _g23.pos;
												if(p.max == p252.min) {
													this.last = this.token.elt;
													this.token = this.token.next;
													return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p252)});
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p253 = e1.pos;
														var v34 = e1.expr.c.v;
														if(p253.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v34 + ".")), pos : haxeparser_HaxeParser.punion(p,p253)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p254 = e1.pos;
													var v35 = e1.expr.c.v;
													if(p254.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v35 + ".")), pos : haxeparser_HaxeParser.punion(p,p254)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p255 = e1.pos;
												var v36 = e1.expr.c.v;
												if(p255.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v36 + ".")), pos : haxeparser_HaxeParser.punion(p,p255)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									}
								}
							} else {
								var _g24 = this.peek(0);
								if(_g24.tok._hx_index == 0) {
									if(_g24.tok.k._hx_index == 25) {
										var p256 = _g24.pos;
										if(p.max == p256.min) {
											this.last = this.token.elt;
											this.token = this.token.next;
											return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"extern"), pos : haxeparser_HaxeParser.punion(e1.pos,p256)});
										} else {
											var _g25 = this.peek(0);
											if(_g25.tok._hx_index == 0) {
												if(_g25.tok.k._hx_index == 22) {
													var p257 = _g25.pos;
													if(p.max == p257.min) {
														this.last = this.token.elt;
														this.token = this.token.next;
														return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p257)});
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p258 = e1.pos;
															var v37 = e1.expr.c.v;
															if(p258.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v37 + ".")), pos : haxeparser_HaxeParser.punion(p,p258)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p259 = e1.pos;
														var v38 = e1.expr.c.v;
														if(p259.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v38 + ".")), pos : haxeparser_HaxeParser.punion(p,p259)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p260 = e1.pos;
													var v39 = e1.expr.c.v;
													if(p260.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v39 + ".")), pos : haxeparser_HaxeParser.punion(p,p260)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										}
									} else {
										var _g26 = this.peek(0);
										if(_g26.tok._hx_index == 0) {
											if(_g26.tok.k._hx_index == 22) {
												var p261 = _g26.pos;
												if(p.max == p261.min) {
													this.last = this.token.elt;
													this.token = this.token.next;
													return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p261)});
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p262 = e1.pos;
														var v40 = e1.expr.c.v;
														if(p262.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v40 + ".")), pos : haxeparser_HaxeParser.punion(p,p262)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p263 = e1.pos;
													var v41 = e1.expr.c.v;
													if(p263.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v41 + ".")), pos : haxeparser_HaxeParser.punion(p,p263)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p264 = e1.pos;
												var v42 = e1.expr.c.v;
												if(p264.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v42 + ".")), pos : haxeparser_HaxeParser.punion(p,p264)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									}
								} else {
									var _g27 = this.peek(0);
									if(_g27.tok._hx_index == 0) {
										if(_g27.tok.k._hx_index == 22) {
											var p265 = _g27.pos;
											if(p.max == p265.min) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p265)});
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p266 = e1.pos;
													var v43 = e1.expr.c.v;
													if(p266.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v43 + ".")), pos : haxeparser_HaxeParser.punion(p,p266)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p267 = e1.pos;
												var v44 = e1.expr.c.v;
												if(p267.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v44 + ".")), pos : haxeparser_HaxeParser.punion(p,p267)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p268 = e1.pos;
											var v45 = e1.expr.c.v;
											if(p268.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v45 + ".")), pos : haxeparser_HaxeParser.punion(p,p268)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								}
							}
						} else {
							var _g28 = this.peek(0);
							if(_g28.tok._hx_index == 0) {
								if(_g28.tok.k._hx_index == 25) {
									var p269 = _g28.pos;
									if(p.max == p269.min) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"extern"), pos : haxeparser_HaxeParser.punion(e1.pos,p269)});
									} else {
										var _g29 = this.peek(0);
										if(_g29.tok._hx_index == 0) {
											if(_g29.tok.k._hx_index == 22) {
												var p270 = _g29.pos;
												if(p.max == p270.min) {
													this.last = this.token.elt;
													this.token = this.token.next;
													return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p270)});
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p271 = e1.pos;
														var v46 = e1.expr.c.v;
														if(p271.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v46 + ".")), pos : haxeparser_HaxeParser.punion(p,p271)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p272 = e1.pos;
													var v47 = e1.expr.c.v;
													if(p272.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v47 + ".")), pos : haxeparser_HaxeParser.punion(p,p272)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p273 = e1.pos;
												var v48 = e1.expr.c.v;
												if(p273.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v48 + ".")), pos : haxeparser_HaxeParser.punion(p,p273)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									}
								} else {
									var _g30 = this.peek(0);
									if(_g30.tok._hx_index == 0) {
										if(_g30.tok.k._hx_index == 22) {
											var p274 = _g30.pos;
											if(p.max == p274.min) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p274)});
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p275 = e1.pos;
													var v49 = e1.expr.c.v;
													if(p275.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v49 + ".")), pos : haxeparser_HaxeParser.punion(p,p275)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p276 = e1.pos;
												var v50 = e1.expr.c.v;
												if(p276.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v50 + ".")), pos : haxeparser_HaxeParser.punion(p,p276)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p277 = e1.pos;
											var v51 = e1.expr.c.v;
											if(p277.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v51 + ".")), pos : haxeparser_HaxeParser.punion(p,p277)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								}
							} else {
								var _g31 = this.peek(0);
								if(_g31.tok._hx_index == 0) {
									if(_g31.tok.k._hx_index == 22) {
										var p278 = _g31.pos;
										if(p.max == p278.min) {
											this.last = this.token.elt;
											this.token = this.token.next;
											return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p278)});
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p279 = e1.pos;
												var v52 = e1.expr.c.v;
												if(p279.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v52 + ".")), pos : haxeparser_HaxeParser.punion(p,p279)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p280 = e1.pos;
											var v53 = e1.expr.c.v;
											if(p280.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v53 + ".")), pos : haxeparser_HaxeParser.punion(p,p280)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else if(e1.expr._hx_index == 0) {
									if(e1.expr.c._hx_index == 0) {
										var p281 = e1.pos;
										var v54 = e1.expr.c.v;
										if(p281.max == p.min) {
											return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v54 + ".")), pos : haxeparser_HaxeParser.punion(p,p281)});
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							}
						}
					}
				} else {
					var _g32 = this.peek(0);
					if(_g32.tok._hx_index == 0) {
						if(_g32.tok.k._hx_index == 40) {
							var p282 = _g32.pos;
							if(p.max == p282.min) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"macro"), pos : haxeparser_HaxeParser.punion(e1.pos,p282)});
							} else {
								var _g33 = this.peek(0);
								if(_g33.tok._hx_index == 0) {
									if(_g33.tok.k._hx_index == 25) {
										var p283 = _g33.pos;
										if(p.max == p283.min) {
											this.last = this.token.elt;
											this.token = this.token.next;
											return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"extern"), pos : haxeparser_HaxeParser.punion(e1.pos,p283)});
										} else {
											var _g34 = this.peek(0);
											if(_g34.tok._hx_index == 0) {
												if(_g34.tok.k._hx_index == 22) {
													var p284 = _g34.pos;
													if(p.max == p284.min) {
														this.last = this.token.elt;
														this.token = this.token.next;
														return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p284)});
													} else if(e1.expr._hx_index == 0) {
														if(e1.expr.c._hx_index == 0) {
															var p285 = e1.pos;
															var v55 = e1.expr.c.v;
															if(p285.max == p.min) {
																return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v55 + ".")), pos : haxeparser_HaxeParser.punion(p,p285)});
															} else {
																throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p286 = e1.pos;
														var v56 = e1.expr.c.v;
														if(p286.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v56 + ".")), pos : haxeparser_HaxeParser.punion(p,p286)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p287 = e1.pos;
													var v57 = e1.expr.c.v;
													if(p287.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v57 + ".")), pos : haxeparser_HaxeParser.punion(p,p287)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										}
									} else {
										var _g35 = this.peek(0);
										if(_g35.tok._hx_index == 0) {
											if(_g35.tok.k._hx_index == 22) {
												var p288 = _g35.pos;
												if(p.max == p288.min) {
													this.last = this.token.elt;
													this.token = this.token.next;
													return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p288)});
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p289 = e1.pos;
														var v58 = e1.expr.c.v;
														if(p289.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v58 + ".")), pos : haxeparser_HaxeParser.punion(p,p289)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p290 = e1.pos;
													var v59 = e1.expr.c.v;
													if(p290.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v59 + ".")), pos : haxeparser_HaxeParser.punion(p,p290)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p291 = e1.pos;
												var v60 = e1.expr.c.v;
												if(p291.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v60 + ".")), pos : haxeparser_HaxeParser.punion(p,p291)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									}
								} else {
									var _g36 = this.peek(0);
									if(_g36.tok._hx_index == 0) {
										if(_g36.tok.k._hx_index == 22) {
											var p292 = _g36.pos;
											if(p.max == p292.min) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p292)});
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p293 = e1.pos;
													var v61 = e1.expr.c.v;
													if(p293.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v61 + ".")), pos : haxeparser_HaxeParser.punion(p,p293)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p294 = e1.pos;
												var v62 = e1.expr.c.v;
												if(p294.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v62 + ".")), pos : haxeparser_HaxeParser.punion(p,p294)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p295 = e1.pos;
											var v63 = e1.expr.c.v;
											if(p295.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v63 + ".")), pos : haxeparser_HaxeParser.punion(p,p295)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								}
							}
						} else {
							var _g37 = this.peek(0);
							if(_g37.tok._hx_index == 0) {
								if(_g37.tok.k._hx_index == 25) {
									var p296 = _g37.pos;
									if(p.max == p296.min) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"extern"), pos : haxeparser_HaxeParser.punion(e1.pos,p296)});
									} else {
										var _g38 = this.peek(0);
										if(_g38.tok._hx_index == 0) {
											if(_g38.tok.k._hx_index == 22) {
												var p297 = _g38.pos;
												if(p.max == p297.min) {
													this.last = this.token.elt;
													this.token = this.token.next;
													return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p297)});
												} else if(e1.expr._hx_index == 0) {
													if(e1.expr.c._hx_index == 0) {
														var p298 = e1.pos;
														var v64 = e1.expr.c.v;
														if(p298.max == p.min) {
															return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v64 + ".")), pos : haxeparser_HaxeParser.punion(p,p298)});
														} else {
															throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p299 = e1.pos;
													var v65 = e1.expr.c.v;
													if(p299.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v65 + ".")), pos : haxeparser_HaxeParser.punion(p,p299)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p2100 = e1.pos;
												var v66 = e1.expr.c.v;
												if(p2100.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v66 + ".")), pos : haxeparser_HaxeParser.punion(p,p2100)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									}
								} else {
									var _g39 = this.peek(0);
									if(_g39.tok._hx_index == 0) {
										if(_g39.tok.k._hx_index == 22) {
											var p2101 = _g39.pos;
											if(p.max == p2101.min) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p2101)});
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p2102 = e1.pos;
													var v67 = e1.expr.c.v;
													if(p2102.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v67 + ".")), pos : haxeparser_HaxeParser.punion(p,p2102)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p2103 = e1.pos;
												var v68 = e1.expr.c.v;
												if(p2103.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v68 + ".")), pos : haxeparser_HaxeParser.punion(p,p2103)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p2104 = e1.pos;
											var v69 = e1.expr.c.v;
											if(p2104.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v69 + ".")), pos : haxeparser_HaxeParser.punion(p,p2104)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								}
							} else {
								var _g40 = this.peek(0);
								if(_g40.tok._hx_index == 0) {
									if(_g40.tok.k._hx_index == 22) {
										var p2105 = _g40.pos;
										if(p.max == p2105.min) {
											this.last = this.token.elt;
											this.token = this.token.next;
											return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p2105)});
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p2106 = e1.pos;
												var v70 = e1.expr.c.v;
												if(p2106.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v70 + ".")), pos : haxeparser_HaxeParser.punion(p,p2106)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p2107 = e1.pos;
											var v71 = e1.expr.c.v;
											if(p2107.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v71 + ".")), pos : haxeparser_HaxeParser.punion(p,p2107)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else if(e1.expr._hx_index == 0) {
									if(e1.expr.c._hx_index == 0) {
										var p2108 = e1.pos;
										var v72 = e1.expr.c.v;
										if(p2108.max == p.min) {
											return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v72 + ".")), pos : haxeparser_HaxeParser.punion(p,p2108)});
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							}
						}
					} else {
						var _g41 = this.peek(0);
						if(_g41.tok._hx_index == 0) {
							if(_g41.tok.k._hx_index == 25) {
								var p2109 = _g41.pos;
								if(p.max == p2109.min) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"extern"), pos : haxeparser_HaxeParser.punion(e1.pos,p2109)});
								} else {
									var _g42 = this.peek(0);
									if(_g42.tok._hx_index == 0) {
										if(_g42.tok.k._hx_index == 22) {
											var p2110 = _g42.pos;
											if(p.max == p2110.min) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p2110)});
											} else if(e1.expr._hx_index == 0) {
												if(e1.expr.c._hx_index == 0) {
													var p2111 = e1.pos;
													var v73 = e1.expr.c.v;
													if(p2111.max == p.min) {
														return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v73 + ".")), pos : haxeparser_HaxeParser.punion(p,p2111)});
													} else {
														throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p2112 = e1.pos;
												var v74 = e1.expr.c.v;
												if(p2112.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v74 + ".")), pos : haxeparser_HaxeParser.punion(p,p2112)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p2113 = e1.pos;
											var v75 = e1.expr.c.v;
											if(p2113.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v75 + ".")), pos : haxeparser_HaxeParser.punion(p,p2113)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								}
							} else {
								var _g43 = this.peek(0);
								if(_g43.tok._hx_index == 0) {
									if(_g43.tok.k._hx_index == 22) {
										var p2114 = _g43.pos;
										if(p.max == p2114.min) {
											this.last = this.token.elt;
											this.token = this.token.next;
											return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p2114)});
										} else if(e1.expr._hx_index == 0) {
											if(e1.expr.c._hx_index == 0) {
												var p2115 = e1.pos;
												var v76 = e1.expr.c.v;
												if(p2115.max == p.min) {
													return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v76 + ".")), pos : haxeparser_HaxeParser.punion(p,p2115)});
												} else {
													throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p2116 = e1.pos;
											var v77 = e1.expr.c.v;
											if(p2116.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v77 + ".")), pos : haxeparser_HaxeParser.punion(p,p2116)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else if(e1.expr._hx_index == 0) {
									if(e1.expr.c._hx_index == 0) {
										var p2117 = e1.pos;
										var v78 = e1.expr.c.v;
										if(p2117.max == p.min) {
											return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v78 + ".")), pos : haxeparser_HaxeParser.punion(p,p2117)});
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							}
						} else {
							var _g44 = this.peek(0);
							if(_g44.tok._hx_index == 0) {
								if(_g44.tok.k._hx_index == 22) {
									var p2118 = _g44.pos;
									if(p.max == p2118.min) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return this.exprNext({ expr : haxe_macro_ExprDef.EField(e1,"new"), pos : haxeparser_HaxeParser.punion(e1.pos,p2118)});
									} else if(e1.expr._hx_index == 0) {
										if(e1.expr.c._hx_index == 0) {
											var p2119 = e1.pos;
											var v79 = e1.expr.c.v;
											if(p2119.max == p.min) {
												return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v79 + ".")), pos : haxeparser_HaxeParser.punion(p,p2119)});
											} else {
												throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else if(e1.expr._hx_index == 0) {
									if(e1.expr.c._hx_index == 0) {
										var p2120 = e1.pos;
										var v80 = e1.expr.c.v;
										if(p2120.max == p.min) {
											return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v80 + ".")), pos : haxeparser_HaxeParser.punion(p,p2120)});
										} else {
											throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else if(e1.expr._hx_index == 0) {
								if(e1.expr.c._hx_index == 0) {
									var p2121 = e1.pos;
									var v81 = e1.expr.c.v;
									if(p2121.max == p.min) {
										return this.exprNext({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CFloat(v81 + ".")), pos : haxeparser_HaxeParser.punion(p,p2121)});
									} else {
										throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						}
					}
				}
			}
			break;
		case 14:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e29 = this.expr();
			var _g45 = this.peek(0);
			if(_g45.tok._hx_index == 15) {
				var p2122 = _g45.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.exprNext({ expr : haxe_macro_ExprDef.EArray(e1,e29), pos : haxeparser_HaxeParser.punion(e1.pos,p2122)});
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		case 18:
			this.last = this.token.elt;
			this.token = this.token.next;
			try {
				var params = this.parseCallParams();
				var _g46 = this.peek(0);
				if(_g46.tok._hx_index == 19) {
					var p2123 = _g46.pos;
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.exprNext({ expr : haxe_macro_ExprDef.ECall(e1,params), pos : haxeparser_HaxeParser.punion(e1.pos,p2123)});
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
				if((_1 instanceof hxparse_NoMatch)) {
					var _2 = _1;
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				} else {
					throw _;
				}
			}
			break;
		case 20:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e210 = this.expr();
			var _g47 = this.peek(0);
			if(_g47.tok._hx_index == 11) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var e3 = this.expr();
				return { expr : haxe_macro_ExprDef.ETernary(e1,e210,e3), pos : haxeparser_HaxeParser.punion(e1.pos,e3.pos)};
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		default:
			var _g48 = this.peek(0);
			if(_g48.tok._hx_index == 4) {
				var p1 = _g48.pos;
				var op1 = _g48.tok.op;
				if(haxeparser_HaxeParser.isPostfix(e1,op1)) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.exprNext({ expr : haxe_macro_ExprDef.EUnop(op1,true,e1), pos : haxeparser_HaxeParser.punion(e1.pos,p1)});
				} else {
					var _g49 = this.peek(0);
					if(_g49.tok._hx_index == 16) {
						var p11 = _g49.pos;
						if(haxeparser_HaxeParser.isDollarIdent(e1)) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var eparam = this.expr();
							var _g50 = this.peek(0);
							if(_g50.tok._hx_index == 17) {
								var p2124 = _g50.pos;
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g51 = e1.expr;
								if(_g51._hx_index == 0) {
									if(_g51.c._hx_index == 3) {
										var n = _g51.c.s;
										return this.exprNext({ expr : haxe_macro_ExprDef.EMeta({ name : n, params : [], pos : e1.pos},eparam), pos : haxeparser_HaxeParser.punion(p11,p2124)});
									} else {
										throw new js__$Boot_HaxeError(false);
									}
								} else {
									throw new js__$Boot_HaxeError(false);
								}
							} else {
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							return e1;
						}
					} else {
						return e1;
					}
				}
			} else {
				var _g52 = this.peek(0);
				if(_g52.tok._hx_index == 16) {
					var p12 = _g52.pos;
					if(haxeparser_HaxeParser.isDollarIdent(e1)) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var eparam1 = this.expr();
						var _g53 = this.peek(0);
						if(_g53.tok._hx_index == 17) {
							var p2125 = _g53.pos;
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g54 = e1.expr;
							if(_g54._hx_index == 0) {
								if(_g54.c._hx_index == 3) {
									var n1 = _g54.c.s;
									return this.exprNext({ expr : haxe_macro_ExprDef.EMeta({ name : n1, params : [], pos : e1.pos},eparam1), pos : haxeparser_HaxeParser.punion(p12,p2125)});
								} else {
									throw new js__$Boot_HaxeError(false);
								}
							} else {
								throw new js__$Boot_HaxeError(false);
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						return e1;
					}
				} else {
					return e1;
				}
			}
		}
	}
	,parseGuard: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			if(_g.tok.k._hx_index == 3) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 18) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var e = this.expr();
					var _g2 = this.peek(0);
					if(_g2.tok._hx_index == 19) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return e;
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseExprOrVar: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			if(_g.tok.k._hx_index == 2) {
				var p1 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var name = this.dollarIdent();
				return { expr : haxe_macro_ExprDef.EVars([{ name : name.name, type : null, expr : null}]), pos : p1};
			} else {
				var e = this.expr();
				return e;
			}
		} else {
			var e1 = this.expr();
			return e1;
		}
	}
	,parseSwitchCases: function() {
		var cases = [];
		var def = null;
		var caseBlock = function(b,p) {
			if(b.length == 0) {
				return null;
			} else if(b.length == 1) {
				if(b[0].expr._hx_index == 12) {
					var el = b[0].expr.exprs;
					var e = b[0];
					return e;
				} else {
					return { expr : haxe_macro_ExprDef.EBlock(b), pos : p};
				}
			} else {
				return { expr : haxe_macro_ExprDef.EBlock(b), pos : p};
			}
		};
		_hx_loop1: while(true) {
			var _g = this.peek(0);
			if(_g.tok._hx_index == 0) {
				switch(_g.tok.k._hx_index) {
				case 15:
					var p1 = _g.pos;
					this.last = this.token.elt;
					this.token = this.token.next;
					var el1 = this.psep(haxeparser_TokenDef.Comma,$bind(this,this.parseExprOrVar));
					var eg = this.parseOptional($bind(this,this.parseGuard));
					var _g1 = this.peek(0);
					if(_g1.tok._hx_index == 11) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var b1 = this.block([]);
						var e1 = caseBlock(b1,p1);
						cases.push({ values : el1, guard : eg, expr : e1});
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				case 16:
					var p11 = _g.pos;
					this.last = this.token.elt;
					this.token = this.token.next;
					var _g2 = this.peek(0);
					if(_g2.tok._hx_index == 11) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var b2 = this.block([]);
						var e2 = caseBlock(b2,p11);
						if(e2 == null) {
							e2 = { expr : null, pos : p11};
						}
						if(def != null) {
							throw new js__$Boot_HaxeError(new haxeparser_ParserError(haxeparser_ParserErrorMsg.DuplicateDefault,p11));
						}
						def = e2;
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				default:
					break _hx_loop1;
				}
			} else {
				break;
			}
		}
		return { cases : cases, def : def};
	}
	,parseCatch: function() {
		var _g = this.peek(0);
		if(_g.tok._hx_index == 0) {
			if(_g.tok.k._hx_index == 21) {
				var p = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g1 = this.peek(0);
				if(_g1.tok._hx_index == 18) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var id = this.ident();
					try {
						var t = this.parseTypeHint();
						var _g2 = this.peek(0);
						if(_g2.tok._hx_index == 19) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return { name : id.name, type : t, expr : this.secureExpr()};
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} catch( _ ) {
						haxe_CallStack.lastException = _;
						var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
						if((_1 instanceof hxparse_NoMatch)) {
							var _2 = _1;
							throw new js__$Boot_HaxeError(new haxeparser_ParserError(haxeparser_ParserErrorMsg.MissingType,p));
						} else {
							throw _;
						}
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseCallParams: function() {
		var ret = [];
		try {
			var e = this.expr();
			ret.push(e);
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				return [];
			} else {
				throw _;
			}
		}
		while(true) {
			var _g = this.peek(0);
			if(_g.tok._hx_index == 13) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var e1 = this.expr();
				ret.push(e1);
			} else {
				break;
			}
		}
		return ret;
	}
	,secureExpr: function() {
		return this.expr();
	}
	,__class__: haxeparser_HaxeParser
});
var haxeparser__$HaxeParser_Reificator = function(inMacro) {
	this.curPos = null;
	this.inMacro = inMacro;
};
$hxClasses["haxeparser._HaxeParser.Reificator"] = haxeparser__$HaxeParser_Reificator;
haxeparser__$HaxeParser_Reificator.__name__ = "haxeparser._HaxeParser.Reificator";
haxeparser__$HaxeParser_Reificator.prototype = {
	curPos: null
	,inMacro: null
	,mkEnum: function(ename,name,vl,p) {
		var constr = { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent(name)), pos : p};
		if(vl.length == 0) {
			return constr;
		} else {
			return { expr : haxe_macro_ExprDef.ECall(constr,vl), pos : p};
		}
	}
	,toConst: function(c,p) {
		var _gthis = this;
		var cst = function(n,v) {
			return _gthis.mkEnum("Constant",n,[{ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CString(v)), pos : p}],p);
		};
		switch(c._hx_index) {
		case 0:
			var i = c.v;
			return cst("CInt",i);
		case 1:
			var s = c.f;
			return cst("CFloat",s);
		case 2:
			var s1 = c.s;
			return cst("CString",s1);
		case 3:
			var s2 = c.s;
			return cst("CIdent",s2);
		case 4:
			var o = c.opt;
			var r = c.r;
			return this.mkEnum("Constant","CRegexp",[{ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CString(r)), pos : p},{ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CString(o)), pos : p}],p);
		}
	}
	,toBinop: function(o,p) {
		var _gthis = this;
		var op = function(n) {
			return _gthis.mkEnum("Binop",n,[],p);
		};
		switch(o._hx_index) {
		case 0:
			return op("OpAdd");
		case 1:
			return op("OpMult");
		case 2:
			return op("OpDiv");
		case 3:
			return op("OpSub");
		case 4:
			return op("OpAssign");
		case 5:
			return op("OpEq");
		case 6:
			return op("OpNotEq");
		case 7:
			return op("OpGt");
		case 8:
			return op("OpGte");
		case 9:
			return op("OpLt");
		case 10:
			return op("OpLte");
		case 11:
			return op("OpAnd");
		case 12:
			return op("OpOr");
		case 13:
			return op("OpXor");
		case 14:
			return op("OpBoolAnd");
		case 15:
			return op("OpBoolOr");
		case 16:
			return op("OpShl");
		case 17:
			return op("OpShr");
		case 18:
			return op("OpUShr");
		case 19:
			return op("OpMod");
		case 20:
			var o1 = o.op;
			return this.mkEnum("Binop","OpAssignOp",[this.toBinop(o1,p)],p);
		case 21:
			return op("OpInterval");
		case 22:
			return op("OpArrow");
		case 23:
			return op("OpIn");
		}
	}
	,toString: function(s,p) {
		var len = s.length;
		if(len > 1 && s.charAt(0) == "$") {
			return { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent(HxOverrides.substr(s,1,null))), pos : p};
		} else {
			return { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CString(s)), pos : p};
		}
	}
	,toArray: function(f,a,p) {
		var vals = [];
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			vals.push(f(v,p));
		}
		var e = { pos : p, expr : haxe_macro_ExprDef.EArrayDecl(vals)};
		return e;
	}
	,toNull: function(p) {
		return { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("null")), pos : p};
	}
	,toOpt: function(f,v,p) {
		if(v == null) {
			return this.toNull(p);
		} else {
			return f(v,p);
		}
	}
	,toBool: function(o,p) {
		var s = o ? "true" : "false";
		return { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent(s)), pos : p};
	}
	,toObj: function(fields,p) {
		return { expr : haxe_macro_ExprDef.EObjectDecl(fields), pos : p};
	}
	,toTParam: function(t,p) {
		var n;
		var v;
		switch(t._hx_index) {
		case 0:
			var t1 = t.t;
			n = "TPType";
			v = this.toCType(t1,p);
			break;
		case 1:
			var e = t.e;
			n = "TPExpr";
			v = this.toExpr(e,p);
			break;
		}
		return this.mkEnum("TypeParam",n,[v],p);
	}
	,toTPath: function(t,p) {
		var fields = [{ field : "pack", expr : this.toArray($bind(this,this.toString),t.pack,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "name", expr : this.toString(t.name,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "params", expr : this.toArray($bind(this,this.toTParam),t.params,p), quotes : haxe_macro_QuoteStatus.Unquoted}];
		if(t.sub != null) {
			fields.push({ field : "sub", expr : this.toString(t.sub,p), quotes : haxe_macro_QuoteStatus.Unquoted});
		}
		return this.toObj(fields,p);
	}
	,toCType: function(t,p) {
		var _gthis = this;
		var ct = function(n,vl) {
			return _gthis.mkEnum("ComplexType",n,vl,p);
		};
		switch(t._hx_index) {
		case 0:
			if(t.p.pack.length == 0) {
				if(t.p.params == null) {
					var t1 = t.p;
					return ct("TPath",[this.toTPath(t1,p)]);
				} else if(t.p.params.length == 0) {
					if(t.p.sub == null) {
						var n1 = t.p.name;
						if(n1.charAt(0) == "$") {
							return this.toString(n1,p);
						} else {
							var t2 = t.p;
							return ct("TPath",[this.toTPath(t2,p)]);
						}
					} else {
						var t3 = t.p;
						return ct("TPath",[this.toTPath(t3,p)]);
					}
				} else {
					var t4 = t.p;
					return ct("TPath",[this.toTPath(t4,p)]);
				}
			} else {
				var t5 = t.p;
				return ct("TPath",[this.toTPath(t5,p)]);
			}
			break;
		case 1:
			var ret = t.ret;
			var args = t.args;
			return ct("TFunction",[this.toArray($bind(this,this.toCType),args,p),this.toCType(ret,p)]);
		case 2:
			var fields = t.fields;
			return ct("TAnonymous",[this.toArray($bind(this,this.toCField),fields,p)]);
		case 3:
			var t6 = t.t;
			return ct("TParent",[this.toCType(t6,p)]);
		case 4:
			var fields1 = t.fields;
			var tl = t.p;
			return ct("TExtend",[this.toArray($bind(this,this.toTPath),tl,p),this.toArray($bind(this,this.toCField),fields1,p)]);
		case 5:
			var t7 = t.t;
			return ct("TOptional",[this.toCType(t7,p)]);
		case 6:
			var t8 = t.t;
			var s = t.n;
			return ct("TNamed",[this.toString(s,p),this.toCType(t8,p)]);
		case 7:
			var types = t.tl;
			return ct("TIntersection",[this.toArray($bind(this,this.toCType),types,p)]);
		}
	}
	,toFun: function(f,p) {
		var _gthis = this;
		var farg = function(vv,p1) {
			var n = vv.name;
			var o = vv.opt;
			var t = vv.type;
			var e = vv.value;
			var fields = [{ field : "name", expr : _gthis.toString(n,p1), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "opt", expr : _gthis.toBool(o,p1), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "type", expr : _gthis.toOpt($bind(_gthis,_gthis.toCType),t,p1), quotes : haxe_macro_QuoteStatus.Unquoted}];
			if(e != null) {
				fields.push({ field : "value", expr : _gthis.toExpr(e,p1), quotes : haxe_macro_QuoteStatus.Unquoted});
			}
			return _gthis.toObj(fields,p1);
		};
		var fparam = null;
		fparam = function(t1,p2) {
			var fields1 = [{ field : "name", expr : _gthis.toString(t1.name,p2), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "constraints", expr : _gthis.toArray($bind(_gthis,_gthis.toCType),t1.constraints,p2), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "params", expr : _gthis.toArray(fparam,t1.params,p2), quotes : haxe_macro_QuoteStatus.Unquoted}];
			return _gthis.toObj(fields1,p2);
		};
		var fields2 = [{ field : "args", expr : this.toArray(farg,f.args,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "ret", expr : this.toOpt($bind(this,this.toCType),f.ret,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "expr", expr : this.toOpt($bind(this,this.toExpr),f.expr,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "params", expr : this.toArray(fparam,f.params,p), quotes : haxe_macro_QuoteStatus.Unquoted}];
		return this.toObj(fields2,p);
	}
	,toAccess: function(a,p) {
		var n;
		switch(a._hx_index) {
		case 0:
			n = "APublic";
			break;
		case 1:
			n = "APrivate";
			break;
		case 2:
			n = "AStatic";
			break;
		case 3:
			n = "AOverride";
			break;
		case 4:
			n = "ADynamic";
			break;
		case 5:
			n = "AInline";
			break;
		case 6:
			n = "AMacro";
			break;
		case 7:
			n = "AFinal";
			break;
		case 8:
			n = "AExtern";
			break;
		}
		return this.mkEnum("Access",n,[],p);
	}
	,toDisplaykind: function(dk,p) {
		var n;
		switch(dk._hx_index) {
		case 0:
			n = "DKCall";
			break;
		case 1:
			n = "DKDot";
			break;
		case 2:
			n = "DKStructure";
			break;
		case 3:
			n = "DKMarked";
			break;
		case 4:
			n = "DKPattern";
			break;
		}
		return this.mkEnum("DisplayKind",n,[],p);
	}
	,toCField: function(f,p) {
		var _gthis = this;
		var p2 = f.pos;
		var toFType = function(k) {
			var n;
			var vl;
			switch(k._hx_index) {
			case 0:
				var e = k.e;
				var ct = k.t;
				n = "FVar";
				vl = [_gthis.toOpt($bind(_gthis,_gthis.toCType),ct,p),_gthis.toOpt($bind(_gthis,_gthis.toExpr),e,p)];
				break;
			case 1:
				var f1 = k.f;
				n = "FFun";
				vl = [_gthis.toFun(f1,p)];
				break;
			case 2:
				var e1 = k.e;
				var t = k.t;
				var set = k.set;
				var get = k.get;
				n = "FProp";
				vl = [_gthis.toString(get,p),_gthis.toString(set,p),_gthis.toOpt($bind(_gthis,_gthis.toCType),t,p),_gthis.toOpt($bind(_gthis,_gthis.toExpr),e1,p)];
				break;
			}
			return _gthis.mkEnum("FieldType",n,vl,p);
		};
		var fields = [];
		fields.push({ field : "name", expr : this.toString(f.name,p), quotes : haxe_macro_QuoteStatus.Unquoted});
		if(f.doc != null) {
			fields.push({ field : "doc", expr : this.toString(f.doc,p), quotes : haxe_macro_QuoteStatus.Unquoted});
		}
		if(f.access != null) {
			fields.push({ field : "access", expr : this.toArray($bind(this,this.toAccess),f.access,p), quotes : haxe_macro_QuoteStatus.Unquoted});
		}
		fields.push({ field : "kind", expr : toFType(f.kind), quotes : haxe_macro_QuoteStatus.Unquoted});
		fields.push({ field : "pos", expr : this.toPos(f.pos), quotes : haxe_macro_QuoteStatus.Unquoted});
		if(f.meta != null) {
			fields.push({ field : "meta", expr : this.toMeta(f.meta,p), quotes : haxe_macro_QuoteStatus.Unquoted});
		}
		return this.toObj(fields,p);
	}
	,toMeta: function(m,p) {
		var _gthis = this;
		return this.toArray(function(me,_) {
			var fields = [{ field : "name", expr : _gthis.toString(me.name,me.pos), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "params", expr : _gthis.toExprArray(me.params,me.pos), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "pos", expr : _gthis.toPos(me.pos), quotes : haxe_macro_QuoteStatus.Unquoted}];
			return _gthis.toObj(fields,me.pos);
		},m,p);
	}
	,toPos: function(p) {
		if(this.curPos != null) {
			return this.curPos;
		}
		var file = { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CString(p.file)), pos : p};
		var pmin = { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CInt(p.min == null ? "null" : "" + p.min)), pos : p};
		var pmax = { expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CInt(p.max == null ? "null" : "" + p.max)), pos : p};
		if(this.inMacro) {
			return { expr : haxe_macro_ExprDef.EUntyped({ expr : haxe_macro_ExprDef.ECall({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("$mk_pos")), pos : p},[file,pmin,pmax]), pos : p}), pos : p};
		} else {
			return this.toObj([{ field : "file", expr : file, quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "min", expr : pmin, quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "max", expr : pmax, quotes : haxe_macro_QuoteStatus.Unquoted}],p);
		}
	}
	,toExprArray: function(a,p) {
		if(a.length > 0) {
			var _g = a[0].expr;
			if(_g._hx_index == 28) {
				var e1 = _g.e;
				var md = _g.s;
				if(md.name == "$a" && md.params.length == 0) {
					var _g1 = e1.expr;
					if(_g1._hx_index == 6) {
						var el = _g1.values;
						return this.toExprArray(el,p);
					} else {
						return e1;
					}
				}
			}
		}
		return this.toArray($bind(this,this.toExpr),a,p);
	}
	,toExpr: function(e,_) {
		var _gthis = this;
		var p = e.pos;
		var expr = function(n,vl) {
			var e1 = _gthis.mkEnum("ExprDef",n,vl,p);
			var expr1 = _gthis.toPos(p);
			return _gthis.toObj([{ field : "expr", expr : e1, quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "pos", expr : expr1, quotes : haxe_macro_QuoteStatus.Unquoted}],p);
		};
		var loop = function(e2) {
			return _gthis.toExpr(e2,e2.pos);
		};
		var _g = e.expr;
		switch(_g._hx_index) {
		case 0:
			if(_g.c._hx_index == 3) {
				var n1 = _g.c.s;
				if(n1.charAt(0) == "$" && n1.length > 1) {
					return this.toString(n1,p);
				} else {
					var c = _g.c;
					return expr("EConst",[this.toConst(c,p)]);
				}
			} else {
				var c1 = _g.c;
				return expr("EConst",[this.toConst(c1,p)]);
			}
			break;
		case 1:
			var e21 = _g.e2;
			var e11 = _g.e1;
			return expr("EArray",[loop(e11),loop(e21)]);
		case 2:
			var e22 = _g.e2;
			var e12 = _g.e1;
			var op = _g.op;
			return expr("EBinop",[this.toBinop(op,p),loop(e12),loop(e22)]);
		case 3:
			var s = _g.field;
			var e3 = _g.e;
			return expr("EField",[loop(e3),this.toString(s,p)]);
		case 4:
			var e4 = _g.e;
			return expr("EParenthesis",[loop(e4)]);
		case 5:
			var fl = _g.fields;
			return expr("EObjectDecl",[this.toArray(function(f,p2) {
				var tmp = { field : "field", expr : _gthis.toString(f.field,p), quotes : haxe_macro_QuoteStatus.Unquoted};
				var tmp1 = loop(f.expr);
				return _gthis.toObj([tmp,{ field : "expr", expr : tmp1, quotes : haxe_macro_QuoteStatus.Unquoted}],p2);
			},fl,p)]);
		case 6:
			var el = _g.values;
			return expr("EArrayDecl",[this.toExprArray(el,p)]);
		case 7:
			var el1 = _g.params;
			var e5 = _g.e;
			return expr("ECall",[loop(e5),this.toExprArray(el1,p)]);
		case 8:
			var el2 = _g.params;
			var t = _g.t;
			return expr("ENew",[this.toTPath(t,p),this.toExprArray(el2,p)]);
		case 9:
			var e6 = _g.e;
			var isPostfix = _g.postFix;
			var op1 = _g.op;
			var ops;
			switch(op1._hx_index) {
			case 0:
				ops = "OpIncrement";
				break;
			case 1:
				ops = "OpDecrement";
				break;
			case 2:
				ops = "OpNot";
				break;
			case 3:
				ops = "OpNeg";
				break;
			case 4:
				ops = "OpNegBits";
				break;
			}
			var op2 = this.mkEnum("Unop",ops,[],p);
			return expr("EUnop",[op2,this.toBool(isPostfix,p),loop(e6)]);
		case 10:
			var vl1 = _g.vars;
			return expr("EVars",[this.toArray(function(vv,p1) {
				var name = vv.name;
				var type = vv.type;
				var expr2 = vv.expr;
				var fields = [{ field : "name", expr : _gthis.toString(name,p1), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "type", expr : _gthis.toOpt($bind(_gthis,_gthis.toCType),type,p1), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "expr", expr : _gthis.toOpt($bind(_gthis,_gthis.toExpr),expr2,p1), quotes : haxe_macro_QuoteStatus.Unquoted}];
				return _gthis.toObj(fields,p1);
			},vl1,p)]);
		case 11:
			var f1 = _g.f;
			var name1 = _g.name;
			return expr("EFunction",[this.toOpt($bind(this,this.toString),name1,p),this.toFun(f1,p)]);
		case 12:
			var el3 = _g.exprs;
			return expr("EBlock",[this.toExprArray(el3,p)]);
		case 13:
			var e23 = _g.expr;
			var e13 = _g.it;
			return expr("EFor",[loop(e13),loop(e23)]);
		case 14:
			var eelse = _g.eelse;
			var e24 = _g.eif;
			var e14 = _g.econd;
			return expr("EIf",[loop(e14),loop(e24),this.toOpt($bind(this,this.toExpr),eelse,p)]);
		case 15:
			var normalWhile = _g.normalWhile;
			var e25 = _g.e;
			var e15 = _g.econd;
			return expr("EWhile",[loop(e15),loop(e25),this.toBool(normalWhile,p)]);
		case 16:
			var def = _g.edef;
			var cases = _g.cases;
			var e16 = _g.e;
			var scase = function(swc,p3) {
				var el4 = swc.values;
				var eg = swc.guard;
				var e7 = swc.expr;
				var scase1 = { field : "values", expr : _gthis.toExprArray(el4,p3), quotes : haxe_macro_QuoteStatus.Unquoted};
				var scase2 = { field : "guard", expr : _gthis.toOpt($bind(_gthis,_gthis.toExpr),eg,p3), quotes : haxe_macro_QuoteStatus.Unquoted};
				var scase3 = _gthis.toOpt($bind(_gthis,_gthis.toExpr),e7,p3);
				return _gthis.toObj([scase1,scase2,{ field : "expr", expr : scase3, quotes : haxe_macro_QuoteStatus.Unquoted}],p3);
			};
			return expr("ESwitch",[loop(e16),this.toArray(scase,cases,p),this.toOpt(function(def2,p4) {
				return _gthis.toOpt(function(def3,p5) {
					return _gthis.toExpr(def3,p5);
				},def2,p4);
			},def,p)]);
		case 17:
			var catches = _g.catches;
			var e17 = _g.e;
			var scatch = function(c2,p6) {
				var n2 = c2.name;
				var t1 = c2.type;
				var e8 = c2.expr;
				var scatch1 = { field : "name", expr : _gthis.toString(n2,p6), quotes : haxe_macro_QuoteStatus.Unquoted};
				var scatch2 = { field : "type", expr : _gthis.toCType(t1,p6), quotes : haxe_macro_QuoteStatus.Unquoted};
				var scatch3 = loop(e8);
				return _gthis.toObj([scatch1,scatch2,{ field : "expr", expr : scatch3, quotes : haxe_macro_QuoteStatus.Unquoted}],p6);
			};
			return expr("ETry",[loop(e17),this.toArray(scatch,catches,p)]);
		case 18:
			var eo = _g.e;
			return expr("EReturn",[this.toOpt($bind(this,this.toExpr),eo,p)]);
		case 19:
			return expr("EBreak",[]);
		case 20:
			return expr("EContinue",[]);
		case 21:
			var e9 = _g.e;
			return expr("EUntyped",[loop(e9)]);
		case 22:
			var e10 = _g.e;
			return expr("EThrow",[loop(e10)]);
		case 23:
			var ct = _g.t;
			var e18 = _g.e;
			return expr("ECast",[loop(e18),this.toOpt($bind(this,this.toCType),ct,p)]);
		case 24:
			var dk = _g.displayKind;
			var e19 = _g.e;
			return expr("EDisplay",[loop(e19),this.toDisplaykind(dk,p)]);
		case 25:
			var t2 = _g.t;
			return expr("EDisplayNew",[this.toTPath(t2,p)]);
		case 26:
			var e31 = _g.eelse;
			var e26 = _g.eif;
			var e110 = _g.econd;
			return expr("ETernary",[loop(e110),loop(e26),loop(e31)]);
		case 27:
			var ct1 = _g.t;
			var e111 = _g.e;
			return expr("ECheckType",[loop(e111),this.toCType(ct1,p)]);
		case 28:
			var e112 = _g.e;
			var md = _g.s;
			var _g1 = md.name;
			switch(_g1) {
			case "$a":
				var _g2 = e112.expr;
				if(_g2._hx_index == 6) {
					var el5 = _g2.values;
					return expr("EArrayDecl",[this.toExprArray(el5,p)]);
				} else {
					return expr("EArrayDecl",[e112]);
				}
				break;
			case "$b":
				return expr("EBlock",[e112]);
			case "$":case "$e":
				return e112;
			case "$i":
				return expr("EConst",[this.mkEnum("Constant","CIdent",[e112],e112.pos)]);
			case "$p":
				return { expr : haxe_macro_ExprDef.ECall({ expr : haxe_macro_ExprDef.EField({ expr : haxe_macro_ExprDef.EField({ expr : haxe_macro_ExprDef.EField({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("haxe")), pos : p},"macro"), pos : p},"ExprTools"), pos : p},"toFieldExpr"), pos : p},[e]), pos : p};
			case "$v":
				return { expr : haxe_macro_ExprDef.ECall({ expr : haxe_macro_ExprDef.EField({ expr : haxe_macro_ExprDef.EField({ expr : haxe_macro_ExprDef.EField({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("haxe")), pos : p},"macro"), pos : p},"Context"), pos : p},"makeExpr"), pos : p},[e,this.toPos(e.pos)]), pos : p};
			case ":pos":
				if(md.params.length == 1) {
					var old = this.curPos;
					this.curPos = md.params[0];
					var e20 = loop(e112);
					this.curPos = old;
					return e20;
				} else {
					return expr("EMeta",[this.toObj([{ field : "name", expr : this.toString(md.name,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "params", expr : this.toExprArray(md.params,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "pos", expr : this.toPos(p), quotes : haxe_macro_QuoteStatus.Unquoted}],p),loop(e112)]);
				}
				break;
			default:
				return expr("EMeta",[this.toObj([{ field : "name", expr : this.toString(md.name,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "params", expr : this.toExprArray(md.params,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "pos", expr : this.toPos(p), quotes : haxe_macro_QuoteStatus.Unquoted}],p),loop(e112)]);
			}
			break;
		}
	}
	,toTParamDecl: function(t,p) {
		var params = [];
		var _g = 0;
		var _g1 = t.params;
		while(_g < _g1.length) {
			var tp = _g1[_g];
			++_g;
			params.push(this.toTParamDecl(tp,p));
		}
		var constraints = [];
		var _g2 = 0;
		var _g11 = t.constraints;
		while(_g2 < _g11.length) {
			var c = _g11[_g2];
			++_g2;
			constraints.push(this.toCType(c,p));
		}
		return this.toObj([{ field : "name", expr : this.toString(t.name,p), quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "params", expr : { expr : haxe_macro_ExprDef.EArrayDecl(params), pos : p}, quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "constraints", expr : { expr : haxe_macro_ExprDef.EArrayDecl(constraints), pos : p}, quotes : haxe_macro_QuoteStatus.Unquoted}],p);
	}
	,toTypeDef: function(td) {
		var p = td.pos;
		var _g = td.decl;
		if(_g._hx_index == 0) {
			var d = _g.d;
			var ext = null;
			var impl = [];
			var interf = false;
			var _g1 = 0;
			var _g11 = d.flags;
			while(_g1 < _g11.length) {
				var f = _g11[_g1];
				++_g1;
				switch(f._hx_index) {
				case 0:
					interf = true;
					break;
				case 1:case 2:
					break;
				case 3:
					var t = f.t;
					ext = this.toTPath(t,td.pos);
					break;
				case 4:
					var i = f.t;
					impl.push(this.toTPath(i,td.pos));
					break;
				}
			}
			var params = [];
			var _g2 = 0;
			var _g12 = d.params;
			while(_g2 < _g12.length) {
				var par = _g12[_g2];
				++_g2;
				params.push(this.toTParamDecl(par,p));
			}
			var isExtern = false;
			var _g3 = 0;
			var _g13 = d.flags;
			while(_g3 < _g13.length) {
				var f1 = _g13[_g3];
				++_g3;
				if(f1._hx_index == 1) {
					isExtern = true;
					break;
				}
			}
			var kindParams = [];
			if(ext == null) {
				kindParams.push({ expr : haxe_macro_ExprDef.EConst(haxe_macro_Constant.CIdent("null")), pos : p});
			} else {
				kindParams.push(ext);
			}
			kindParams.push({ expr : haxe_macro_ExprDef.EArrayDecl(impl), pos : p});
			kindParams.push(this.toBool(interf,p));
			var fields = [];
			var _g4 = 0;
			var _g14 = d.data;
			while(_g4 < _g14.length) {
				var d1 = _g14[_g4];
				++_g4;
				fields.push(this.toCField(d1,p));
			}
			var tmp = { field : "name", expr : this.toString(d.name,p), quotes : haxe_macro_QuoteStatus.Unquoted};
			var tmp1 = { field : "pos", expr : this.toPos(p), quotes : haxe_macro_QuoteStatus.Unquoted};
			var tmp2 = { field : "meta", expr : this.toMeta(d.meta,p), quotes : haxe_macro_QuoteStatus.Unquoted};
			var tmp3 = { field : "isExtern", expr : this.toBool(isExtern,p), quotes : haxe_macro_QuoteStatus.Unquoted};
			var tmp4 = this.mkEnum("TypeDefKind","TDClass",kindParams,p);
			return this.toObj([{ field : "pack", expr : { expr : haxe_macro_ExprDef.EArrayDecl([]), pos : p}, quotes : haxe_macro_QuoteStatus.Unquoted},tmp,tmp1,tmp2,{ field : "params", expr : { expr : haxe_macro_ExprDef.EArrayDecl(params), pos : p}, quotes : haxe_macro_QuoteStatus.Unquoted},tmp3,{ field : "kind", expr : tmp4, quotes : haxe_macro_QuoteStatus.Unquoted},{ field : "fields", expr : { expr : haxe_macro_ExprDef.EArrayDecl(fields), pos : p}, quotes : haxe_macro_QuoteStatus.Unquoted}],td.pos);
		} else {
			throw new js__$Boot_HaxeError("Invalid type for reification");
		}
	}
	,__class__: haxeparser__$HaxeParser_Reificator
};
var hxargs_Args = function() { };
$hxClasses["hxargs.Args"] = hxargs_Args;
hxargs_Args.__name__ = "hxargs.Args";
var hxparse__$LexEngine_Transition = function(chars) {
	this.chars = chars;
};
$hxClasses["hxparse._LexEngine.Transition"] = hxparse__$LexEngine_Transition;
hxparse__$LexEngine_Transition.__name__ = "hxparse._LexEngine.Transition";
hxparse__$LexEngine_Transition.prototype = {
	chars: null
	,toString: function() {
		return Std.string(this.chars);
	}
	,__class__: hxparse__$LexEngine_Transition
};
var hxparse_LexerTokenSource = function(lexer,ruleset) {
	this.lexer = lexer;
	this.ruleset = ruleset;
};
$hxClasses["hxparse.LexerTokenSource"] = hxparse_LexerTokenSource;
hxparse_LexerTokenSource.__name__ = "hxparse.LexerTokenSource";
hxparse_LexerTokenSource.prototype = {
	lexer: null
	,ruleset: null
	,token: function() {
		return this.lexer.token(this.ruleset);
	}
	,curPos: function() {
		var _this = this.lexer;
		return new hxparse_Position(_this.source,_this.pos - _this.current.length,_this.pos);
	}
	,__class__: hxparse_LexerTokenSource
};
var hxparse_ParserError = function(pos) {
	this.pos = pos;
};
$hxClasses["hxparse.ParserError"] = hxparse_ParserError;
hxparse_ParserError.__name__ = "hxparse.ParserError";
hxparse_ParserError.prototype = {
	pos: null
	,toString: function() {
		return "Parser error";
	}
	,__class__: hxparse_ParserError
};
var hxparse_NoMatch = function(pos,token) {
	hxparse_ParserError.call(this,pos);
	this.token = token;
};
$hxClasses["hxparse.NoMatch"] = hxparse_NoMatch;
hxparse_NoMatch.__name__ = "hxparse.NoMatch";
hxparse_NoMatch.__super__ = hxparse_ParserError;
hxparse_NoMatch.prototype = $extend(hxparse_ParserError.prototype,{
	token: null
	,toString: function() {
		return "No match: " + Std.string(this.token);
	}
	,__class__: hxparse_NoMatch
});
var hxparse_Parser = function(stream) {
	this.stream = stream;
};
$hxClasses["hxparse.Parser"] = hxparse_Parser;
hxparse_Parser.__name__ = "hxparse.Parser";
hxparse_Parser.prototype = {
	last: null
	,stream: null
	,token: null
	,peek: function(n) {
		if(this.token == null) {
			this.token = new haxe_ds_GenericCell(this.stream.token(),null);
			--n;
		}
		var tok = this.token;
		while(n > 0) {
			if(tok.next == null) {
				tok.next = new haxe_ds_GenericCell(this.stream.token(),null);
			}
			tok = tok.next;
			--n;
		}
		return tok.elt;
	}
	,junk: function() {
		this.last = this.token.elt;
		this.token = this.token.next;
	}
	,curPos: function() {
		return this.stream.curPos();
	}
	,parseSeparated: function(separatorFunc,f) {
		var acc = [];
		while(true) {
			try {
				acc.push(f());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				if((e1 instanceof hxparse_NoMatch)) {
					var e2 = e1;
					break;
				} else {
					throw e;
				}
			}
			if(separatorFunc(this.peek(0))) {
				this.last = this.token.elt;
				this.token = this.token.next;
			} else {
				break;
			}
		}
		return acc;
	}
	,parseOptional: function(f) {
		try {
			return f();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof hxparse_NoMatch)) {
				var e2 = e1;
				return null;
			} else {
				throw e;
			}
		}
	}
	,parseRepeat: function(f) {
		var acc = [];
		while(true) try {
			acc.push(f());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if((e1 instanceof hxparse_NoMatch)) {
				var e2 = e1;
				return acc;
			} else {
				throw e;
			}
		}
	}
	,parseExpect: function(f) {
		try {
			return f();
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
			if((_1 instanceof hxparse_NoMatch)) {
				var _2 = _1;
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			} else {
				throw _;
			}
		}
	}
	,noMatch: function() {
		return new hxparse_NoMatch(this.stream.curPos(),this.peek(0));
	}
	,unexpected: function() {
		throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
	}
	,__class__: hxparse_Parser
};
var hxparse_RuleBuilderImpl = function() { };
$hxClasses["hxparse.RuleBuilderImpl"] = hxparse_RuleBuilderImpl;
hxparse_RuleBuilderImpl.__name__ = "hxparse.RuleBuilderImpl";
var hxparse_State = function() {
	this.finalId = -1;
	var this1 = new Array(256);
	this.trans = this1;
};
$hxClasses["hxparse.State"] = hxparse_State;
hxparse_State.__name__ = "hxparse.State";
hxparse_State.prototype = {
	trans: null
	,finalId: null
	,__class__: hxparse_State
};
var hxparse_Unexpected = function(token,pos) {
	hxparse_ParserError.call(this,pos);
	this.token = token;
};
$hxClasses["hxparse.Unexpected"] = hxparse_Unexpected;
hxparse_Unexpected.__name__ = "hxparse.Unexpected";
hxparse_Unexpected.__super__ = hxparse_ParserError;
hxparse_Unexpected.prototype = $extend(hxparse_ParserError.prototype,{
	token: null
	,toString: function() {
		return "Unexpected " + Std.string(this.token);
	}
	,__class__: hxparse_Unexpected
});
var hxparse_UnexpectedChar = function(char,pos) {
	hxparse_ParserError.call(this,pos);
	this.char = char;
};
$hxClasses["hxparse.UnexpectedChar"] = hxparse_UnexpectedChar;
hxparse_UnexpectedChar.__name__ = "hxparse.UnexpectedChar";
hxparse_UnexpectedChar.__super__ = hxparse_ParserError;
hxparse_UnexpectedChar.prototype = $extend(hxparse_ParserError.prototype,{
	char: null
	,toString: function() {
		return "Unexpected " + this.char;
	}
	,__class__: hxparse_UnexpectedChar
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer__$Buffer_Helper = function() { };
$hxClasses["js.node.buffer._Buffer.Helper"] = js_node_buffer__$Buffer_Helper;
js_node_buffer__$Buffer_Helper.__name__ = "js.node.buffer._Buffer.Helper";
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var sys_FileSystem = function() { };
$hxClasses["sys.FileSystem"] = sys_FileSystem;
sys_FileSystem.__name__ = "sys.FileSystem";
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _ ) {
		haxe_CallStack.lastException = _;
		var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
		return false;
	}
};
sys_FileSystem.isDirectory = function(path) {
	try {
		return js_node_Fs.statSync(path).isDirectory();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if(e1.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
				throw e1;
			}
			if(!stat.isDirectory()) {
				throw e1;
			}
		}
	}
};
var sys_io_File = function() { };
$hxClasses["sys.io.File"] = sys_io_File;
sys_io_File.__name__ = "sys.io.File";
sys_io_File.write = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	return null;
};
var tokentree_TokenStreamMode = $hxEnums["tokentree.TokenStreamMode"] = { __ename__ : true, __constructs__ : ["STRICT","RELAXED"]
	,STRICT: {_hx_index:0,__enum__:"tokentree.TokenStreamMode",toString:$estr}
	,RELAXED: {_hx_index:1,__enum__:"tokentree.TokenStreamMode",toString:$estr}
};
var tokentree_TokenStream = function(tokens,bytes) {
	this.tokens = tokens;
	this.bytes = bytes;
	this.current = 0;
};
$hxClasses["tokentree.TokenStream"] = tokentree_TokenStream;
tokentree_TokenStream.__name__ = "tokentree.TokenStream";
tokentree_TokenStream.prototype = {
	tokens: null
	,current: null
	,bytes: null
	,hasMore: function() {
		return this.current < this.tokens.length;
	}
	,consumeToken: function() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			var _g = tokentree_TokenStream.MODE;
			switch(_g._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("no more tokens");
			case 1:
				return this.createDummyToken(haxeparser_TokenDef.CommentLine("dummy token"));
			}
		}
		var token = this.tokens[this.current];
		this.current++;
		return new tokentree_TokenTree(token.tok,token.pos,this.current - 1);
	}
	,consumeConstIdent: function() {
		var _g = this.token();
		switch(_g._hx_index) {
		case 1:
			if(_g.c._hx_index == 3) {
				return this.consumeToken();
			} else {
				var _g1 = tokentree_TokenStream.MODE;
				switch(_g1._hx_index) {
				case 0:
					var s = "bad token " + Std.string(this.token()) + " != Const(CIdent(_))";
					throw new js__$Boot_HaxeError(this.formatCurrentPos() + ": " + s);
				case 1:
					return this.createDummyToken(haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent("autoInsert")));
				}
			}
			break;
		case 3:
			return this.consumeToken();
		default:
			var _g2 = tokentree_TokenStream.MODE;
			switch(_g2._hx_index) {
			case 0:
				var s1 = "bad token " + Std.string(this.token()) + " != Const(CIdent(_))";
				throw new js__$Boot_HaxeError(this.formatCurrentPos() + ": " + s1);
			case 1:
				return this.createDummyToken(haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent("autoInsert")));
			}
		}
	}
	,consumeConst: function() {
		var _g = this.token();
		if(_g._hx_index == 1) {
			return this.consumeToken();
		} else {
			var _g1 = tokentree_TokenStream.MODE;
			switch(_g1._hx_index) {
			case 0:
				var s = "bad token " + Std.string(this.token()) + " != Const(_)";
				throw new js__$Boot_HaxeError(this.formatCurrentPos() + ": " + s);
			case 1:
				return this.createDummyToken(haxeparser_TokenDef.Const(haxe_macro_Constant.CString("autoInsert")));
			}
		}
	}
	,consumeTokenDef: function(tokenDef) {
		if(this.is(tokenDef)) {
			return this.consumeToken();
		}
		var _g = tokentree_TokenStream.MODE;
		switch(_g._hx_index) {
		case 0:
			var s = "bad token " + Std.string(this.token()) + " != " + Std.string(tokenDef);
			throw new js__$Boot_HaxeError(this.formatCurrentPos() + ": " + s);
		case 1:
			return this.createDummyToken(tokenDef);
		}
	}
	,error: function(s) {
		throw new js__$Boot_HaxeError(this.formatCurrentPos() + ": " + s);
	}
	,formatCurrentPos: function() {
		var pos = this.tokens[this.current].pos;
		return new hxparse_Position(pos.file,pos.min,pos.max).format(this.bytes);
	}
	,is: function(tokenDef) {
		if(this.current < 0 || this.current >= this.tokens.length) {
			return false;
		}
		var token = this.tokens[this.current];
		return Type.enumEq(tokenDef,token.tok);
	}
	,isSharp: function() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			return false;
		}
		var token = this.tokens[this.current];
		var _g = token.tok;
		if(_g._hx_index == 2) {
			return true;
		} else {
			return false;
		}
	}
	,isTypedParam: function() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			return false;
		}
		var index = this.current + 1;
		var token = this.tokens[this.current];
		var _g = token.tok;
		if(_g._hx_index == 5) {
			if(_g.op._hx_index != 9) {
				return false;
			}
		} else {
			return false;
		}
		while(true) {
			token = this.tokens[index++];
			var _g1 = token.tok;
			switch(_g1._hx_index) {
			case 0:
				break;
			case 1:
				if(_g1.c._hx_index != 3) {
					return false;
				}
				break;
			case 3:
				break;
			case 5:
				switch(_g1.op._hx_index) {
				case 7:
					return true;
				case 9:
					break;
				default:
					return false;
				}
				break;
			case 10:
				break;
			case 11:
				break;
			case 13:
				break;
			default:
				return false;
			}
		}
	}
	,token: function() {
		if(this.current < 0 || this.current >= this.tokens.length) {
			var _g = tokentree_TokenStream.MODE;
			switch(_g._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("no more tokens");
			case 1:
				return haxeparser_TokenDef.CommentLine("auto insert");
			}
		}
		return this.tokens[this.current].tok;
	}
	,rewind: function() {
		if(this.current <= 0) {
			return;
		}
		this.current--;
	}
	,currentPos: function() {
		return this.current;
	}
	,rewindTo: function(pos) {
		this.current = pos;
	}
	,consumeOpGt: function() {
		var tok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
		var _g = this.token();
		if(_g._hx_index == 5) {
			switch(_g.op._hx_index) {
			case 4:
				var assignTok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
				return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGte),{ file : tok.pos.file, min : tok.pos.min, max : assignTok.pos.max},tok.index);
			case 7:
				return this.consumeOpShr(tok);
			default:
				return tok;
			}
		} else {
			return tok;
		}
	}
	,consumeOpShr: function(parent) {
		var tok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
		var _g = this.token();
		if(_g._hx_index == 5) {
			switch(_g.op._hx_index) {
			case 4:
				var assignTok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
				return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShr)),{ file : parent.pos.file, min : parent.pos.min, max : assignTok.pos.max},parent.index);
			case 7:
				var innerGt = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
				if(this.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
					var assignTok1 = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
					return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpUShr)),{ file : parent.pos.file, min : parent.pos.min, max : assignTok1.pos.max},parent.index);
				}
				return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpUShr),{ file : parent.pos.file, min : parent.pos.min, max : innerGt.pos.max},parent.index);
			default:
				return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShr),{ file : parent.pos.file, min : parent.pos.min, max : tok.pos.max},parent.index);
			}
		} else {
			return new tokentree_TokenTree(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShr),{ file : parent.pos.file, min : parent.pos.min, max : tok.pos.max},parent.index);
		}
	}
	,consumeOpSub: function() {
		var tok = this.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpSub));
		var _g = this.token();
		if(_g._hx_index == 1) {
			switch(_g.c._hx_index) {
			case 0:case 1:
				break;
			default:
				return new tokentree_TokenTree(tok.tok,tok.pos,tok.index);
			}
		} else {
			return new tokentree_TokenTree(tok.tok,tok.pos,tok.index);
		}
		var previous = this.current - 2;
		if(previous < 0) {
			throw new js__$Boot_HaxeError("no more tokens");
		}
		var prevTok = this.tokens[previous];
		var _g1 = prevTok.tok;
		switch(_g1._hx_index) {
		case 0:
			switch(_g1.k._hx_index) {
			case 3:case 4:case 5:case 6:case 7:case 10:case 15:case 29:
				break;
			default:
				return new tokentree_TokenTree(tok.tok,tok.pos,tok.index);
			}
			break;
		case 4:case 5:case 8:case 11:case 13:case 14:case 18:case 20:
			break;
		default:
			return new tokentree_TokenTree(tok.tok,tok.pos,tok.index);
		}
		var _g2 = this.token();
		if(_g2._hx_index == 1) {
			switch(_g2.c._hx_index) {
			case 0:
				var n = _g2.c.v;
				var $const = this.consumeConst();
				return new tokentree_TokenTree(haxeparser_TokenDef.Const(haxe_macro_Constant.CInt("-" + n)),{ file : tok.pos.file, min : tok.pos.min, max : $const.pos.max},tok.index);
			case 1:
				var n1 = _g2.c.f;
				var const1 = this.consumeConst();
				return new tokentree_TokenTree(haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat("-" + n1)),{ file : tok.pos.file, min : tok.pos.min, max : const1.pos.max},tok.index);
			default:
				throw new js__$Boot_HaxeError("no more tokens");
			}
		} else {
			throw new js__$Boot_HaxeError("no more tokens");
		}
	}
	,getCurrentPos: function() {
		return this.current;
	}
	,createDummyToken: function(tokDef) {
		var pos = null;
		if(this.current < 0 || this.current >= this.tokens.length) {
			pos = this.tokens[this.tokens.length - 1].pos;
			pos.min = pos.max;
		} else {
			pos = this.tokens[this.current].pos;
			pos.max = pos.min;
		}
		return new tokentree_TokenTree(tokDef,pos,-1,true);
	}
	,__class__: tokentree_TokenStream
};
var tokentree_TokenStreamProgress = function(stream) {
	this.stream = stream;
	this.pos = -1;
};
$hxClasses["tokentree.TokenStreamProgress"] = tokentree_TokenStreamProgress;
tokentree_TokenStreamProgress.__name__ = "tokentree.TokenStreamProgress";
tokentree_TokenStreamProgress.prototype = {
	stream: null
	,pos: null
	,streamHasChanged: function() {
		if(this.pos == -1) {
			this.pos = this.stream.getCurrentPos();
			return true;
		}
		var oldPos = this.pos;
		this.pos = this.stream.getCurrentPos();
		return this.pos != oldPos;
	}
	,__class__: tokentree_TokenStreamProgress
};
var tokentree_TokenTree = function(tok,pos,index,inserted) {
	if(inserted == null) {
		inserted = false;
	}
	haxeparser_Token.call(this,tok,pos);
	this.index = index;
	this.inserted = inserted;
};
$hxClasses["tokentree.TokenTree"] = tokentree_TokenTree;
tokentree_TokenTree.__name__ = "tokentree.TokenTree";
tokentree_TokenTree.__super__ = haxeparser_Token;
tokentree_TokenTree.prototype = $extend(haxeparser_Token.prototype,{
	parent: null
	,previousSibling: null
	,nextSibling: null
	,children: null
	,index: null
	,inserted: null
	,is: function(tokenDef) {
		if(this.tok == null) {
			return false;
		}
		return Type.enumEq(tokenDef,this.tok);
	}
	,isComment: function() {
		if(this.tok == null) {
			return false;
		}
		var _g = this.tok;
		switch(_g._hx_index) {
		case 6:case 7:
			return true;
		default:
			return false;
		}
	}
	,addChild: function(child) {
		if(this.children == null) {
			this.children = [];
		}
		if(this.children.length > 0) {
			child.previousSibling = this.children[this.children.length - 1];
			this.children[this.children.length - 1].nextSibling = child;
		}
		this.children.push(child);
		child.parent = this;
	}
	,hasChildren: function() {
		if(this.children == null) {
			return false;
		}
		return this.children.length > 0;
	}
	,getFirstChild: function() {
		if(!this.hasChildren()) {
			return null;
		}
		return this.children[0];
	}
	,getLastChild: function() {
		if(!this.hasChildren()) {
			return null;
		}
		return this.children[this.children.length - 1];
	}
	,getPos: function() {
		if(this.children == null || this.children.length <= 0) {
			return this.pos;
		}
		var fullPos = { file : this.pos.file, min : this.pos.min, max : this.pos.max};
		var childPos;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			childPos = child.getPos();
			if(childPos.min < this.pos.min) {
				fullPos.min = childPos.min;
			}
			if(childPos.max > this.pos.max) {
				fullPos.max = childPos.max;
			}
		}
		return fullPos;
	}
	,filter: function(searchFor,mode,maxLevel) {
		if(maxLevel == null) {
			maxLevel = 9999;
		}
		return this.filterCallback(function(token,depth) {
			if(depth > maxLevel) {
				return tokentree_FilterResult.SKIP_SUBTREE;
			}
			if(token.matchesAny(searchFor)) {
				if(mode == tokentree_TokenFilterMode.ALL) {
					return tokentree_FilterResult.FOUND_GO_DEEPER;
				}
				return tokentree_FilterResult.FOUND_SKIP_SUBTREE;
			} else {
				return tokentree_FilterResult.GO_DEEPER;
			}
		});
	}
	,filterCallback: function(callback,depth) {
		if(depth == null) {
			depth = 0;
		}
		var results = [];
		if(this.tok != null) {
			var _g = callback(this,depth);
			switch(_g._hx_index) {
			case 0:
				return [this];
			case 1:
				results.push(this);
				break;
			case 2:
				return [];
			case 3:
				break;
			}
		}
		if(this.children == null) {
			return results;
		}
		var _g1 = 0;
		var _g11 = this.children;
		while(_g1 < _g11.length) {
			var child = _g11[_g1];
			++_g1;
			var _g2 = child.tok;
			results = _g2._hx_index == 2 ? results.concat(child.filterCallback(callback,depth)) : results.concat(child.filterCallback(callback,depth + 1));
		}
		return results;
	}
	,matchesAny: function(searchFor) {
		if(searchFor == null || this.tok == null) {
			return false;
		}
		var _g = 0;
		while(_g < searchFor.length) {
			var search = searchFor[_g];
			++_g;
			if(Type.enumEq(this.tok,search)) {
				return true;
			}
		}
		return false;
	}
	,printTokenTree: function(prefix) {
		if(prefix == null) {
			prefix = "";
		}
		var buf_b = "";
		var tokString = "" + Std.string(this.tok);
		if(this.inserted) {
			tokString = "*** " + tokString + " ***";
		}
		if(this.tok != null) {
			buf_b += Std.string("" + prefix + tokString + "\t\t\t\t" + Std.string(this.getPos()));
		}
		if(this.children == null) {
			return buf_b;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			buf_b += Std.string("\n" + prefix + child.printTokenTree(prefix + "  "));
		}
		return buf_b;
	}
	,__class__: tokentree_TokenTree
});
var tokentree_TokenFilterMode = $hxEnums["tokentree.TokenFilterMode"] = { __ename__ : true, __constructs__ : ["ALL","FIRST"]
	,ALL: {_hx_index:0,__enum__:"tokentree.TokenFilterMode",toString:$estr}
	,FIRST: {_hx_index:1,__enum__:"tokentree.TokenFilterMode",toString:$estr}
};
var tokentree_FilterResult = $hxEnums["tokentree.FilterResult"] = { __ename__ : true, __constructs__ : ["FOUND_SKIP_SUBTREE","FOUND_GO_DEEPER","SKIP_SUBTREE","GO_DEEPER"]
	,FOUND_SKIP_SUBTREE: {_hx_index:0,__enum__:"tokentree.FilterResult",toString:$estr}
	,FOUND_GO_DEEPER: {_hx_index:1,__enum__:"tokentree.FilterResult",toString:$estr}
	,SKIP_SUBTREE: {_hx_index:2,__enum__:"tokentree.FilterResult",toString:$estr}
	,GO_DEEPER: {_hx_index:3,__enum__:"tokentree.FilterResult",toString:$estr}
};
var tokentree_TokenTreeAccessHelper = function(tok) {
	this.token = tok;
};
$hxClasses["tokentree.TokenTreeAccessHelper"] = tokentree_TokenTreeAccessHelper;
tokentree_TokenTreeAccessHelper.__name__ = "tokentree.TokenTreeAccessHelper";
tokentree_TokenTreeAccessHelper.access = function(tok) {
	return new tokentree_TokenTreeAccessHelper(tok);
};
tokentree_TokenTreeAccessHelper.prototype = {
	token: null
	,firstChild: function() {
		if(this.token == null) {
			return this;
		}
		return new tokentree_TokenTreeAccessHelper(this.token.getFirstChild());
	}
	,lastChild: function() {
		if(this.token == null) {
			return this;
		}
		return new tokentree_TokenTreeAccessHelper(this.token.getLastChild());
	}
	,firstOf: function(tokenDef) {
		if(this.token == null) {
			return this;
		}
		if(this.token.children == null) {
			return new tokentree_TokenTreeAccessHelper(null);
		}
		var _g = 0;
		var _g1 = this.token.children;
		while(_g < _g1.length) {
			var tok = _g1[_g];
			++_g;
			if(tok.is(tokenDef)) {
				return new tokentree_TokenTreeAccessHelper(tok);
			}
		}
		return new tokentree_TokenTreeAccessHelper(null);
	}
	,lastOf: function(tokenDef) {
		if(this.token == null) {
			return this;
		}
		if(this.token.children == null) {
			return new tokentree_TokenTreeAccessHelper(null);
		}
		var found = null;
		var _g = 0;
		var _g1 = this.token.children;
		while(_g < _g1.length) {
			var tok = _g1[_g];
			++_g;
			if(tok.is(tokenDef)) {
				found = tok;
			}
		}
		return new tokentree_TokenTreeAccessHelper(found);
	}
	,child: function(index) {
		if(this.token == null) {
			return this;
		}
		if(this.token.children == null) {
			return new tokentree_TokenTreeAccessHelper(null);
		}
		if(this.token.children.length <= index) {
			return new tokentree_TokenTreeAccessHelper(null);
		}
		return new tokentree_TokenTreeAccessHelper(this.token.children[index]);
	}
	,is: function(tokenDef) {
		if(this.token == null) {
			return this;
		}
		if(this.token.is(tokenDef)) {
			return this;
		}
		return new tokentree_TokenTreeAccessHelper(null);
	}
	,__class__: tokentree_TokenTreeAccessHelper
};
var tokentree_TokenTreeBuilder = function() { };
$hxClasses["tokentree.TokenTreeBuilder"] = tokentree_TokenTreeBuilder;
tokentree_TokenTreeBuilder.__name__ = "tokentree.TokenTreeBuilder";
tokentree_TokenTreeBuilder.buildTokenTree = function(tokens,bytes) {
	tokentree_walk_WalkSharp.clear();
	var stream = new tokentree_TokenStream(tokens,bytes);
	var root = new tokentree_TokenTree(null,null,-1);
	tokentree_walk_WalkFile.walkFile(stream,root);
	return root;
};
var tokentree_utils_TokenTreeCheckUtils = function() { };
$hxClasses["tokentree.utils.TokenTreeCheckUtils"] = tokentree_utils_TokenTreeCheckUtils;
tokentree_utils_TokenTreeCheckUtils.__name__ = "tokentree.utils.TokenTreeCheckUtils";
tokentree_utils_TokenTreeCheckUtils.isImportMult = function(token) {
	var _g = token.tok;
	switch(_g._hx_index) {
	case 5:
		if(_g.op._hx_index == 1) {
			return tokentree_utils_TokenTreeCheckUtils.isImport(token.parent);
		} else {
			return false;
		}
		break;
	case 10:
		return tokentree_utils_TokenTreeCheckUtils.isImport(token.parent);
	default:
		return false;
	}
};
tokentree_utils_TokenTreeCheckUtils.isImport = function(token) {
	var parent = token;
	while(parent != null) {
		if(parent.tok == null) {
			return false;
		}
		var _g = parent.tok;
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 13:
				return true;
			case 25:
				break;
			case 40:
				break;
			default:
				return false;
			}
			break;
		case 1:
			if(_g.c._hx_index != 3) {
				return false;
			}
			break;
		case 5:
			if(_g.op._hx_index != 23) {
				return false;
			}
			break;
		case 10:
			break;
		default:
			return false;
		}
		parent = parent.parent;
	}
	return false;
};
tokentree_utils_TokenTreeCheckUtils.isTypeParameter = function(token) {
	var _g = token.tok;
	if(_g._hx_index == 5) {
		switch(_g.op._hx_index) {
		case 7:
			var _g1 = token.parent.tok;
			if(_g1._hx_index == 5) {
				if(_g1.op._hx_index == 9) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 9:
			var _g2 = token.getLastChild().tok;
			if(_g2._hx_index == 5) {
				if(_g2.op._hx_index == 7) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	} else {
		return false;
	}
};
tokentree_utils_TokenTreeCheckUtils.filterOpSub = function(token) {
	var _g = token.tok;
	if(!(_g._hx_index == 5 && _g.op._hx_index == 3)) {
		return false;
	}
	var _g1 = token.parent.tok;
	switch(_g1._hx_index) {
	case 0:
		switch(_g1.k._hx_index) {
		case 3:
			return true;
		case 4:
			return true;
		case 5:
			return true;
		case 6:
			return true;
		case 7:
			return true;
		case 10:
			return true;
		default:
			return false;
		}
		break;
	case 5:
		return true;
	case 8:
		return true;
	case 11:
		return true;
	case 14:
		return true;
	case 16:
		return true;
	case 18:
		return true;
	case 20:
		return true;
	default:
		return false;
	}
};
tokentree_utils_TokenTreeCheckUtils.isUnaryLeftSided = function(tok) {
	var child = tok.getFirstChild();
	if(child == null) {
		return false;
	}
	var _g = child.tok;
	switch(_g._hx_index) {
	case 0:
		switch(_g.k._hx_index) {
		case 23:
			return true;
		case 40:
			return true;
		default:
			return false;
		}
		break;
	case 1:
		return true;
	case 18:
		return true;
	default:
		return false;
	}
};
tokentree_utils_TokenTreeCheckUtils.isTernary = function(tok) {
	var _g = tok.tok;
	if(_g._hx_index != 20) {
		return false;
	}
	var _g1 = tok.getLastChild().tok;
	if(_g1._hx_index != 11) {
		return false;
	}
	return true;
};
var tokentree_walk_WalkAbstract = function() { };
$hxClasses["tokentree.walk.WalkAbstract"] = tokentree_walk_WalkAbstract;
tokentree_walk_WalkAbstract.__name__ = "tokentree.walk.WalkAbstract";
tokentree_walk_WalkAbstract.walkAbstract = function(stream,parent,prefixes) {
	var typeTok = stream.consumeToken();
	parent.addChild(typeTok);
	var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
	var _g = 0;
	while(_g < prefixes.length) {
		var prefix = prefixes[_g];
		++_g;
		name.addChild(prefix);
	}
	if(stream.is(haxeparser_TokenDef.POpen)) {
		tokentree_walk_WalkPOpen.walkPOpen(stream,name);
	}
	var typeParent = name;
	var typeChild;
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop2: while(progress.streamHasChanged()) {
		var _g1 = stream.token();
		switch(_g1._hx_index) {
		case 1:
			if(_g1.c._hx_index == 3) {
				switch(_g1.c.s) {
				case "from":case "to":
					var fromToken = stream.consumeToken();
					name.addChild(fromToken);
					tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,fromToken);
					break;
				default:
					typeChild = stream.consumeToken();
					typeParent.addChild(typeChild);
					typeParent = typeChild;
				}
			} else {
				typeChild = stream.consumeToken();
				typeParent.addChild(typeChild);
				typeParent = typeChild;
			}
			break;
		case 16:
			break _hx_loop2;
		default:
			typeChild = stream.consumeToken();
			typeParent.addChild(typeChild);
			typeParent = typeChild;
		}
	}
	var block = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
	name.addChild(block);
	tokentree_walk_WalkAbstract.walkAbstractBody(stream,block);
	block.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
};
tokentree_walk_WalkAbstract.walkAbstractBody = function(stream,parent) {
	var tempStore = [];
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop1: while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				tokentree_walk_WalkFunction.walkFunction(stream,parent,tempStore);
				tempStore = [];
				break;
			case 2:
				tokentree_walk_WalkVar.walkVar(stream,parent,tempStore);
				tempStore = [];
				break;
			default:
				tempStore.push(stream.consumeToken());
			}
			break;
		case 2:
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkAbstract.walkAbstractBody);
			break;
		case 9:
			parent.addChild(stream.consumeToken());
			break;
		case 17:
			break _hx_loop1;
		case 21:
			tempStore.push(tokentree_walk_WalkAt.walkAt(stream));
			break;
		default:
			tempStore.push(stream.consumeToken());
		}
	}
	var _g1 = 0;
	while(_g1 < tempStore.length) {
		var tok = tempStore[_g1];
		++_g1;
		parent.addChild(tok);
	}
};
var tokentree_walk_WalkArrayAccess = function() { };
$hxClasses["tokentree.walk.WalkArrayAccess"] = tokentree_walk_WalkArrayAccess;
tokentree_walk_WalkArrayAccess.__name__ = "tokentree.walk.WalkArrayAccess";
tokentree_walk_WalkArrayAccess.walkArrayAccess = function(stream,parent) {
	var bkOpen = stream.consumeTokenDef(haxeparser_TokenDef.BkOpen);
	parent.addChild(bkOpen);
	var tempStore = [];
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop1: while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				tokentree_walk_WalkFunction.walkFunction(stream,bkOpen,tempStore);
				tempStore = [];
				break;
			case 5:
				var _g1 = 0;
				while(_g1 < tempStore.length) {
					var stored = tempStore[_g1];
					++_g1;
					bkOpen.addChild(stored);
				}
				tempStore = [];
				tokentree_walk_WalkWhile.walkWhile(stream,bkOpen);
				break;
			case 7:
				var _g2 = 0;
				while(_g2 < tempStore.length) {
					var stored1 = tempStore[_g2];
					++_g2;
					bkOpen.addChild(stored1);
				}
				tempStore = [];
				tokentree_walk_WalkFor.walkFor(stream,bkOpen);
				break;
			default:
				var _g3 = 0;
				while(_g3 < tempStore.length) {
					var stored2 = tempStore[_g3];
					++_g3;
					bkOpen.addChild(stored2);
				}
				tempStore = [];
				tokentree_walk_WalkStatement.walkStatement(stream,bkOpen);
			}
			break;
		case 13:
			var comma = stream.consumeTokenDef(haxeparser_TokenDef.Comma);
			bkOpen.addChild(comma);
			break;
		case 14:
			var _g4 = 0;
			while(_g4 < tempStore.length) {
				var stored3 = tempStore[_g4];
				++_g4;
				bkOpen.addChild(stored3);
			}
			tempStore = [];
			tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,bkOpen);
			break;
		case 15:
			break _hx_loop1;
		case 16:
			var _g5 = 0;
			while(_g5 < tempStore.length) {
				var stored4 = tempStore[_g5];
				++_g5;
				bkOpen.addChild(stored4);
			}
			tempStore = [];
			tokentree_walk_WalkBlock.walkBlock(stream,bkOpen);
			break;
		case 18:
			var _g6 = 0;
			while(_g6 < tempStore.length) {
				var stored5 = tempStore[_g6];
				++_g6;
				bkOpen.addChild(stored5);
			}
			tempStore = [];
			tokentree_walk_WalkPOpen.walkPOpen(stream,bkOpen);
			break;
		case 21:
			tempStore.push(tokentree_walk_WalkAt.walkAt(stream));
			break;
		default:
			var _g7 = 0;
			while(_g7 < tempStore.length) {
				var stored6 = tempStore[_g7];
				++_g7;
				bkOpen.addChild(stored6);
			}
			tempStore = [];
			tokentree_walk_WalkStatement.walkStatement(stream,bkOpen);
		}
	}
	bkOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BkClose));
};
var tokentree_walk_WalkAt = function() { };
$hxClasses["tokentree.walk.WalkAt"] = tokentree_walk_WalkAt;
tokentree_walk_WalkAt.__name__ = "tokentree.walk.WalkAt";
tokentree_walk_WalkAt.walkAt = function(stream) {
	var atTok = stream.consumeTokenDef(haxeparser_TokenDef.At);
	var parent = atTok;
	if(stream.is(haxeparser_TokenDef.DblDot)) {
		var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
		atTok.addChild(dblDot);
		parent = dblDot;
	}
	var name;
	var _g = stream.token();
	name = _g._hx_index == 1 ? stream.consumeConstIdent() : stream.consumeToken();
	parent.addChild(name);
	if(stream.is(haxeparser_TokenDef.POpen)) {
		tokentree_walk_WalkPOpen.walkPOpen(stream,name);
	}
	return atTok;
};
tokentree_walk_WalkAt.walkAts = function(stream) {
	var tempStore = [];
	var progress = new tokentree_TokenStreamProgress(stream);
	while(progress.streamHasChanged()) {
		var _g = stream.token();
		if(_g._hx_index == 21) {
			tempStore.push(tokentree_walk_WalkAt.walkAt(stream));
		}
	}
	return tempStore;
};
var tokentree_walk_WalkBinopSub = function() { };
$hxClasses["tokentree.walk.WalkBinopSub"] = tokentree_walk_WalkBinopSub;
tokentree_walk_WalkBinopSub.__name__ = "tokentree.walk.WalkBinopSub";
tokentree_walk_WalkBinopSub.walkBinopSub = function(stream,parent) {
	var sub = stream.consumeOpSub();
	parent.addChild(sub);
	var _g = sub.tok;
	if(_g._hx_index == 1) {
		tokentree_walk_WalkStatement.walkStatementContinue(stream,sub);
	} else {
		tokentree_walk_WalkStatement.walkStatement(stream,sub);
	}
};
var tokentree_walk_WalkBlock = function() { };
$hxClasses["tokentree.walk.WalkBlock"] = tokentree_walk_WalkBlock;
tokentree_walk_WalkBlock.__name__ = "tokentree.walk.WalkBlock";
tokentree_walk_WalkBlock.walkBlock = function(stream,parent) {
	var tempStore = [];
	var rewindPos = stream.currentPos();
	while(stream.is(haxeparser_TokenDef.At)) tempStore.push(tokentree_walk_WalkAt.walkAt(stream));
	if(stream.is(haxeparser_TokenDef.BrOpen)) {
		var openTok = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
		parent.addChild(openTok);
		var _g = 0;
		while(_g < tempStore.length) {
			var tok = tempStore[_g];
			++_g;
			openTok.addChild(tok);
		}
		tokentree_walk_WalkBlock.walkBlockContinue(stream,openTok);
	} else {
		stream.rewindTo(rewindPos);
		tokentree_walk_WalkStatement.walkStatement(stream,parent);
	}
};
tokentree_walk_WalkBlock.walkBlockContinue = function(stream,parent) {
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop1: while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 13:case 15:case 19:
			var child = stream.consumeToken();
			parent.addChild(child);
			break;
		case 17:
			break _hx_loop1;
		default:
			tokentree_walk_WalkStatement.walkStatement(stream,parent);
		}
	}
	parent.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
};
var tokentree_walk_WalkClass = function() { };
$hxClasses["tokentree.walk.WalkClass"] = tokentree_walk_WalkClass;
tokentree_walk_WalkClass.__name__ = "tokentree.walk.WalkClass";
tokentree_walk_WalkClass.walkClass = function(stream,parent,prefixes) {
	var typeTok = stream.consumeToken();
	parent.addChild(typeTok);
	tokentree_walk_WalkComment.walkComment(stream,parent);
	var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
	var _g = 0;
	while(_g < prefixes.length) {
		var prefix = prefixes[_g];
		++_g;
		name.addChild(prefix);
	}
	if(stream.isSharp()) {
		tokentree_walk_WalkSharp.walkSharp(stream,name,tokentree_walk_WalkClass.walkClassExtends);
	}
	tokentree_walk_WalkClass.walkClassExtends(stream,name);
	var block = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
	name.addChild(block);
	tokentree_walk_WalkClass.walkClassBody(stream,block);
	block.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
};
tokentree_walk_WalkClass.walkClassExtends = function(stream,name) {
	tokentree_walk_WalkExtends.walkExtends(stream,name);
	if(stream.isSharp()) {
		tokentree_walk_WalkSharp.walkSharp(stream,name,tokentree_walk_WalkClass.walkClassExtends);
	}
	tokentree_walk_WalkImplements.walkImplements(stream,name);
	if(stream.isSharp()) {
		tokentree_walk_WalkSharp.walkSharp(stream,name,tokentree_walk_WalkClass.walkClassExtends);
	}
	tokentree_walk_WalkComment.walkComment(stream,name);
};
tokentree_walk_WalkClass.walkClassBody = function(stream,parent) {
	var tempStore = [];
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop1: while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				tokentree_walk_WalkFunction.walkFunction(stream,parent,tempStore);
				tempStore = [];
				break;
			case 2:
				tokentree_walk_WalkVar.walkVar(stream,parent,tempStore);
				tempStore = [];
				break;
			case 17:case 18:case 19:case 30:case 32:case 34:case 40:
				tempStore.push(stream.consumeToken());
				break;
			default:
				var _g1 = tokentree_TokenStream.MODE;
				switch(_g1._hx_index) {
				case 0:
					throw new js__$Boot_HaxeError("invalid token tree structure");
				case 1:
					tokentree_walk_WalkStatement.walkStatement(stream,parent);
					break;
				}
			}
			break;
		case 2:
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkClass.walkClassBody);
			tokentree_walk_WalkClass.walkClassContinueAfterSharp(stream,parent);
			break;
		case 6:case 7:
			parent.addChild(stream.consumeToken());
			break;
		case 9:
			parent.addChild(stream.consumeToken());
			break;
		case 17:
			break _hx_loop1;
		case 21:
			tempStore.push(tokentree_walk_WalkAt.walkAt(stream));
			break;
		default:
			var _g2 = tokentree_TokenStream.MODE;
			switch(_g2._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("invalid token tree structure");
			case 1:
				tokentree_walk_WalkStatement.walkStatement(stream,parent);
				break;
			}
		}
	}
	if(tempStore.length > 0) {
		var _g3 = tokentree_TokenStream.MODE;
		switch(_g3._hx_index) {
		case 0:
			throw new js__$Boot_HaxeError("invalid token tree structure");
		case 1:
			var _g4 = 0;
			while(_g4 < tempStore.length) {
				var tok = tempStore[_g4];
				++_g4;
				parent.addChild(tok);
			}
			break;
		}
	}
};
tokentree_walk_WalkClass.walkClassContinueAfterSharp = function(stream,parent) {
	var brOpen = tokentree_TokenTreeAccessHelper.access(parent).lastChild().is(haxeparser_TokenDef.Sharp("if")).lastOf(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction)).firstChild().lastChild().is(haxeparser_TokenDef.BrOpen);
	if(brOpen.token == null) {
		return;
	}
	if(brOpen.lastChild().is(haxeparser_TokenDef.BrClose).token != null) {
		return;
	}
	tokentree_walk_WalkBlock.walkBlockContinue(stream,parent);
};
var tokentree_walk_WalkComment = function() { };
$hxClasses["tokentree.walk.WalkComment"] = tokentree_walk_WalkComment;
tokentree_walk_WalkComment.__name__ = "tokentree.walk.WalkComment";
tokentree_walk_WalkComment.walkComment = function(stream,parent) {
	if(!stream.hasMore()) {
		return;
	}
	var progress = new tokentree_TokenStreamProgress(stream);
	while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 6:case 7:
			var comment = stream.consumeToken();
			parent.addChild(comment);
			break;
		default:
			return;
		}
	}
};
var tokentree_walk_WalkDoWhile = function() { };
$hxClasses["tokentree.walk.WalkDoWhile"] = tokentree_walk_WalkDoWhile;
tokentree_walk_WalkDoWhile.__name__ = "tokentree.walk.WalkDoWhile";
tokentree_walk_WalkDoWhile.walkDoWhile = function(stream,parent) {
	var doTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdDo));
	parent.addChild(doTok);
	tokentree_walk_WalkComment.walkComment(stream,doTok);
	tokentree_walk_WalkBlock.walkBlock(stream,doTok);
	var whileTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdWhile));
	doTok.addChild(whileTok);
	tokentree_walk_WalkPOpen.walkPOpen(stream,whileTok);
	tokentree_walk_WalkComment.walkComment(stream,whileTok);
	if(stream.is(haxeparser_TokenDef.Semicolon)) {
		whileTok.addChild(stream.consumeToken());
	}
};
var tokentree_walk_WalkEnum = function() { };
$hxClasses["tokentree.walk.WalkEnum"] = tokentree_walk_WalkEnum;
tokentree_walk_WalkEnum.__name__ = "tokentree.walk.WalkEnum";
tokentree_walk_WalkEnum.walkEnum = function(stream,parent,prefixes) {
	var typeTok = stream.consumeToken();
	parent.addChild(typeTok);
	var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
	var _g = 0;
	while(_g < prefixes.length) {
		var prefix = prefixes[_g];
		++_g;
		name.addChild(prefix);
	}
	tokentree_walk_WalkBlock.walkBlock(stream,name);
};
var tokentree_walk_WalkExtends = function() { };
$hxClasses["tokentree.walk.WalkExtends"] = tokentree_walk_WalkExtends;
tokentree_walk_WalkExtends.__name__ = "tokentree.walk.WalkExtends";
tokentree_walk_WalkExtends.walkExtends = function(stream,parent) {
	if(!stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdExtends))) {
		return;
	}
	var parentType = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdExtends));
	parent.addChild(parentType);
	tokentree_walk_WalkComment.walkComment(stream,parent);
	tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,parentType);
	tokentree_walk_WalkComment.walkComment(stream,parent);
	tokentree_walk_WalkExtends.walkExtends(stream,parentType);
	tokentree_walk_WalkComment.walkComment(stream,parent);
};
var tokentree_walk_WalkFieldDef = function() { };
$hxClasses["tokentree.walk.WalkFieldDef"] = tokentree_walk_WalkFieldDef;
tokentree_walk_WalkFieldDef.__name__ = "tokentree.walk.WalkFieldDef";
tokentree_walk_WalkFieldDef.walkFieldDef = function(stream,parent) {
	var tempStore = [];
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop1: while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:case 2:
				var tok = stream.consumeToken();
				parent.addChild(tok);
				parent = tok;
				break;
			default:
				break _hx_loop1;
			}
			break;
		case 6:case 7:
			tokentree_walk_WalkComment.walkComment(stream,parent);
			break;
		case 21:
			tempStore.push(tokentree_walk_WalkAt.walkAt(stream));
			break;
		default:
			break _hx_loop1;
		}
	}
	var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,parent);
	var _g1 = 0;
	while(_g1 < tempStore.length) {
		var tok1 = tempStore[_g1];
		++_g1;
		name.addChild(tok1);
	}
	tokentree_walk_WalkComment.walkComment(stream,name);
	if(stream.is(haxeparser_TokenDef.DblDot)) {
		var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
		name.addChild(dblDot);
		tokentree_walk_WalkTypedefBody.walkTypedefBody(stream,dblDot);
	}
	if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
		tokentree_walk_WalkStatement.walkStatement(stream,name);
	}
	var _g2 = stream.token();
	switch(_g2._hx_index) {
	case 9:
		name.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Semicolon));
		break;
	case 13:
		name.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Comma));
		break;
	default:
	}
};
var tokentree_walk_WalkFile = function() { };
$hxClasses["tokentree.walk.WalkFile"] = tokentree_walk_WalkFile;
tokentree_walk_WalkFile.__name__ = "tokentree.walk.WalkFile";
tokentree_walk_WalkFile.walkFile = function(stream,parent) {
	var tempStore = [];
	while(stream.hasMore()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 13:case 33:case 35:
				var _g1 = 0;
				while(_g1 < tempStore.length) {
					var stored = tempStore[_g1];
					++_g1;
					parent.addChild(stored);
				}
				tempStore = [];
				tokentree_walk_WalkPackageImport.walkPackageImport(stream,parent);
				break;
			case 18:case 19:case 25:
				tempStore.push(stream.consumeToken());
				break;
			case 1:case 26:case 27:case 31:case 39:
				tokentree_walk_WalkType.walkType(stream,parent,tempStore);
				tempStore = [];
				break;
			default:
				tokentree_walk_WalkBlock.walkBlock(stream,parent);
			}
			break;
		case 2:
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkFile.walkFile);
			if(!stream.hasMore()) {
				return;
			}
			var _g2 = stream.token();
			if(_g2._hx_index == 16) {
				tokentree_walk_WalkBlock.walkBlock(stream,parent.children[parent.children.length - 1]);
			}
			break;
		case 6:case 7:
			tempStore.push(stream.consumeToken());
			break;
		case 9:case 13:case 15:case 17:case 19:
			parent.addChild(stream.consumeToken());
			break;
		case 21:
			tempStore.push(tokentree_walk_WalkAt.walkAt(stream));
			break;
		default:
			tokentree_walk_WalkBlock.walkBlock(stream,parent);
		}
	}
	var _g3 = 0;
	while(_g3 < tempStore.length) {
		var stored1 = tempStore[_g3];
		++_g3;
		var _g11 = stored1.tok;
		switch(_g11._hx_index) {
		case 0:
			switch(_g11.k._hx_index) {
			case 18:case 19:case 25:
				throw new js__$Boot_HaxeError("invalid token tree structure");
			default:
				parent.addChild(stored1);
			}
			break;
		case 21:
			throw new js__$Boot_HaxeError("invalid token tree structure");
		default:
			parent.addChild(stored1);
		}
	}
};
var tokentree_walk_WalkFor = function() { };
$hxClasses["tokentree.walk.WalkFor"] = tokentree_walk_WalkFor;
tokentree_walk_WalkFor.__name__ = "tokentree.walk.WalkFor";
tokentree_walk_WalkFor.walkFor = function(stream,parent) {
	var forTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFor));
	parent.addChild(forTok);
	tokentree_walk_WalkComment.walkComment(stream,forTok);
	tokentree_walk_WalkFor.walkForPOpen(stream,forTok);
	tokentree_walk_WalkComment.walkComment(stream,forTok);
	tokentree_walk_WalkBlock.walkBlock(stream,forTok);
};
tokentree_walk_WalkFor.walkForPOpen = function(stream,parent) {
	var pOpen = stream.consumeTokenDef(haxeparser_TokenDef.POpen);
	tokentree_walk_WalkComment.walkComment(stream,pOpen);
	var identifier = stream.consumeConstIdent();
	parent.addChild(pOpen);
	pOpen.addChild(identifier);
	tokentree_walk_WalkComment.walkComment(stream,identifier);
	var inTok = stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpIn));
	identifier.addChild(inTok);
	tokentree_walk_WalkComment.walkComment(stream,inTok);
	tokentree_walk_WalkStatement.walkStatement(stream,inTok);
	tokentree_walk_WalkComment.walkComment(stream,pOpen);
	pOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.PClose));
	tokentree_walk_WalkComment.walkComment(stream,parent);
	return;
};
var tokentree_walk_WalkFunction = function() { };
$hxClasses["tokentree.walk.WalkFunction"] = tokentree_walk_WalkFunction;
tokentree_walk_WalkFunction.__name__ = "tokentree.walk.WalkFunction";
tokentree_walk_WalkFunction.walkFunction = function(stream,parent,prefixes) {
	var funcTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction));
	parent.addChild(funcTok);
	tokentree_walk_WalkComment.walkComment(stream,funcTok);
	var name = funcTok;
	var _g = stream.token();
	switch(_g._hx_index) {
	case 0:
		name = _g.k._hx_index == 22 ? tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,funcTok) : tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,funcTok);
		break;
	case 5:
		if(_g.op._hx_index == 9) {
			tokentree_walk_WalkLtGt.walkLtGt(stream,funcTok);
			name = funcTok.getLastChild();
		} else {
			name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,funcTok);
		}
		break;
	case 18:
		break;
	default:
		name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,funcTok);
	}
	var _g1 = 0;
	while(_g1 < prefixes.length) {
		var stored = prefixes[_g1];
		++_g1;
		name.addChild(stored);
	}
	tokentree_walk_WalkComment.walkComment(stream,name);
	tokentree_walk_WalkFunction.walkFunctionParameters(stream,name);
	tokentree_walk_WalkComment.walkComment(stream,name);
	if(stream.is(haxeparser_TokenDef.DblDot)) {
		var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
		name.addChild(dblDot);
		tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,dblDot);
	}
	tokentree_walk_WalkBlock.walkBlock(stream,name);
};
tokentree_walk_WalkFunction.walkFunctionParameters = function(stream,parent) {
	var pOpen = stream.consumeTokenDef(haxeparser_TokenDef.POpen);
	parent.addChild(pOpen);
	var progress = new tokentree_TokenStreamProgress(stream);
	while(progress.streamHasChanged()) {
		tokentree_walk_WalkComment.walkComment(stream,pOpen);
		if(stream.is(haxeparser_TokenDef.PClose)) {
			break;
		}
		tokentree_walk_WalkFieldDef.walkFieldDef(stream,pOpen);
	}
	pOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.PClose));
};
var tokentree_walk_WalkIf = function() { };
$hxClasses["tokentree.walk.WalkIf"] = tokentree_walk_WalkIf;
tokentree_walk_WalkIf.__name__ = "tokentree.walk.WalkIf";
tokentree_walk_WalkIf.walkIf = function(stream,parent) {
	var ifTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdIf));
	parent.addChild(ifTok);
	tokentree_walk_WalkPOpen.walkPOpen(stream,ifTok);
	if(stream.is(haxeparser_TokenDef.DblDot)) {
		return;
	}
	tokentree_walk_WalkBlock.walkBlock(stream,ifTok);
	if(stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse))) {
		var elseTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdElse));
		ifTok.addChild(elseTok);
		tokentree_walk_WalkBlock.walkBlock(stream,elseTok);
	}
};
var tokentree_walk_WalkImplements = function() { };
$hxClasses["tokentree.walk.WalkImplements"] = tokentree_walk_WalkImplements;
tokentree_walk_WalkImplements.__name__ = "tokentree.walk.WalkImplements";
tokentree_walk_WalkImplements.walkImplements = function(stream,parent) {
	if(!stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdImplements))) {
		return;
	}
	var interfacePart = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdImplements));
	parent.addChild(interfacePart);
	tokentree_walk_WalkComment.walkComment(stream,parent);
	tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,interfacePart);
	tokentree_walk_WalkComment.walkComment(stream,parent);
	tokentree_walk_WalkImplements.walkImplements(stream,interfacePart);
	tokentree_walk_WalkComment.walkComment(stream,parent);
};
var tokentree_walk_WalkInterface = function() { };
$hxClasses["tokentree.walk.WalkInterface"] = tokentree_walk_WalkInterface;
tokentree_walk_WalkInterface.__name__ = "tokentree.walk.WalkInterface";
tokentree_walk_WalkInterface.walkInterface = function(stream,parent,prefixes) {
	var typeTok = stream.consumeToken();
	parent.addChild(typeTok);
	var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
	var _g = 0;
	while(_g < prefixes.length) {
		var prefix = prefixes[_g];
		++_g;
		name.addChild(prefix);
	}
	tokentree_walk_WalkExtends.walkExtends(stream,name);
	tokentree_walk_WalkImplements.walkImplements(stream,name);
	var block = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
	name.addChild(block);
	tokentree_walk_WalkInterface.walkInterfaceBody(stream,block);
	block.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
};
tokentree_walk_WalkInterface.walkInterfaceBody = function(stream,parent) {
	var tempStore = [];
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop1: while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				tokentree_walk_WalkFunction.walkFunction(stream,parent,tempStore);
				tempStore = [];
				break;
			case 2:
				tokentree_walk_WalkVar.walkVar(stream,parent,tempStore);
				tempStore = [];
				break;
			default:
				tempStore.push(stream.consumeToken());
			}
			break;
		case 2:
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkInterface.walkInterfaceBody);
			break;
		case 9:
			parent.addChild(stream.consumeToken());
			break;
		case 17:
			break _hx_loop1;
		case 21:
			tempStore.push(tokentree_walk_WalkAt.walkAt(stream));
			break;
		default:
			tempStore.push(stream.consumeToken());
		}
	}
	var _g1 = 0;
	while(_g1 < tempStore.length) {
		var tok = tempStore[_g1];
		++_g1;
		parent.addChild(tok);
	}
};
var tokentree_walk_WalkLtGt = function() { };
$hxClasses["tokentree.walk.WalkLtGt"] = tokentree_walk_WalkLtGt;
tokentree_walk_WalkLtGt.__name__ = "tokentree.walk.WalkLtGt";
tokentree_walk_WalkLtGt.walkLtGt = function(stream,parent) {
	var ltTok = stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt));
	parent.addChild(ltTok);
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop1: while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 5:
			if(_g.op._hx_index == 7) {
				break _hx_loop1;
			} else {
				tokentree_walk_WalkFieldDef.walkFieldDef(stream,ltTok);
			}
			break;
		case 11:
			var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
			ltTok.addChild(dblDot);
			tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,ltTok);
			break;
		case 13:
			var comma = stream.consumeTokenDef(haxeparser_TokenDef.Comma);
			ltTok.addChild(comma);
			tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,ltTok);
			tokentree_walk_WalkFieldDef.walkFieldDef(stream,ltTok);
			break;
		default:
			tokentree_walk_WalkFieldDef.walkFieldDef(stream,ltTok);
		}
	}
	ltTok.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt)));
};
var tokentree_walk_WalkNew = function() { };
$hxClasses["tokentree.walk.WalkNew"] = tokentree_walk_WalkNew;
tokentree_walk_WalkNew.__name__ = "tokentree.walk.WalkNew";
tokentree_walk_WalkNew.walkNew = function(stream,parent) {
	var newTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdNew));
	parent.addChild(newTok);
	var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,newTok);
	var progress = new tokentree_TokenStreamProgress(stream);
	while(progress.streamHasChanged()) {
		var _g = stream.token();
		if(_g._hx_index == 5) {
			if(_g.op._hx_index == 7) {
				var gt = stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
				name.addChild(gt);
			}
		}
	}
	tokentree_walk_WalkPOpen.walkPOpen(stream,name);
	if(stream.is(haxeparser_TokenDef.Dot)) {
		tokentree_walk_WalkStatement.walkStatement(stream,name);
	}
};
var tokentree_walk_WalkPOpen = function() { };
$hxClasses["tokentree.walk.WalkPOpen"] = tokentree_walk_WalkPOpen;
tokentree_walk_WalkPOpen.__name__ = "tokentree.walk.WalkPOpen";
tokentree_walk_WalkPOpen.walkPOpen = function(stream,parent) {
	var pOpen = stream.consumeTokenDef(haxeparser_TokenDef.POpen);
	parent.addChild(pOpen);
	tokentree_walk_WalkPOpen.walkPOpenParts(stream,pOpen);
	pOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.PClose));
	return pOpen;
};
tokentree_walk_WalkPOpen.walkPOpenParts = function(stream,parent) {
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop1: while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 2:
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkPOpen.walkPOpenParts);
			break;
		case 13:
			var comma = stream.consumeToken();
			parent.addChild(comma);
			break;
		case 14:
			tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,parent);
			break;
		case 16:
			tokentree_walk_WalkBlock.walkBlock(stream,parent);
			break;
		case 18:
			tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
			break;
		case 19:
			break _hx_loop1;
		default:
			tokentree_walk_WalkStatement.walkStatement(stream,parent);
		}
	}
};
var tokentree_walk_WalkPackageImport = function() { };
$hxClasses["tokentree.walk.WalkPackageImport"] = tokentree_walk_WalkPackageImport;
tokentree_walk_WalkPackageImport.__name__ = "tokentree.walk.WalkPackageImport";
tokentree_walk_WalkPackageImport.walkPackageImport = function(stream,parent) {
	var newChild = null;
	newChild = stream.consumeToken();
	parent.addChild(newChild);
	if(Type.enumEq(haxeparser_TokenDef.Semicolon,newChild.tok)) {
		return;
	}
	tokentree_walk_WalkPackageImport.walkPackageImport(stream,newChild);
};
var tokentree_walk_WalkQuestion = function() { };
$hxClasses["tokentree.walk.WalkQuestion"] = tokentree_walk_WalkQuestion;
tokentree_walk_WalkQuestion.__name__ = "tokentree.walk.WalkQuestion";
tokentree_walk_WalkQuestion.walkQuestion = function(stream,parent) {
	var question = stream.consumeTokenDef(haxeparser_TokenDef.Question);
	parent.addChild(question);
	tokentree_walk_WalkStatement.walkStatement(stream,question);
};
var tokentree_walk_WalkSharp = function() { };
$hxClasses["tokentree.walk.WalkSharp"] = tokentree_walk_WalkSharp;
tokentree_walk_WalkSharp.__name__ = "tokentree.walk.WalkSharp";
tokentree_walk_WalkSharp.clear = function() {
	tokentree_walk_WalkSharp.SHARP_IFS = [];
};
tokentree_walk_WalkSharp.walkSharp = function(stream,parent,walker) {
	var _g = stream.token();
	if(_g._hx_index == 2) {
		switch(_g.s) {
		case "else":
			tokentree_walk_WalkSharp.walkSharpElse(stream,parent);
			break;
		case "elseif":
			tokentree_walk_WalkSharp.walkSharpElseIf(stream,parent);
			break;
		case "end":
			tokentree_walk_WalkSharp.walkSharpEnd(stream,parent);
			break;
		case "error":
			var errorToken = stream.consumeToken();
			parent.addChild(errorToken);
			var _g1 = stream.token();
			if(_g1._hx_index == 1) {
				if(_g1.c._hx_index == 2) {
					errorToken.addChild(stream.consumeToken());
				}
			}
			break;
		case "if":
			tokentree_walk_WalkSharp.walkSharpIf(stream,parent,walker);
			break;
		default:
			parent.addChild(stream.consumeToken());
		}
	}
};
tokentree_walk_WalkSharp.walkSharpIf = function(stream,parent,walker) {
	var ifToken = stream.consumeToken();
	parent.addChild(ifToken);
	tokentree_walk_WalkSharp.walkSharpIfExpr(stream,ifToken);
	tokentree_walk_WalkSharp.SHARP_IFS.push(ifToken);
	var newParent = ifToken;
	var progress = new tokentree_TokenStreamProgress(stream);
	while(progress.streamHasChanged()) try {
		walker(stream,newParent);
		var _g = stream.token();
		switch(_g._hx_index) {
		case 13:case 17:
			var newChild = stream.consumeToken();
			newParent.addChild(newChild);
			break;
		default:
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if((e1 instanceof tokentree_walk_SharpElseException)) {
			newParent = e1.token;
		} else if((e1 instanceof tokentree_walk_SharpEndException)) {
			var e2 = e1;
			tokentree_walk_WalkSharp.SHARP_IFS.pop();
			if(!stream.hasMore()) {
				return;
			}
			var _g1 = stream.token();
			if(_g1._hx_index == 13) {
				var newChild1 = stream.consumeToken();
				newParent.addChild(newChild1);
			}
			return;
		} else {
			throw e;
		}
	}
};
tokentree_walk_WalkSharp.walkSharpElse = function(stream,parent) {
	var sharpIfParent = tokentree_walk_WalkSharp.SHARP_IFS[tokentree_walk_WalkSharp.SHARP_IFS.length - 1];
	var ifToken = stream.consumeToken();
	sharpIfParent.addChild(ifToken);
	throw new js__$Boot_HaxeError(new tokentree_walk_SharpElseException(ifToken));
};
tokentree_walk_WalkSharp.walkSharpElseIf = function(stream,parent) {
	var sharpIfParent = tokentree_walk_WalkSharp.SHARP_IFS[tokentree_walk_WalkSharp.SHARP_IFS.length - 1];
	var ifToken = stream.consumeToken();
	sharpIfParent.addChild(ifToken);
	tokentree_walk_WalkSharp.walkSharpIfExpr(stream,ifToken);
	throw new js__$Boot_HaxeError(new tokentree_walk_SharpElseException(ifToken));
};
tokentree_walk_WalkSharp.walkSharpEnd = function(stream,parent) {
	var sharpIfParent = tokentree_walk_WalkSharp.SHARP_IFS[tokentree_walk_WalkSharp.SHARP_IFS.length - 1];
	var endToken = stream.consumeToken();
	sharpIfParent.addChild(endToken);
	throw new js__$Boot_HaxeError(new tokentree_walk_SharpEndException());
};
tokentree_walk_WalkSharp.walkSharpIfExpr = function(stream,parent) {
	var childToken;
	var progress = new tokentree_TokenStreamProgress(stream);
	while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			childToken = stream.consumeToken();
			parent.addChild(childToken);
			return;
		case 1:
			if(_g.c._hx_index == 3) {
				childToken = stream.consumeToken();
				parent.addChild(childToken);
				return;
			} else {
				return;
			}
			break;
		case 4:
			if(_g.op._hx_index == 2) {
				childToken = stream.consumeToken();
				parent.addChild(childToken);
				tokentree_walk_WalkSharp.walkSharpIfExpr(stream,childToken);
				return;
			} else {
				return;
			}
			break;
		case 18:
			tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
			return;
		default:
			return;
		}
	}
};
var tokentree_walk_SharpElseException = function(token) {
	this.token = token;
};
$hxClasses["tokentree.walk.SharpElseException"] = tokentree_walk_SharpElseException;
tokentree_walk_SharpElseException.__name__ = "tokentree.walk.SharpElseException";
tokentree_walk_SharpElseException.prototype = {
	token: null
	,__class__: tokentree_walk_SharpElseException
};
var tokentree_walk_SharpEndException = function() {
};
$hxClasses["tokentree.walk.SharpEndException"] = tokentree_walk_SharpEndException;
tokentree_walk_SharpEndException.__name__ = "tokentree.walk.SharpEndException";
tokentree_walk_SharpEndException.prototype = {
	__class__: tokentree_walk_SharpEndException
};
var tokentree_walk_WalkStatement = function() { };
$hxClasses["tokentree.walk.WalkStatement"] = tokentree_walk_WalkStatement;
tokentree_walk_WalkStatement.__name__ = "tokentree.walk.WalkStatement";
tokentree_walk_WalkStatement.walkStatement = function(stream,parent) {
	tokentree_walk_WalkComment.walkComment(stream,parent);
	var tempStore = [];
	var wantMore = true;
	while(stream.is(haxeparser_TokenDef.At)) tempStore.push(tokentree_walk_WalkAt.walkAt(stream));
	var _g = stream.token();
	switch(_g._hx_index) {
	case 0:
		if(tokentree_walk_WalkStatement.walkKeyword(stream,parent)) {
			wantMore = true;
		} else {
			return;
		}
		break;
	case 2:
		tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkStatement.walkStatement);
		return;
	case 3:
		var dollarTok = stream.consumeToken();
		parent.addChild(dollarTok);
		tokentree_walk_WalkBlock.walkBlock(stream,dollarTok);
		return;
	case 4:
		var _g1 = parent.tok;
		if(_g1._hx_index == 1) {
			wantMore = false;
		}
		break;
	case 5:
		switch(_g.op._hx_index) {
		case 3:
			tokentree_walk_WalkBinopSub.walkBinopSub(stream,parent);
			return;
		case 7:
			var gtTok = stream.consumeOpGt();
			parent.addChild(gtTok);
			tokentree_walk_WalkStatement.walkStatement(stream,gtTok);
			return;
		case 9:
			if(stream.isTypedParam()) {
				tokentree_walk_WalkLtGt.walkLtGt(stream,parent);
				return;
			}
			wantMore = true;
			break;
		default:
			wantMore = true;
		}
		break;
	case 8:
		wantMore = true;
		break;
	case 10:case 11:
		wantMore = true;
		break;
	case 12:
		wantMore = true;
		break;
	case 13:
		return;
	case 14:
		tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,parent);
		tokentree_walk_WalkStatement.walkStatementContinue(stream,parent);
		return;
	case 15:case 17:case 19:
		return;
	case 16:
		tokentree_walk_WalkBlock.walkBlock(stream,parent);
		return;
	case 18:
		var pOpen = tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
		tokentree_walk_WalkStatement.walkStatementContinue(stream,pOpen);
		return;
	case 20:
		tokentree_walk_WalkQuestion.walkQuestion(stream,parent);
		return;
	default:
		wantMore = false;
	}
	var newChild = stream.consumeToken();
	parent.addChild(newChild);
	var _g11 = 0;
	while(_g11 < tempStore.length) {
		var tok = tempStore[_g11];
		++_g11;
		newChild.addChild(tok);
	}
	if(wantMore) {
		tokentree_walk_WalkStatement.walkStatement(stream,newChild);
	}
	tokentree_walk_WalkStatement.walkStatementContinue(stream,newChild);
};
tokentree_walk_WalkStatement.walkStatementContinue = function(stream,parent) {
	var _g = stream.token();
	switch(_g._hx_index) {
	case 4:case 5:
		tokentree_walk_WalkStatement.walkStatement(stream,parent);
		break;
	case 9:
		tokentree_walk_WalkStatement.walkStatement(stream,parent);
		break;
	case 10:
		tokentree_walk_WalkStatement.walkStatement(stream,parent);
		break;
	case 11:
		var question = tokentree_walk_WalkStatement.findQuestionParent(parent);
		if(question != null) {
			tokentree_walk_WalkStatement.walkStatement(stream,question);
			return;
		}
		var dblDotTok = stream.consumeToken();
		parent.addChild(dblDotTok);
		if(stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdNew))) {
			tokentree_walk_WalkNew.walkNew(stream,dblDotTok);
			return;
		}
		if(stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdFunction))) {
			tokentree_walk_WalkFunction.walkFunction(stream,dblDotTok,tokentree_walk_WalkAt.walkAts(stream));
			return;
		}
		tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,dblDotTok);
		if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
			tokentree_walk_WalkStatement.walkStatement(stream,parent);
		}
		if(stream.is(haxeparser_TokenDef.Arrow)) {
			tokentree_walk_WalkStatement.walkStatement(stream,parent);
		}
		break;
	case 12:
		tokentree_walk_WalkStatement.walkStatement(stream,parent);
		break;
	case 14:
		tokentree_walk_WalkStatement.walkStatement(stream,parent);
		break;
	case 18:
		tokentree_walk_WalkStatement.walkStatement(stream,parent);
		break;
	case 20:
		tokentree_walk_WalkStatement.walkStatement(stream,parent);
		break;
	default:
	}
};
tokentree_walk_WalkStatement.walkKeyword = function(stream,parent) {
	var _g = stream.token();
	if(_g._hx_index == 0) {
		switch(_g.k._hx_index) {
		case 0:
			tokentree_walk_WalkFunction.walkFunction(stream,parent,[]);
			break;
		case 1:
			tokentree_walk_WalkClass.walkClass(stream,parent,[]);
			break;
		case 2:
			tokentree_walk_WalkVar.walkVar(stream,parent,[]);
			break;
		case 3:
			tokentree_walk_WalkIf.walkIf(stream,parent);
			break;
		case 5:
			tokentree_walk_WalkWhile.walkWhile(stream,parent);
			break;
		case 6:
			tokentree_walk_WalkDoWhile.walkDoWhile(stream,parent);
			break;
		case 7:
			tokentree_walk_WalkFor.walkFor(stream,parent);
			break;
		case 10:case 40:
			return true;
		case 14:
			tokentree_walk_WalkSwitch.walkSwitch(stream,parent);
			break;
		case 20:
			tokentree_walk_WalkTry.walkTry(stream,parent);
			break;
		case 22:
			if(parent.is(haxeparser_TokenDef.Dot)) {
				var newChild = stream.consumeToken();
				parent.addChild(newChild);
				tokentree_walk_WalkStatement.walkStatementContinue(stream,newChild);
			} else {
				tokentree_walk_WalkNew.walkNew(stream,parent);
			}
			break;
		default:
			return true;
		}
	} else {
		return true;
	}
	return false;
};
tokentree_walk_WalkStatement.findQuestionParent = function(token) {
	var parent = token;
	while(parent != null && parent.tok != null) {
		var _g = parent.tok;
		switch(_g._hx_index) {
		case 13:
			return null;
		case 20:
			return parent;
		default:
		}
		parent = parent.parent;
	}
	return null;
};
var tokentree_walk_WalkSwitch = function() { };
$hxClasses["tokentree.walk.WalkSwitch"] = tokentree_walk_WalkSwitch;
tokentree_walk_WalkSwitch.__name__ = "tokentree.walk.WalkSwitch";
tokentree_walk_WalkSwitch.walkSwitch = function(stream,parent) {
	var switchTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdSwitch));
	parent.addChild(switchTok);
	tokentree_walk_WalkComment.walkComment(stream,switchTok);
	tokentree_walk_WalkStatement.walkStatement(stream,switchTok);
	tokentree_walk_WalkComment.walkComment(stream,switchTok);
	var brOpen = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
	switchTok.addChild(brOpen);
	tokentree_walk_WalkSwitch.walkSwitchCases(stream,brOpen);
	brOpen.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
};
tokentree_walk_WalkSwitch.walkSwitchCases = function(stream,parent) {
	var progress = new tokentree_TokenStreamProgress(stream);
	_hx_loop1: while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 15:case 16:
				tokentree_walk_WalkSwitch.walkCase(stream,parent);
				break;
			default:
				tokentree_walk_WalkStatement.walkStatement(stream,parent);
			}
			break;
		case 2:
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkSwitch.walkSwitchCases);
			break;
		case 6:case 7:
			tokentree_walk_WalkComment.walkComment(stream,parent);
			break;
		case 17:
			break _hx_loop1;
		default:
			tokentree_walk_WalkStatement.walkStatement(stream,parent);
		}
	}
};
tokentree_walk_WalkSwitch.walkCase = function(stream,parent) {
	tokentree_walk_WalkComment.walkComment(stream,parent);
	var caseTok = stream.consumeToken();
	parent.addChild(caseTok);
	tokentree_walk_WalkSwitch.walkCaseExpr(stream,caseTok);
	var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
	caseTok.addChild(dblDot);
	var progress = new tokentree_TokenStreamProgress(stream);
	while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 15:case 16:
				return;
			default:
				tokentree_walk_WalkStatement.walkStatement(stream,dblDot);
			}
			break;
		case 2:
			tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkSwitch.walkSwitchCases);
			var sharp = parent.getLastChild();
			if(sharp.children.length < 2) {
				continue;
			}
			var body = sharp.children[1];
			if(body.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCase))) {
				continue;
			}
			parent.children.pop();
			dblDot.addChild(sharp);
			break;
		case 6:case 7:
			tokentree_walk_WalkComment.walkComment(stream,parent);
			break;
		case 16:
			tokentree_walk_WalkBlock.walkBlock(stream,dblDot);
			break;
		case 17:
			return;
		default:
			tokentree_walk_WalkStatement.walkStatement(stream,dblDot);
		}
	}
};
tokentree_walk_WalkSwitch.walkCaseExpr = function(stream,parent) {
	var progress = new tokentree_TokenStreamProgress(stream);
	while(progress.streamHasChanged()) {
		var _g = stream.token();
		switch(_g._hx_index) {
		case 0:
			switch(_g.k._hx_index) {
			case 0:
				tokentree_walk_WalkFunction.walkFunction(stream,parent,[]);
				break;
			case 3:
				tokentree_walk_WalkIf.walkIf(stream,parent);
				break;
			default:
				var child = stream.consumeToken();
				parent.addChild(child);
				tokentree_walk_WalkSwitch.walkCaseExpr(stream,child);
			}
			break;
		case 5:
			switch(_g.op._hx_index) {
			case 3:
				var child1 = stream.consumeOpSub();
				parent.addChild(child1);
				tokentree_walk_WalkSwitch.walkCaseExpr(stream,child1);
				break;
			case 7:
				var child2 = stream.consumeOpGt();
				parent.addChild(child2);
				tokentree_walk_WalkSwitch.walkCaseExpr(stream,child2);
				break;
			default:
				var child3 = stream.consumeToken();
				parent.addChild(child3);
				tokentree_walk_WalkSwitch.walkCaseExpr(stream,child3);
			}
			break;
		case 6:case 7:
			var child4 = stream.consumeToken();
			parent.addChild(child4);
			break;
		case 14:
			tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,parent);
			break;
		case 9:case 11:case 15:case 17:case 19:
			return;
		case 16:
			tokentree_walk_WalkBlock.walkBlock(stream,parent);
			break;
		case 18:
			tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
			break;
		default:
			var child5 = stream.consumeToken();
			parent.addChild(child5);
			tokentree_walk_WalkSwitch.walkCaseExpr(stream,child5);
		}
	}
};
var tokentree_walk_WalkTry = function() { };
$hxClasses["tokentree.walk.WalkTry"] = tokentree_walk_WalkTry;
tokentree_walk_WalkTry.__name__ = "tokentree.walk.WalkTry";
tokentree_walk_WalkTry.walkTry = function(stream,parent) {
	var tryTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdTry));
	parent.addChild(tryTok);
	tokentree_walk_WalkBlock.walkBlock(stream,tryTok);
	while(stream.is(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCatch))) tokentree_walk_WalkTry.walkCatch(stream,tryTok);
};
tokentree_walk_WalkTry.walkCatch = function(stream,parent) {
	var catchTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdCatch));
	parent.addChild(catchTok);
	tokentree_walk_WalkPOpen.walkPOpen(stream,catchTok);
	tokentree_walk_WalkComment.walkComment(stream,catchTok);
	tokentree_walk_WalkBlock.walkBlock(stream,catchTok);
};
var tokentree_walk_WalkType = function() { };
$hxClasses["tokentree.walk.WalkType"] = tokentree_walk_WalkType;
tokentree_walk_WalkType.__name__ = "tokentree.walk.WalkType";
tokentree_walk_WalkType.walkType = function(stream,parent,prefixes) {
	var _g = stream.token();
	if(_g._hx_index == 0) {
		switch(_g.k._hx_index) {
		case 1:
			tokentree_walk_WalkClass.walkClass(stream,parent,prefixes);
			break;
		case 26:
			tokentree_walk_WalkEnum.walkEnum(stream,parent,prefixes);
			break;
		case 27:
			tokentree_walk_WalkInterface.walkInterface(stream,parent,prefixes);
			break;
		case 31:
			tokentree_walk_WalkTypedef.walkTypedef(stream,parent,prefixes);
			break;
		case 39:
			tokentree_walk_WalkAbstract.walkAbstract(stream,parent,prefixes);
			break;
		default:
		}
	}
};
var tokentree_walk_WalkTypeNameDef = function() { };
$hxClasses["tokentree.walk.WalkTypeNameDef"] = tokentree_walk_WalkTypeNameDef;
tokentree_walk_WalkTypeNameDef.__name__ = "tokentree.walk.WalkTypeNameDef";
tokentree_walk_WalkTypeNameDef.walkTypeNameDef = function(stream,parent) {
	tokentree_walk_WalkComment.walkComment(stream,parent);
	var tempStore = tokentree_walk_WalkAt.walkAts(stream);
	if(stream.is(haxeparser_TokenDef.Question)) {
		var questTok = stream.consumeTokenDef(haxeparser_TokenDef.Question);
		parent.addChild(questTok);
		parent = questTok;
	}
	var name;
	var bAdd = true;
	var _g = stream.token();
	switch(_g._hx_index) {
	case 0:
		switch(_g.k._hx_index) {
		case 22:case 25:case 40:
			name = stream.consumeToken();
			break;
		default:
			name = stream.consumeToken();
		}
		break;
	case 1:
		name = stream.consumeConst();
		break;
	case 2:
		tokentree_walk_WalkSharp.walkSharp(stream,parent,tokentree_walk_WalkStatement.walkStatement);
		if(!stream.hasMore()) {
			return parent.getFirstChild();
		}
		var _g1 = stream.token();
		if(_g1._hx_index == 1) {
			name = stream.consumeConst();
		} else {
			return parent.getFirstChild();
		}
		break;
	case 3:
		name = stream.consumeToken();
		break;
	case 14:
		tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,parent);
		return parent.getFirstChild();
	case 16:
		tokentree_walk_WalkTypedefBody.walkTypedefBody(stream,parent);
		return parent.getFirstChild();
	case 18:
		name = tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
		if(stream.is(haxeparser_TokenDef.Question)) {
			tokentree_walk_WalkQuestion.walkQuestion(stream,name);
		}
		bAdd = false;
		break;
	default:
		name = stream.consumeToken();
	}
	var _g11 = 0;
	while(_g11 < tempStore.length) {
		var tok = tempStore[_g11];
		++_g11;
		name.addChild(tok);
	}
	if(bAdd) {
		parent.addChild(name);
	}
	tokentree_walk_WalkTypeNameDef.walkTypeNameDefContinue(stream,name);
	return name;
};
tokentree_walk_WalkTypeNameDef.walkTypeNameDefContinue = function(stream,parent) {
	if(stream.is(haxeparser_TokenDef.Dot)) {
		var dot = stream.consumeTokenDef(haxeparser_TokenDef.Dot);
		parent.addChild(dot);
		tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,dot);
		return;
	}
	if(stream.is(haxeparser_TokenDef.Arrow)) {
		var arrow = stream.consumeTokenDef(haxeparser_TokenDef.Arrow);
		parent.addChild(arrow);
		tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,arrow);
		return;
	}
	if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt))) {
		tokentree_walk_WalkLtGt.walkLtGt(stream,parent);
	}
	if(stream.is(haxeparser_TokenDef.BkOpen)) {
		tokentree_walk_WalkArrayAccess.walkArrayAccess(stream,parent);
	}
	tokentree_walk_WalkComment.walkComment(stream,parent);
};
var tokentree_walk_WalkTypedef = function() { };
$hxClasses["tokentree.walk.WalkTypedef"] = tokentree_walk_WalkTypedef;
tokentree_walk_WalkTypedef.__name__ = "tokentree.walk.WalkTypedef";
tokentree_walk_WalkTypedef.walkTypedef = function(stream,parent,prefixes) {
	var typeTok = stream.consumeToken();
	parent.addChild(typeTok);
	var name = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,typeTok);
	var _g = 0;
	while(_g < prefixes.length) {
		var prefix = prefixes[_g];
		++_g;
		name.addChild(prefix);
	}
	var assign = stream.consumeTokenDef(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
	name.addChild(assign);
	tokentree_walk_WalkTypedefBody.walkTypedefBody(stream,assign);
};
var tokentree_walk_WalkTypedefBody = function() { };
$hxClasses["tokentree.walk.WalkTypedefBody"] = tokentree_walk_WalkTypedefBody;
tokentree_walk_WalkTypedefBody.__name__ = "tokentree.walk.WalkTypedefBody";
tokentree_walk_WalkTypedefBody.walkTypedefBody = function(stream,parent) {
	if(stream.is(haxeparser_TokenDef.BrOpen)) {
		var openTok = stream.consumeTokenDef(haxeparser_TokenDef.BrOpen);
		parent.addChild(openTok);
		var progress = new tokentree_TokenStreamProgress(stream);
		_hx_loop1: while(progress.streamHasChanged()) {
			var _g = stream.token();
			switch(_g._hx_index) {
			case 6:case 7:
				tokentree_walk_WalkComment.walkComment(stream,openTok);
				break;
			case 17:
				break _hx_loop1;
			default:
				tokentree_walk_WalkFieldDef.walkFieldDef(stream,openTok);
			}
			if(stream.is(haxeparser_TokenDef.BrClose)) {
				break;
			}
			tokentree_walk_WalkFieldDef.walkFieldDef(stream,openTok);
		}
		openTok.addChild(stream.consumeTokenDef(haxeparser_TokenDef.BrClose));
	} else {
		tokentree_walk_WalkTypedefBody.walkTypedefAlias(stream,parent);
	}
};
tokentree_walk_WalkTypedefBody.walkTypedefAlias = function(stream,parent) {
	var newParent;
	if(stream.is(haxeparser_TokenDef.POpen)) {
		newParent = tokentree_walk_WalkPOpen.walkPOpen(stream,parent);
	} else {
		newParent = tokentree_walk_WalkTypeNameDef.walkTypeNameDef(stream,parent);
	}
	if(stream.is(haxeparser_TokenDef.Arrow)) {
		var arrowTok = stream.consumeTokenDef(haxeparser_TokenDef.Arrow);
		newParent.addChild(arrowTok);
		tokentree_walk_WalkTypedefBody.walkTypedefAlias(stream,arrowTok);
	}
};
var tokentree_walk_WalkVar = function() { };
$hxClasses["tokentree.walk.WalkVar"] = tokentree_walk_WalkVar;
tokentree_walk_WalkVar.__name__ = "tokentree.walk.WalkVar";
tokentree_walk_WalkVar.walkVar = function(stream,parent,prefixes) {
	var name = null;
	var varTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdVar));
	parent.addChild(varTok);
	tokentree_walk_WalkComment.walkComment(stream,parent);
	var progress = new tokentree_TokenStreamProgress(stream);
	while(progress.streamHasChanged()) {
		tokentree_walk_WalkComment.walkComment(stream,parent);
		name = stream.consumeConstIdent();
		varTok.addChild(name);
		tokentree_walk_WalkComment.walkComment(stream,name);
		if(stream.is(haxeparser_TokenDef.POpen)) {
			tokentree_walk_WalkPOpen.walkPOpen(stream,name);
		}
		var _g = 0;
		while(_g < prefixes.length) {
			var stored = prefixes[_g];
			++_g;
			name.addChild(stored);
		}
		if(stream.is(haxeparser_TokenDef.DblDot)) {
			var dblDot = stream.consumeTokenDef(haxeparser_TokenDef.DblDot);
			name.addChild(dblDot);
			tokentree_walk_WalkTypedefBody.walkTypedefAlias(stream,dblDot);
		}
		if(stream.is(haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign))) {
			tokentree_walk_WalkStatement.walkStatement(stream,name);
		}
		if(stream.is(haxeparser_TokenDef.Comma)) {
			var comma = stream.consumeTokenDef(haxeparser_TokenDef.Comma);
			name.addChild(comma);
			continue;
		}
		break;
	}
	if(stream.is(haxeparser_TokenDef.Semicolon)) {
		name.addChild(stream.consumeTokenDef(haxeparser_TokenDef.Semicolon));
	}
};
var tokentree_walk_WalkWhile = function() { };
$hxClasses["tokentree.walk.WalkWhile"] = tokentree_walk_WalkWhile;
tokentree_walk_WalkWhile.__name__ = "tokentree.walk.WalkWhile";
tokentree_walk_WalkWhile.walkWhile = function(stream,parent) {
	var whileTok = stream.consumeTokenDef(haxeparser_TokenDef.Kwd(haxeparser_Keyword.KwdWhile));
	parent.addChild(whileTok);
	tokentree_walk_WalkComment.walkComment(stream,whileTok);
	tokentree_walk_WalkPOpen.walkPOpen(stream,whileTok);
	tokentree_walk_WalkComment.walkComment(stream,whileTok);
	tokentree_walk_WalkBlock.walkBlock(stream,whileTok);
};
var vscode_CodeAction = require("vscode").CodeAction;
var vscode_CodeActionKind = require("vscode").CodeActionKind;
var vscode_Diagnostic = require("vscode").Diagnostic;
var vscode__$DiagnosticSeverity_DiagnosticSeverity_$Impl_$ = require("vscode").DiagnosticSeverity;
var vscode_Position = require("vscode").Position;
var vscode_Range = require("vscode").Range;
var vscode_Uri = require("vscode").Uri;
var vscode_WorkspaceEdit = require("vscode").WorkspaceEdit;
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
CompileTimeClassList.__meta__ = { obj : { classLists : [["null,true,checkstyle.checks.Check","checkstyle.checks.block.ConditionalCompilationCheck,checkstyle.checks.block.EmptyBlockCheck,checkstyle.checks.block.LeftCurlyCheck,checkstyle.checks.block.NeedBracesCheck,checkstyle.checks.block.RightCurlyCheck,checkstyle.checks.coding.AvoidInlineConditionalsCheck,checkstyle.checks.coding.DefaultComesLastCheck,checkstyle.checks.coding.HiddenFieldCheck,checkstyle.checks.coding.InnerAssignmentCheck,checkstyle.checks.coding.MagicNumberCheck,checkstyle.checks.coding.MultipleVariableDeclarationsCheck,checkstyle.checks.coding.NestedForDepthCheck,checkstyle.checks.coding.NestedIfDepthCheck,checkstyle.checks.coding.NestedTryDepthCheck,checkstyle.checks.coding.NullableParameterCheck,checkstyle.checks.coding.ReturnCountCheck,checkstyle.checks.coding.SimplifyBooleanExpressionCheck,checkstyle.checks.coding.SimplifyBooleanReturnCheck,checkstyle.checks.coding.TraceCheck,checkstyle.checks.coding.UnusedLocalVarCheck,checkstyle.checks.coding.VariableInitialisationCheck,checkstyle.checks.comments.DocCommentStyleCheck,checkstyle.checks.comments.FieldDocCommentCheck,checkstyle.checks.comments.TODOCommentCheck,checkstyle.checks.comments.TypeDocCommentCheck,checkstyle.checks.design.EmptyPackageCheck,checkstyle.checks.design.InterfaceCheck,checkstyle.checks.design.UnnecessaryConstructorCheck,checkstyle.checks.imports.AvoidStarImportCheck,checkstyle.checks.imports.UnusedImportCheck,checkstyle.checks.literal.ArrayLiteralCheck,checkstyle.checks.literal.ERegLiteralCheck,checkstyle.checks.literal.HexadecimalLiteralCheck,checkstyle.checks.literal.MultipleStringLiteralsCheck,checkstyle.checks.literal.StringLiteralCheck,checkstyle.checks.meta.RedundantAccessMetaBase,checkstyle.checks.meta.RedundantAccessMetaCheck,checkstyle.checks.meta.RedundantAllowMetaCheck,checkstyle.checks.metrics.CyclomaticComplexityCheck,checkstyle.checks.modifier.ModifierOrderCheck,checkstyle.checks.modifier.PublicAccessorCheck,checkstyle.checks.modifier.RedundantModifierCheck,checkstyle.checks.naming.CatchParameterNameCheck,checkstyle.checks.naming.NameCheckBase,checkstyle.checks.naming.ConstantNameCheck,checkstyle.checks.naming.ListenerNameCheck,checkstyle.checks.naming.LocalVariableNameCheck,checkstyle.checks.naming.MemberNameCheck,checkstyle.checks.naming.MethodNameCheck,checkstyle.checks.naming.ParameterNameCheck,checkstyle.checks.naming.TypeNameCheck,checkstyle.checks.size.FileLengthCheck,checkstyle.checks.size.LineLengthCheck,checkstyle.checks.size.MethodCountCheck,checkstyle.checks.size.MethodLengthCheck,checkstyle.checks.size.ParameterNumberCheck,checkstyle.checks.type.AnonymousCheck,checkstyle.checks.type.DynamicCheck,checkstyle.checks.type.ReturnCheck,checkstyle.checks.type.TypeCheck,checkstyle.checks.whitespace.ArrayAccessCheck,checkstyle.checks.whitespace.LineCheckBase,checkstyle.checks.whitespace.EmptyLinesCheck,checkstyle.checks.whitespace.ExtendedEmptyLinesCheck,checkstyle.checks.whitespace.IndentationCharacterCheck,checkstyle.checks.whitespace.IndentationCheck,checkstyle.checks.whitespace.WhitespaceCheckBase,checkstyle.checks.whitespace.OperatorWhitespaceCheck,checkstyle.checks.whitespace.WrapCheckBase,checkstyle.checks.whitespace.OperatorWrapCheck,checkstyle.checks.whitespace.SeparatorWhitespaceCheck,checkstyle.checks.whitespace.SeparatorWrapCheck,checkstyle.checks.whitespace.SpacingCheck,checkstyle.checks.whitespace.TabForAligningCheck,checkstyle.checks.whitespace.TrailingWhitespaceCheck,checkstyle.checks.whitespace.WhitespaceAfterCheck,checkstyle.checks.whitespace.WhitespaceAroundCheck"]]}};
Main.MAIN_CONFIG_KEY = "haxecheckstyle";
Main.CONFIG_OPTION = "configurationFile";
Main.SOURCE_FOLDERS = "sourceFolders";
Main.CHECKSTYLE_JSON = "checkstyle.json";
Main.CHECKSTYLE_EXLCUDE_JSON = "checkstyle-excludes.json";
checkstyle_Checker.BAD_OFFSET = "Bad offset";
checkstyle_Main.DEFAULT_CONFIG = "checkstyle.json";
checkstyle_Main.DEFAULT_EXCLUDE_CONFIG = "checkstyle-exclude.json";
checkstyle_Main.REPORT_TYPE = "text";
checkstyle_Main.XML_PATH = "check-style-report.xml";
checkstyle_Main.JSON_PATH = "check-style-report.json";
checkstyle_Main.STYLE = "";
checkstyle_Main.SHOW_PROGRESS = false;
checkstyle_Main.EXIT_CODE = false;
checkstyle_Main.NO_STYLE = false;
checkstyle_Main.CODE_CLIMATE_REPORTER = "codeclimate";
checkstyle_Main.SHOW_MISSING_CHECKS = false;
checkstyle_checks_block_ConditionalCompilationCheck.__meta__ = { obj : { name : ["ConditionalCompilation"], desc : ["Checks placement and indentation of conditional compilation flags."]}};
checkstyle_checks_block_EmptyBlockCheck.__meta__ = { obj : { name : ["EmptyBlock"], desc : ["Checks for empty blocks. The policy to verify is specified using the property `option`."]}};
checkstyle_checks_block_LeftCurlyCheck.__meta__ = { obj : { name : ["LeftCurly"], desc : ["Checks for the placement of left curly braces (`{`) for code blocks. The policy to verify is specified using the property `option`."]}};
checkstyle_checks_block_NeedBracesCheck.__meta__ = { obj : { name : ["NeedBraces"], desc : ["Checks for braces on function, if, for and while statements. It has an option to allow single line statements without braces using property `allowSingleLineStatement` like `if (b) return 10;`."]}};
checkstyle_checks_block_RightCurlyCheck.__meta__ = { obj : { name : ["RightCurly"], desc : ["Checks the placement of right curly braces (`}`) for code blocks. The policy to verify is specified using the property `option`."]}};
checkstyle_checks_coding_AvoidInlineConditionalsCheck.__meta__ = { obj : { name : ["AvoidInlineConditionals"], desc : ["Detects inline conditionals. Useful for developers who find inline conditionals hard to read and want forbid them."]}};
checkstyle_checks_coding_DefaultComesLastCheck.__meta__ = { obj : { name : ["DefaultComesLast"], desc : ["Check that the `default` is after all the cases in a `switch` statement. Haxe allows `default` anywhere within the `switch` statement. But it is more readable if it comes after the last `case`."]}};
checkstyle_checks_coding_HiddenFieldCheck.__meta__ = { obj : { name : ["HiddenField"], desc : ["Checks that a local variable or a parameter does not shadow a field that is defined in the same class."]}};
checkstyle_checks_coding_HiddenFieldCheck.MAX_FIELD_LEVEL = 3;
checkstyle_checks_coding_InnerAssignmentCheck.__meta__ = { obj : { name : ["InnerAssignment"], desc : ["Checks for assignments in subexpressions, such as in `if ((a=b) > 0) return;`."]}};
checkstyle_checks_coding_MagicNumberCheck.__meta__ = { obj : { name : ["MagicNumber"], desc : ["Checks that there are no magic numbers. By default, -1, 0, 1, and 2 are not considered to be magic numbers."]}};
checkstyle_checks_coding_MultipleVariableDeclarationsCheck.__meta__ = { obj : { name : ["MultipleVariableDeclarations"], desc : ["Checks that each variable declaration is in its own statement and on its own line."]}};
checkstyle_checks_coding_NestedForDepthCheck.__meta__ = { obj : { name : ["NestedForDepth"], desc : ["Restricts nested loop blocks to a specified depth (default = 1)."]}};
checkstyle_checks_coding_NestedIfDepthCheck.__meta__ = { obj : { name : ["NestedIfDepth"], desc : ["Restricts nested `if-else` blocks to a specified depth (default = 1)."]}};
checkstyle_checks_coding_NestedTryDepthCheck.__meta__ = { obj : { name : ["NestedTryDepth"], desc : ["Restricts nested `try` blocks to a specified depth (default = 1)."]}};
checkstyle_checks_coding_NullableParameterCheck.__meta__ = { obj : { name : ["NullableParameter"], desc : ["Enforces a style for nullable parameters."]}};
checkstyle_checks_coding_ReturnCountCheck.__meta__ = { obj : { name : ["ReturnCount"], desc : ["Restricts the number of return statements in methods (2 by default). Ignores methods that matches `ignoreFormat` regex property."]}};
checkstyle_checks_coding_SimplifyBooleanExpressionCheck.__meta__ = { obj : { name : ["SimplifyBooleanExpression"], desc : ["Checks for over-complicated boolean expressions. Finds code like `if (b == true), b || true, !false`, etc."]}};
checkstyle_checks_coding_SimplifyBooleanReturnCheck.__meta__ = { obj : { name : ["SimplifyBooleanReturn"], desc : ["Checks for over-complicated boolean return statements."]}};
checkstyle_checks_coding_TraceCheck.__meta__ = { obj : { name : ["Trace"], desc : ["Checks for trace calls in code."]}};
checkstyle_checks_coding_UnusedLocalVarCheck.__meta__ = { obj : { name : ["UnusedLocalVar"], desc : ["Checks for unused local variables."]}};
checkstyle_checks_coding_VariableInitialisationCheck.__meta__ = { obj : { name : ["VariableInitialisation"], desc : ["Checks for instance variables that are initialised at class level."]}};
checkstyle_checks_comments_DocCommentStyleCheck.__meta__ = { obj : { name : ["DocCommentStyle"], desc : ["Checks code documentation style (/**…**/ vs /*…*/)"]}};
checkstyle_checks_comments_FieldDocCommentCheck.__meta__ = { obj : { name : ["FieldDocComment"], desc : ["Checks code documentation on fields"]}};
checkstyle_checks_comments_TODOCommentCheck.__meta__ = { obj : { name : ["TODOComment"], desc : ["A check for TODO/FIXME/HACK/XXX/BUG comments. The format can be customised by changing `format` property."]}};
checkstyle_checks_comments_TypeDocCommentCheck.__meta__ = { obj : { name : ["TypeDocComment"], desc : ["Checks code documentation on type level"]}};
checkstyle_checks_design_EmptyPackageCheck.__meta__ = { obj : { name : ["EmptyPackage"], desc : ["Checks for empty package names."]}};
checkstyle_checks_design_InterfaceCheck.__meta__ = { obj : { name : ["Interface"], desc : ["Checks and enforces interface style. Either to allow properties and methods or just methods. Has an option to `allowMarkerInterfaces`."]}};
checkstyle_checks_design_UnnecessaryConstructorCheck.__meta__ = { obj : { name : ["UnnecessaryConstructor"], desc : ["Checks for unnecessary constructor in classes that contain only static methods or fields."]}};
checkstyle_checks_imports_AvoidStarImportCheck.__meta__ = { obj : { name : ["AvoidStarImport"], desc : ["Checks for import statements that use the * notation and using directives."]}};
checkstyle_checks_imports_UnusedImportCheck.__meta__ = { obj : { name : ["UnusedImport"], desc : ["Checks for unused or duplicate imports."]}};
checkstyle_checks_literal_ArrayLiteralCheck.__meta__ = { obj : { name : ["ArrayLiteral","ArrayInstantiation"], desc : ["Checks if the array is instantiated using [] which is shorter and cleaner, not with new."]}};
checkstyle_checks_literal_ERegLiteralCheck.__meta__ = { obj : { name : ["ERegLiteral","ERegInstantiation"], desc : ["Checks for usage of EReg literals (between ~/ and /) instead of new."]}};
checkstyle_checks_literal_HexadecimalLiteralCheck.__meta__ = { obj : { name : ["HexadecimalLiteral","HexadecimalLiterals"], desc : ["Checks the letter case of hexadecimal literals."]}};
checkstyle_checks_literal_MultipleStringLiteralsCheck.__meta__ = { obj : { name : ["MultipleStringLiterals"], desc : ["Checks for multiple occurrences of the same string literal within a single file. Code duplication makes maintenance more difficult, so it's better to replace the multiple occurrences with a constant."]}};
checkstyle_checks_literal_StringLiteralCheck.__meta__ = { obj : { name : ["StringLiteral"], desc : ["Checks for single or double quote string literals."]}};
checkstyle_checks_meta_RedundantAccessMetaBase.__meta__ = { obj : { ignore : ["Base class for name checks"]}};
checkstyle_checks_meta_RedundantAccessMetaCheck.__meta__ = { obj : { name : ["RedundantAccessMeta"], desc : ["Checks for redundant @:access metadata"]}};
checkstyle_checks_meta_RedundantAllowMetaCheck.__meta__ = { obj : { name : ["RedundantAllowMeta"], desc : ["Checks for redundant @:allow metadata"]}};
checkstyle_checks_metrics_CyclomaticComplexityCheck.__meta__ = { obj : { name : ["CyclomaticComplexity"], desc : ["Checks the complexity of methods using McCabe simplified cyclomatic complexity check. Complexity levels can be customised using `thresholds` property."]}};
checkstyle_checks_metrics_CyclomaticComplexityCheck.DEFAULT_COMPLEXITY_WARNING = 20;
checkstyle_checks_metrics_CyclomaticComplexityCheck.DEFAULT_COMPLEXITY_ERROR = 25;
checkstyle_checks_modifier_ModifierOrderCheck.__meta__ = { obj : { name : ["ModifierOrder","AccessOrder"], desc : ["Checks that the order of modifiers conforms to the standards."]}};
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.PUBLIC_PRIVATE = "PUBLIC_PRIVATE";
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.INLINE = "INLINE";
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.STATIC = "STATIC";
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.OVERRIDE = "OVERRIDE";
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.MACRO = "MACRO";
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.DYNAMIC = "DYNAMIC";
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.EXTERN = "EXTERN";
checkstyle_checks_modifier__$ModifierOrderCheck_ModifierOrderCheckModifier_$Impl_$.FINAL = "FINAL";
checkstyle_checks_modifier_PublicAccessorCheck.__meta__ = { obj : { name : ["PublicAccessor"], desc : ["Checks for public accessors."]}};
checkstyle_checks_modifier_RedundantModifierCheck.__meta__ = { obj : { name : ["RedundantModifier","PublicPrivate"], desc : ["Checks for redundant modifiers."]}};
checkstyle_checks_naming_CatchParameterNameCheck.__meta__ = { obj : { name : ["CatchParameterName"], desc : ["Checks that catch parameter names conform to a format specified by the `format` property."]}};
checkstyle_checks_naming_NameCheckBase.__meta__ = { obj : { ignore : ["Base class for name checks"]}};
checkstyle_checks_naming_ConstantNameCheck.__meta__ = { obj : { name : ["ConstantName"], desc : ["Checks that the constants (static / static inline with initialisation) conform to a format specified by the `format` property."]}};
checkstyle_checks_naming_ListenerNameCheck.__meta__ = { obj : { name : ["ListenerName"], desc : ["Checks the naming conventions of event listener functions specified using `listeners` property."]}};
checkstyle_checks_naming_LocalVariableNameCheck.__meta__ = { obj : { name : ["LocalVariableName"], desc : ["Checks that the local variable names conform to a format specified by the `format` property."]}};
checkstyle_checks_naming_MemberNameCheck.__meta__ = { obj : { name : ["MemberName"], desc : ["Checks that instance variable names conform to a format specified by the `format` property."]}};
checkstyle_checks_naming_MethodNameCheck.__meta__ = { obj : { name : ["MethodName"], desc : ["Checks that method names conform to a format specified by the `format` property."]}};
checkstyle_checks_naming_ParameterNameCheck.__meta__ = { obj : { name : ["ParameterName"], desc : ["Checks that parameter names conform to a format specified by the `format` property."]}};
checkstyle_checks_naming_TypeNameCheck.__meta__ = { obj : { name : ["TypeName"], desc : ["Checks that type names conform to a format specified by the `format` property."]}};
checkstyle_checks_size_FileLengthCheck.__meta__ = { obj : { name : ["FileLength"], desc : ["Checks for long source files. If a source file becomes very long it is hard to understand. Therefore long classes should usually be refactored into several individual classes that focus on a specific task."]}};
checkstyle_checks_size_FileLengthCheck.DEFAULT_MAX_LENGTH = 2000;
checkstyle_checks_size_LineLengthCheck.__meta__ = { obj : { name : ["LineLength"], desc : ["Checks for long lines. Long lines are hard to read."]}};
checkstyle_checks_size_LineLengthCheck.DEFAULT_MAX_LENGTH = 160;
checkstyle_checks_size_MethodCountCheck.__meta__ = { obj : { name : ["MethodCount"], desc : ["Checks the number of methods declared in each type. This includes the number of each scope (`private` and `public`) as well as an overall total."]}};
checkstyle_checks_size_MethodCountCheck.DEFAULT_MAX_COUNT = 100;
checkstyle_checks_size_MethodLengthCheck.__meta__ = { obj : { name : ["MethodLength"], desc : ["Checks for long methods. If a method becomes very long it is hard to understand. Therefore long methods should usually be refactored into several individual methods that focus on a specific task."]}};
checkstyle_checks_size_MethodLengthCheck.DEFAULT_MAX_LENGTH = 50;
checkstyle_checks_size_ParameterNumberCheck.__meta__ = { obj : { name : ["ParameterNumber"], desc : ["Checks the number of parameters of a method."]}};
checkstyle_checks_size_ParameterNumberCheck.DEFAULT_MAX_PARAMS = 7;
checkstyle_checks_type_AnonymousCheck.__meta__ = { obj : { name : ["Anonymous"], desc : ["Check to find any anonymous type structures used."]}};
checkstyle_checks_type_DynamicCheck.__meta__ = { obj : { name : ["Dynamic"], desc : ["Checks for use of Dynamic type anywhere in the code."]}};
checkstyle_checks_type_ReturnCheck.__meta__ = { obj : { name : ["Return"], desc : ["Warns if Void is used for return or if return type is not specified when returning."]}};
checkstyle_checks_type_TypeCheck.__meta__ = { obj : { name : ["Type"], desc : ["Checks if type is specified or not for member variables."]}};
checkstyle_checks_whitespace_ArrayAccessCheck.__meta__ = { obj : { name : ["ArrayAccess"], desc : ["Checks for spaces before array access or inside array elements. Finds code like `a [0], a[ 0]`, etc."]}};
checkstyle_checks_whitespace_LineCheckBase.__meta__ = { obj : { ignore : ["base class for line based whitespace checks"]}};
checkstyle_checks_whitespace_EmptyLinesCheck.__meta__ = { obj : { name : ["EmptyLines"], desc : ["Checks for consecutive empty lines (default is 1). Also have options to check empty line separators after package, single-line and multi-line comments and class/interface/abstract declarations."]}};
checkstyle_checks_whitespace_ExtendedEmptyLinesCheck.__meta__ = { obj : { name : ["ExtendedEmptyLines"], desc : ["Checks for consecutive empty lines."]}};
checkstyle_checks_whitespace_IndentationCharacterCheck.__meta__ = { obj : { name : ["IndentationCharacter"], desc : ["Checks indentation character (tab/space, default is tab)."]}};
checkstyle_checks_whitespace_IndentationCheck.__meta__ = { obj : { name : ["Indentation"], desc : ["Checks correct indentation"]}};
checkstyle_checks_whitespace_WhitespaceCheckBase.__meta__ = { obj : { ignore : ["base class for OperatorWhitespace and SeparatorWhitespace"]}};
checkstyle_checks_whitespace_OperatorWhitespaceCheck.__meta__ = { obj : { name : ["OperatorWhitespace"], desc : ["Checks that whitespace is present or absent around a operators."]}};
checkstyle_checks_whitespace_WrapCheckBase.__meta__ = { obj : { ignore : ["base class for OperatorWrap and SeparatorWrap"]}};
checkstyle_checks_whitespace_OperatorWrapCheck.__meta__ = { obj : { name : ["OperatorWrap"], desc : ["Checks line wrapping with operators."]}};
checkstyle_checks_whitespace_SeparatorWhitespaceCheck.__meta__ = { obj : { name : ["SeparatorWhitespace"], desc : ["Checks that whitespace is present or absent around a separators."]}};
checkstyle_checks_whitespace_SeparatorWrapCheck.__meta__ = { obj : { name : ["SeparatorWrap"], desc : ["Checks line wrapping with separators."]}};
checkstyle_checks_whitespace_SpacingCheck.__meta__ = { obj : { name : ["Spacing"], desc : ["Spacing check on if, for, while, switch, try statements and around operators."]}};
checkstyle_checks_whitespace_TabForAligningCheck.__meta__ = { obj : { name : ["TabForAligning"], desc : ["Checks if there are any tabs in the middle of a line."]}};
checkstyle_checks_whitespace_TrailingWhitespaceCheck.__meta__ = { obj : { name : ["TrailingWhitespace"], desc : ["Checks if there are any trailing white spaces."]}};
checkstyle_checks_whitespace_WhitespaceAfterCheck.__meta__ = { obj : { name : ["WhitespaceAfter"], desc : ["Checks for whitespace after a token."]}};
checkstyle_checks_whitespace_WhitespaceAroundCheck.__meta__ = { obj : { name : ["WhitespaceAround"], desc : ["Checks that a token is surrounded by whitespace."]}};
checkstyle_config_ExcludeManager.INSTANCE = new checkstyle_config_ExcludeManager();
checkstyle_reporter_CodeClimateReporter.INFO = "info";
checkstyle_reporter_CodeClimateReporter.NORMAL = "normal";
checkstyle_reporter_CodeClimateReporter.CRITICAL = "critical";
checkstyle_reporter_CodeClimateReporter.REMEDIATION_BASE = 50000;
checkstyle_reporter_ReporterManager.INSTANCE = new checkstyle_reporter_ReporterManager();
checkstyle_reporter_ReporterManager.SHOW_PARSE_ERRORS = false;
checkstyle_reporter_XMLReporter.ENTITY_MAP = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["&"] != null) {
		_g.setReserved("&","&amp;");
	} else {
		_g.h["&"] = "&amp;";
	}
	if(__map_reserved["<"] != null) {
		_g.setReserved("<","&lt;");
	} else {
		_g.h["<"] = "&lt;";
	}
	if(__map_reserved[">"] != null) {
		_g.setReserved(">","&gt;");
	} else {
		_g.h[">"] = "&gt;";
	}
	if(__map_reserved["\""] != null) {
		_g.setReserved("\"","&quot;");
	} else {
		_g.h["\""] = "&quot;";
	}
	if(__map_reserved["'"] != null) {
		_g.setReserved("'","&#39;");
	} else {
		_g.h["'"] = "&#39;";
	}
	if(__map_reserved["/"] != null) {
		_g.setReserved("/","&#x2F;");
	} else {
		_g.h["/"] = "&#x2F;";
	}
	$r = _g;
	return $r;
}(this));
checkstyle_reporter_XMLReporter.ENTITY_RE = new EReg("[&<>\"'/]","g");
hxparse_LexEngine.MAX_CODE = 255;
hxparse_LexEngine.EMPTY = [];
hxparse_LexEngine.ALL_CHARS = [{ min : 0, max : 255}];
js_Boot.__toStr = ({ }).toString;
haxeparser_HaxeLexer.keywords = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = haxeparser_Keyword.KwdAbstract;
		if(__map_reserved["abstract"] != null) {
			_g.setReserved("abstract",value);
		} else {
			_g.h["abstract"] = value;
		}
	}
	{
		var value1 = haxeparser_Keyword.KwdBreak;
		if(__map_reserved["break"] != null) {
			_g.setReserved("break",value1);
		} else {
			_g.h["break"] = value1;
		}
	}
	{
		var value2 = haxeparser_Keyword.KwdCase;
		if(__map_reserved["case"] != null) {
			_g.setReserved("case",value2);
		} else {
			_g.h["case"] = value2;
		}
	}
	{
		var value3 = haxeparser_Keyword.KwdCast;
		if(__map_reserved["cast"] != null) {
			_g.setReserved("cast",value3);
		} else {
			_g.h["cast"] = value3;
		}
	}
	{
		var value4 = haxeparser_Keyword.KwdCatch;
		if(__map_reserved["catch"] != null) {
			_g.setReserved("catch",value4);
		} else {
			_g.h["catch"] = value4;
		}
	}
	{
		var value5 = haxeparser_Keyword.KwdClass;
		if(__map_reserved["class"] != null) {
			_g.setReserved("class",value5);
		} else {
			_g.h["class"] = value5;
		}
	}
	{
		var value6 = haxeparser_Keyword.KwdContinue;
		if(__map_reserved["continue"] != null) {
			_g.setReserved("continue",value6);
		} else {
			_g.h["continue"] = value6;
		}
	}
	{
		var value7 = haxeparser_Keyword.KwdDefault;
		if(__map_reserved["default"] != null) {
			_g.setReserved("default",value7);
		} else {
			_g.h["default"] = value7;
		}
	}
	{
		var value8 = haxeparser_Keyword.KwdDo;
		if(__map_reserved["do"] != null) {
			_g.setReserved("do",value8);
		} else {
			_g.h["do"] = value8;
		}
	}
	{
		var value9 = haxeparser_Keyword.KwdDynamic;
		if(__map_reserved["dynamic"] != null) {
			_g.setReserved("dynamic",value9);
		} else {
			_g.h["dynamic"] = value9;
		}
	}
	{
		var value10 = haxeparser_Keyword.KwdElse;
		if(__map_reserved["else"] != null) {
			_g.setReserved("else",value10);
		} else {
			_g.h["else"] = value10;
		}
	}
	{
		var value11 = haxeparser_Keyword.KwdEnum;
		if(__map_reserved["enum"] != null) {
			_g.setReserved("enum",value11);
		} else {
			_g.h["enum"] = value11;
		}
	}
	{
		var value12 = haxeparser_Keyword.KwdExtends;
		if(__map_reserved["extends"] != null) {
			_g.setReserved("extends",value12);
		} else {
			_g.h["extends"] = value12;
		}
	}
	{
		var value13 = haxeparser_Keyword.KwdExtern;
		if(__map_reserved["extern"] != null) {
			_g.setReserved("extern",value13);
		} else {
			_g.h["extern"] = value13;
		}
	}
	{
		var value14 = haxeparser_Keyword.KwdFalse;
		if(__map_reserved["false"] != null) {
			_g.setReserved("false",value14);
		} else {
			_g.h["false"] = value14;
		}
	}
	{
		var value15 = haxeparser_Keyword.KwdFor;
		if(__map_reserved["for"] != null) {
			_g.setReserved("for",value15);
		} else {
			_g.h["for"] = value15;
		}
	}
	{
		var value16 = haxeparser_Keyword.KwdFunction;
		if(__map_reserved["function"] != null) {
			_g.setReserved("function",value16);
		} else {
			_g.h["function"] = value16;
		}
	}
	{
		var value17 = haxeparser_Keyword.KwdIf;
		if(__map_reserved["if"] != null) {
			_g.setReserved("if",value17);
		} else {
			_g.h["if"] = value17;
		}
	}
	{
		var value18 = haxeparser_Keyword.KwdImplements;
		if(__map_reserved["implements"] != null) {
			_g.setReserved("implements",value18);
		} else {
			_g.h["implements"] = value18;
		}
	}
	{
		var value19 = haxeparser_Keyword.KwdImport;
		if(__map_reserved["import"] != null) {
			_g.setReserved("import",value19);
		} else {
			_g.h["import"] = value19;
		}
	}
	{
		var value20 = haxeparser_Keyword.KwdInline;
		if(__map_reserved["inline"] != null) {
			_g.setReserved("inline",value20);
		} else {
			_g.h["inline"] = value20;
		}
	}
	{
		var value21 = haxeparser_Keyword.KwdInterface;
		if(__map_reserved["interface"] != null) {
			_g.setReserved("interface",value21);
		} else {
			_g.h["interface"] = value21;
		}
	}
	{
		var value22 = haxeparser_Keyword.KwdMacro;
		if(__map_reserved["macro"] != null) {
			_g.setReserved("macro",value22);
		} else {
			_g.h["macro"] = value22;
		}
	}
	{
		var value23 = haxeparser_Keyword.KwdNew;
		if(__map_reserved["new"] != null) {
			_g.setReserved("new",value23);
		} else {
			_g.h["new"] = value23;
		}
	}
	{
		var value24 = haxeparser_Keyword.KwdNull;
		if(__map_reserved["null"] != null) {
			_g.setReserved("null",value24);
		} else {
			_g.h["null"] = value24;
		}
	}
	{
		var value25 = haxeparser_Keyword.KwdOverride;
		if(__map_reserved["override"] != null) {
			_g.setReserved("override",value25);
		} else {
			_g.h["override"] = value25;
		}
	}
	{
		var value26 = haxeparser_Keyword.KwdPackage;
		if(__map_reserved["package"] != null) {
			_g.setReserved("package",value26);
		} else {
			_g.h["package"] = value26;
		}
	}
	{
		var value27 = haxeparser_Keyword.KwdPrivate;
		if(__map_reserved["private"] != null) {
			_g.setReserved("private",value27);
		} else {
			_g.h["private"] = value27;
		}
	}
	{
		var value28 = haxeparser_Keyword.KwdPublic;
		if(__map_reserved["public"] != null) {
			_g.setReserved("public",value28);
		} else {
			_g.h["public"] = value28;
		}
	}
	{
		var value29 = haxeparser_Keyword.KwdReturn;
		if(__map_reserved["return"] != null) {
			_g.setReserved("return",value29);
		} else {
			_g.h["return"] = value29;
		}
	}
	{
		var value30 = haxeparser_Keyword.KwdStatic;
		if(__map_reserved["static"] != null) {
			_g.setReserved("static",value30);
		} else {
			_g.h["static"] = value30;
		}
	}
	{
		var value31 = haxeparser_Keyword.KwdSwitch;
		if(__map_reserved["switch"] != null) {
			_g.setReserved("switch",value31);
		} else {
			_g.h["switch"] = value31;
		}
	}
	{
		var value32 = haxeparser_Keyword.KwdThis;
		if(__map_reserved["this"] != null) {
			_g.setReserved("this",value32);
		} else {
			_g.h["this"] = value32;
		}
	}
	{
		var value33 = haxeparser_Keyword.KwdThrow;
		if(__map_reserved["throw"] != null) {
			_g.setReserved("throw",value33);
		} else {
			_g.h["throw"] = value33;
		}
	}
	{
		var value34 = haxeparser_Keyword.KwdTrue;
		if(__map_reserved["true"] != null) {
			_g.setReserved("true",value34);
		} else {
			_g.h["true"] = value34;
		}
	}
	{
		var value35 = haxeparser_Keyword.KwdTry;
		if(__map_reserved["try"] != null) {
			_g.setReserved("try",value35);
		} else {
			_g.h["try"] = value35;
		}
	}
	{
		var value36 = haxeparser_Keyword.KwdTypedef;
		if(__map_reserved["typedef"] != null) {
			_g.setReserved("typedef",value36);
		} else {
			_g.h["typedef"] = value36;
		}
	}
	{
		var value37 = haxeparser_Keyword.KwdUntyped;
		if(__map_reserved["untyped"] != null) {
			_g.setReserved("untyped",value37);
		} else {
			_g.h["untyped"] = value37;
		}
	}
	{
		var value38 = haxeparser_Keyword.KwdUsing;
		if(__map_reserved["using"] != null) {
			_g.setReserved("using",value38);
		} else {
			_g.h["using"] = value38;
		}
	}
	{
		var value39 = haxeparser_Keyword.KwdVar;
		if(__map_reserved["var"] != null) {
			_g.setReserved("var",value39);
		} else {
			_g.h["var"] = value39;
		}
	}
	{
		var value40 = haxeparser_Keyword.KwdWhile;
		if(__map_reserved["while"] != null) {
			_g.setReserved("while",value40);
		} else {
			_g.h["while"] = value40;
		}
	}
	$r = _g;
	return $r;
}(this));
haxeparser_HaxeLexer.buf = new StringBuf();
haxeparser_HaxeLexer.ident = "_*[a-z][a-zA-Z0-9_]*|_+|_+[0-9][_a-zA-Z0-9]*";
haxeparser_HaxeLexer.idtype = "_*[A-Z][a-zA-Z0-9_]*";
haxeparser_HaxeLexer.integer = "([1-9][0-9]*)|0";
haxeparser_HaxeLexer.tok = hxparse_Lexer.buildRuleset([{ rule : "", func : function(lexer) {
	return haxeparser_HaxeLexer.mk(lexer,haxeparser_TokenDef.Eof);
}},{ rule : "[\r\n\t ]+", func : function(lexer1) {
	return lexer1.token(haxeparser_HaxeLexer.tok);
}},{ rule : "0x[0-9a-fA-F]+", func : function(lexer2) {
	return haxeparser_HaxeLexer.mk(lexer2,haxeparser_TokenDef.Const(haxe_macro_Constant.CInt(lexer2.current)));
}},{ rule : "([1-9][0-9]*)|0", func : function(lexer3) {
	return haxeparser_HaxeLexer.mk(lexer3,haxeparser_TokenDef.Const(haxe_macro_Constant.CInt(lexer3.current)));
}},{ rule : "(([1-9][0-9]*)|0)(\\.[0-9]+)", func : function(lexer4) {
	return haxeparser_HaxeLexer.mk(lexer4,haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat(lexer4.current)));
}},{ rule : "\\.[0-9]+", func : function(lexer5) {
	return haxeparser_HaxeLexer.mk(lexer5,haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat(lexer5.current)));
}},{ rule : "(([1-9][0-9]*)|0)([eE][\\+\\-]?[0-9]+)", func : function(lexer6) {
	return haxeparser_HaxeLexer.mk(lexer6,haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat(lexer6.current)));
}},{ rule : "(([1-9][0-9]*)|0)(\\.[0-9]*[eE][\\+\\-]?[0-9]+)", func : function(lexer7) {
	return haxeparser_HaxeLexer.mk(lexer7,haxeparser_TokenDef.Const(haxe_macro_Constant.CFloat(lexer7.current)));
}},{ rule : "(([1-9][0-9]*)|0)(\\.\\.\\.)", func : function(lexer8) {
	return haxeparser_HaxeLexer.mk(lexer8,haxeparser_TokenDef.IntInterval(HxOverrides.substr(lexer8.current,0,-3)));
}},{ rule : "//[^\n\r]*", func : function(lexer9) {
	return haxeparser_HaxeLexer.mk(lexer9,haxeparser_TokenDef.CommentLine(HxOverrides.substr(lexer9.current,2,null)));
}},{ rule : "+\\+", func : function(lexer10) {
	return haxeparser_HaxeLexer.mk(lexer10,haxeparser_TokenDef.Unop(haxe_macro_Unop.OpIncrement));
}},{ rule : "--", func : function(lexer11) {
	return haxeparser_HaxeLexer.mk(lexer11,haxeparser_TokenDef.Unop(haxe_macro_Unop.OpDecrement));
}},{ rule : "~", func : function(lexer12) {
	return haxeparser_HaxeLexer.mk(lexer12,haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNegBits));
}},{ rule : "%=", func : function(lexer13) {
	return haxeparser_HaxeLexer.mk(lexer13,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMod)));
}},{ rule : "&=", func : function(lexer14) {
	return haxeparser_HaxeLexer.mk(lexer14,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAnd)));
}},{ rule : "|=", func : function(lexer15) {
	return haxeparser_HaxeLexer.mk(lexer15,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpOr)));
}},{ rule : "^=", func : function(lexer16) {
	return haxeparser_HaxeLexer.mk(lexer16,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpXor)));
}},{ rule : "+=", func : function(lexer17) {
	return haxeparser_HaxeLexer.mk(lexer17,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAdd)));
}},{ rule : "-=", func : function(lexer18) {
	return haxeparser_HaxeLexer.mk(lexer18,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpSub)));
}},{ rule : "*=", func : function(lexer19) {
	return haxeparser_HaxeLexer.mk(lexer19,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMult)));
}},{ rule : "/=", func : function(lexer20) {
	return haxeparser_HaxeLexer.mk(lexer20,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpDiv)));
}},{ rule : "<<=", func : function(lexer21) {
	return haxeparser_HaxeLexer.mk(lexer21,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpShl)));
}},{ rule : "==", func : function(lexer22) {
	return haxeparser_HaxeLexer.mk(lexer22,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpEq));
}},{ rule : "!=", func : function(lexer23) {
	return haxeparser_HaxeLexer.mk(lexer23,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpNotEq));
}},{ rule : "<=", func : function(lexer24) {
	return haxeparser_HaxeLexer.mk(lexer24,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLte));
}},{ rule : "&&", func : function(lexer25) {
	return haxeparser_HaxeLexer.mk(lexer25,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolAnd));
}},{ rule : "|\\|", func : function(lexer26) {
	return haxeparser_HaxeLexer.mk(lexer26,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpBoolOr));
}},{ rule : "<<", func : function(lexer27) {
	return haxeparser_HaxeLexer.mk(lexer27,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpShl));
}},{ rule : "->", func : function(lexer28) {
	return haxeparser_HaxeLexer.mk(lexer28,haxeparser_TokenDef.Arrow);
}},{ rule : "\\.\\.\\.", func : function(lexer29) {
	return haxeparser_HaxeLexer.mk(lexer29,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpInterval));
}},{ rule : "=>", func : function(lexer30) {
	return haxeparser_HaxeLexer.mk(lexer30,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpArrow));
}},{ rule : "!", func : function(lexer31) {
	return haxeparser_HaxeLexer.mk(lexer31,haxeparser_TokenDef.Unop(haxe_macro_Unop.OpNot));
}},{ rule : "<", func : function(lexer32) {
	return haxeparser_HaxeLexer.mk(lexer32,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpLt));
}},{ rule : ">", func : function(lexer33) {
	return haxeparser_HaxeLexer.mk(lexer33,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpGt));
}},{ rule : ";", func : function(lexer34) {
	return haxeparser_HaxeLexer.mk(lexer34,haxeparser_TokenDef.Semicolon);
}},{ rule : ":", func : function(lexer35) {
	return haxeparser_HaxeLexer.mk(lexer35,haxeparser_TokenDef.DblDot);
}},{ rule : ",", func : function(lexer36) {
	return haxeparser_HaxeLexer.mk(lexer36,haxeparser_TokenDef.Comma);
}},{ rule : "\\.", func : function(lexer37) {
	return haxeparser_HaxeLexer.mk(lexer37,haxeparser_TokenDef.Dot);
}},{ rule : "%", func : function(lexer38) {
	return haxeparser_HaxeLexer.mk(lexer38,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMod));
}},{ rule : "&", func : function(lexer39) {
	return haxeparser_HaxeLexer.mk(lexer39,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAnd));
}},{ rule : "|", func : function(lexer40) {
	return haxeparser_HaxeLexer.mk(lexer40,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpOr));
}},{ rule : "^", func : function(lexer41) {
	return haxeparser_HaxeLexer.mk(lexer41,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpXor));
}},{ rule : "+", func : function(lexer42) {
	return haxeparser_HaxeLexer.mk(lexer42,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAdd));
}},{ rule : "*", func : function(lexer43) {
	return haxeparser_HaxeLexer.mk(lexer43,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpMult));
}},{ rule : "/", func : function(lexer44) {
	return haxeparser_HaxeLexer.mk(lexer44,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpDiv));
}},{ rule : "-", func : function(lexer45) {
	return haxeparser_HaxeLexer.mk(lexer45,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpSub));
}},{ rule : "=", func : function(lexer46) {
	return haxeparser_HaxeLexer.mk(lexer46,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpAssign));
}},{ rule : "in", func : function(lexer47) {
	return haxeparser_HaxeLexer.mk(lexer47,haxeparser_TokenDef.Binop(haxe_macro_Binop.OpIn));
}},{ rule : "[", func : function(lexer48) {
	return haxeparser_HaxeLexer.mk(lexer48,haxeparser_TokenDef.BkOpen);
}},{ rule : "]", func : function(lexer49) {
	return haxeparser_HaxeLexer.mk(lexer49,haxeparser_TokenDef.BkClose);
}},{ rule : "{", func : function(lexer50) {
	return haxeparser_HaxeLexer.mk(lexer50,haxeparser_TokenDef.BrOpen);
}},{ rule : "}", func : function(lexer51) {
	return haxeparser_HaxeLexer.mk(lexer51,haxeparser_TokenDef.BrClose);
}},{ rule : "\\(", func : function(lexer52) {
	return haxeparser_HaxeLexer.mk(lexer52,haxeparser_TokenDef.POpen);
}},{ rule : "\\)", func : function(lexer53) {
	return haxeparser_HaxeLexer.mk(lexer53,haxeparser_TokenDef.PClose);
}},{ rule : "?", func : function(lexer54) {
	return haxeparser_HaxeLexer.mk(lexer54,haxeparser_TokenDef.Question);
}},{ rule : "@", func : function(lexer55) {
	return haxeparser_HaxeLexer.mk(lexer55,haxeparser_TokenDef.At);
}},{ rule : "\"", func : function(lexer56) {
	haxeparser_HaxeLexer.buf = new StringBuf();
	var pmin = new hxparse_Position(lexer56.source,lexer56.pos - lexer56.current.length,lexer56.pos);
	var pmax;
	try {
		pmax = lexer56.token(haxeparser_HaxeLexer.string);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if((e1 instanceof haxe_io_Eof)) {
			var e2 = e1;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedString,haxeparser_HaxeLexer.mkPos(pmin)));
		} else {
			throw e;
		}
	}
	var token = haxeparser_HaxeLexer.mk(lexer56,haxeparser_TokenDef.Const(haxe_macro_Constant.CString(haxeparser_HaxeLexer.unescape(haxeparser_HaxeLexer.buf.b,haxeparser_HaxeLexer.mkPos(pmin)))));
	token.pos.min = pmin.pmin;
	return token;
}},{ rule : "'", func : function(lexer57) {
	haxeparser_HaxeLexer.buf = new StringBuf();
	var pmin1 = new hxparse_Position(lexer57.source,lexer57.pos - lexer57.current.length,lexer57.pos);
	var pmax1;
	try {
		pmax1 = lexer57.token(haxeparser_HaxeLexer.string2);
	} catch( e3 ) {
		haxe_CallStack.lastException = e3;
		var e4 = (e3 instanceof js__$Boot_HaxeError) ? e3.val : e3;
		if((e4 instanceof haxe_io_Eof)) {
			var e5 = e4;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedString,haxeparser_HaxeLexer.mkPos(pmin1)));
		} else {
			throw e3;
		}
	}
	var token1 = haxeparser_HaxeLexer.mk(lexer57,haxeparser_TokenDef.Const(haxe_macro_Constant.CString(haxeparser_HaxeLexer.unescape(haxeparser_HaxeLexer.buf.b,haxeparser_HaxeLexer.mkPos(pmin1)))));
	token1.pos.min = pmin1.pmin;
	return token1;
}},{ rule : "~/", func : function(lexer58) {
	haxeparser_HaxeLexer.buf = new StringBuf();
	var pmin2 = new hxparse_Position(lexer58.source,lexer58.pos - lexer58.current.length,lexer58.pos);
	var info;
	try {
		info = lexer58.token(haxeparser_HaxeLexer.regexp);
	} catch( e6 ) {
		haxe_CallStack.lastException = e6;
		var e7 = (e6 instanceof js__$Boot_HaxeError) ? e6.val : e6;
		if((e7 instanceof haxe_io_Eof)) {
			var e8 = e7;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedRegExp,haxeparser_HaxeLexer.mkPos(pmin2)));
		} else {
			throw e6;
		}
	}
	var token2 = haxeparser_HaxeLexer.mk(lexer58,haxeparser_TokenDef.Const(haxe_macro_Constant.CRegexp(haxeparser_HaxeLexer.buf.b,info.opt)));
	token2.pos.min = pmin2.pmin;
	return token2;
}},{ rule : "/\\*", func : function(lexer59) {
	haxeparser_HaxeLexer.buf = new StringBuf();
	var pmin3 = new hxparse_Position(lexer59.source,lexer59.pos - lexer59.current.length,lexer59.pos);
	var pmax2;
	try {
		pmax2 = lexer59.token(haxeparser_HaxeLexer.comment);
	} catch( e9 ) {
		haxe_CallStack.lastException = e9;
		var e10 = (e9 instanceof js__$Boot_HaxeError) ? e9.val : e9;
		if((e10 instanceof haxe_io_Eof)) {
			var e11 = e10;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnclosedComment,haxeparser_HaxeLexer.mkPos(pmin3)));
		} else {
			throw e9;
		}
	}
	var token3 = haxeparser_HaxeLexer.mk(lexer59,haxeparser_TokenDef.Comment(haxeparser_HaxeLexer.buf.b));
	token3.pos.min = pmin3.pmin;
	return token3;
}},{ rule : "(#)(_*[a-z][a-zA-Z0-9_]*|_+|_+[0-9][_a-zA-Z0-9]*)", func : function(lexer60) {
	return haxeparser_HaxeLexer.mk(lexer60,haxeparser_TokenDef.Sharp(HxOverrides.substr(lexer60.current,1,null)));
}},{ rule : "$[_a-zA-Z0-9]*", func : function(lexer61) {
	return haxeparser_HaxeLexer.mk(lexer61,haxeparser_TokenDef.Dollar(HxOverrides.substr(lexer61.current,1,null)));
}},{ rule : "_*[a-z][a-zA-Z0-9_]*|_+|_+[0-9][_a-zA-Z0-9]*", func : function(lexer62) {
	var key = lexer62.current;
	var _this = haxeparser_HaxeLexer.keywords;
	var kwd = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(kwd != null) {
		return haxeparser_HaxeLexer.mk(lexer62,haxeparser_TokenDef.Kwd(kwd));
	} else {
		return haxeparser_HaxeLexer.mk(lexer62,haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent(lexer62.current)));
	}
}},{ rule : "_*[A-Z][a-zA-Z0-9_]*", func : function(lexer63) {
	return haxeparser_HaxeLexer.mk(lexer63,haxeparser_TokenDef.Const(haxe_macro_Constant.CIdent(lexer63.current)));
}}],"tok");
haxeparser_HaxeLexer.string = hxparse_Lexer.buildRuleset([{ rule : "\\\\\\\\", func : function(lexer) {
	haxeparser_HaxeLexer.buf.b += "\\\\";
	return lexer.token(haxeparser_HaxeLexer.string);
}},{ rule : "\\\\", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += "\\";
	return lexer1.token(haxeparser_HaxeLexer.string);
}},{ rule : "\\\\\"", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += "\"";
	return lexer2.token(haxeparser_HaxeLexer.string);
}},{ rule : "\"", func : function(lexer3) {
	return new hxparse_Position(lexer3.source,lexer3.pos - lexer3.current.length,lexer3.pos).pmax;
}},{ rule : "[^\\\\\"]+", func : function(lexer4) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer4.current);
	return lexer4.token(haxeparser_HaxeLexer.string);
}}],"string");
haxeparser_HaxeLexer.string2 = hxparse_Lexer.buildRuleset([{ rule : "\\\\\\\\", func : function(lexer) {
	haxeparser_HaxeLexer.buf.b += "\\\\";
	return lexer.token(haxeparser_HaxeLexer.string2);
}},{ rule : "\\\\", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += "\\";
	return lexer1.token(haxeparser_HaxeLexer.string2);
}},{ rule : "\\\\'", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += "'";
	return lexer2.token(haxeparser_HaxeLexer.string2);
}},{ rule : "'", func : function(lexer3) {
	return new hxparse_Position(lexer3.source,lexer3.pos - lexer3.current.length,lexer3.pos).pmax;
}},{ rule : "($$)|(\\$)|$", func : function(lexer4) {
	haxeparser_HaxeLexer.buf.b += "$";
	return lexer4.token(haxeparser_HaxeLexer.string2);
}},{ rule : "${", func : function(lexer5) {
	var pmin = new hxparse_Position(lexer5.source,lexer5.pos - lexer5.current.length,lexer5.pos);
	haxeparser_HaxeLexer.buf.b += Std.string(lexer5.current);
	try {
		lexer5.token(haxeparser_HaxeLexer.codeString);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if((e1 instanceof haxe_io_Eof)) {
			var e2 = e1;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnclosedCode,haxeparser_HaxeLexer.mkPos(pmin)));
		} else {
			throw e;
		}
	}
	return lexer5.token(haxeparser_HaxeLexer.string2);
}},{ rule : "[^$\\\\']+", func : function(lexer6) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer6.current);
	return lexer6.token(haxeparser_HaxeLexer.string2);
}}],"string2");
haxeparser_HaxeLexer.codeString = hxparse_Lexer.buildRuleset([{ rule : "{|/", func : function(lexer) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer.current);
	lexer.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "}", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer1.current);
	return;
}},{ rule : "\"", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += "\"";
	var pmin = new hxparse_Position(lexer2.source,lexer2.pos - lexer2.current.length,lexer2.pos);
	try {
		lexer2.token(haxeparser_HaxeLexer.string);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if((e1 instanceof haxe_io_Eof)) {
			var e2 = e1;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedString,haxeparser_HaxeLexer.mkPos(pmin)));
		} else {
			throw e;
		}
	}
	haxeparser_HaxeLexer.buf.b += "\"";
	lexer2.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "'", func : function(lexer3) {
	haxeparser_HaxeLexer.buf.b += "'";
	var pmin1 = new hxparse_Position(lexer3.source,lexer3.pos - lexer3.current.length,lexer3.pos);
	try {
		lexer3.token(haxeparser_HaxeLexer.string2);
	} catch( e3 ) {
		haxe_CallStack.lastException = e3;
		var e4 = (e3 instanceof js__$Boot_HaxeError) ? e3.val : e3;
		if((e4 instanceof haxe_io_Eof)) {
			var e5 = e4;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnterminatedString,haxeparser_HaxeLexer.mkPos(pmin1)));
		} else {
			throw e3;
		}
	}
	haxeparser_HaxeLexer.buf.b += "'";
	lexer3.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "/\\*", func : function(lexer4) {
	var pmin2 = new hxparse_Position(lexer4.source,lexer4.pos - lexer4.current.length,lexer4.pos);
	try {
		lexer4.token(haxeparser_HaxeLexer.comment);
	} catch( e6 ) {
		haxe_CallStack.lastException = e6;
		var e7 = (e6 instanceof js__$Boot_HaxeError) ? e6.val : e6;
		if((e7 instanceof haxe_io_Eof)) {
			var e8 = e7;
			throw new js__$Boot_HaxeError(new haxeparser_LexerError(haxeparser_LexerErrorMsg.UnclosedComment,haxeparser_HaxeLexer.mkPos(pmin2)));
		} else {
			throw e6;
		}
	}
	lexer4.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "//[^\n\r]*", func : function(lexer5) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer5.current);
	lexer5.token(haxeparser_HaxeLexer.codeString);
	return;
}},{ rule : "[^/\"'{}\n\r]+", func : function(lexer6) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer6.current);
	lexer6.token(haxeparser_HaxeLexer.codeString);
	return;
}}],"codeString");
haxeparser_HaxeLexer.comment = hxparse_Lexer.buildRuleset([{ rule : "*/", func : function(lexer) {
	return new hxparse_Position(lexer.source,lexer.pos - lexer.current.length,lexer.pos).pmax;
}},{ rule : "*", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += "*";
	return lexer1.token(haxeparser_HaxeLexer.comment);
}},{ rule : "[^\\*]+", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer2.current);
	return lexer2.token(haxeparser_HaxeLexer.comment);
}}],"comment");
haxeparser_HaxeLexer.regexp = hxparse_Lexer.buildRuleset([{ rule : "\\\\/", func : function(lexer) {
	haxeparser_HaxeLexer.buf.b += "/";
	return lexer.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\r", func : function(lexer1) {
	haxeparser_HaxeLexer.buf.b += "\r";
	return lexer1.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\n", func : function(lexer2) {
	haxeparser_HaxeLexer.buf.b += "\n";
	return lexer2.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\t", func : function(lexer3) {
	haxeparser_HaxeLexer.buf.b += "\t";
	return lexer3.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\[\\\\$\\.*+\\^|{}\\[\\]()?\\-0-9]", func : function(lexer4) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer4.current);
	return lexer4.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "\\\\[wWbBsSdDx]", func : function(lexer5) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer5.current);
	return lexer5.token(haxeparser_HaxeLexer.regexp);
}},{ rule : "/", func : function(lexer6) {
	return lexer6.token(haxeparser_HaxeLexer.regexp_options);
}},{ rule : "[^\\\\/\r\n]+", func : function(lexer7) {
	haxeparser_HaxeLexer.buf.b += Std.string(lexer7.current);
	return lexer7.token(haxeparser_HaxeLexer.regexp);
}}],"regexp");
haxeparser_HaxeLexer.regexp_options = hxparse_Lexer.buildRuleset([{ rule : "[gimsu]*", func : function(lexer) {
	return { pmax : new hxparse_Position(lexer.source,lexer.pos - lexer.current.length,lexer.pos).pmax, opt : lexer.current};
}}],"regexp_options");
haxeparser_HaxeLexer.generatedRulesets = [haxeparser_HaxeLexer.tok,haxeparser_HaxeLexer.string,haxeparser_HaxeLexer.string2,haxeparser_HaxeLexer.codeString,haxeparser_HaxeLexer.comment,haxeparser_HaxeLexer.regexp,haxeparser_HaxeLexer.regexp_options];
tokentree_TokenStream.NO_MORE_TOKENS = "no more tokens";
tokentree_TokenStream.MODE = tokentree_TokenStreamMode.STRICT;
tokentree_TokenTree.MAX_LEVEL = 9999;
tokentree_walk_WalkSharp.SHARP_IFS = [];
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
