// Generated by Haxe 4.0.0-preview.4+eec79c1e5
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len1 = f.length - p;
	r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = true;
Type["typeof"] = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var Vscode = require("vscode");
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = true;
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw new js__$Boot_HaxeError("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if((o instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if((o instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if((o instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return $hxEnums[o.__enum__] == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_buffer_Buffer = require("buffer").Buffer;
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = true;
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = new js_node_buffer_Buffer(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
	,__class__: sys_io_FileInput
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = true;
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = new js_node_buffer_Buffer(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = new js_node_buffer_Buffer(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: sys_io_FileOutput
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__ : true, __constructs__ : ["SeekBegin","SeekCur","SeekEnd"]
	,SeekBegin: {_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
var vscode__$IndentAction_IndentAction_$Impl_$ = require("vscode").IndentAction;
var vscode_Position = require("vscode").Position;
var vscode_Range = require("vscode").Range;
var vscode_Selection = require("vscode").Selection;
var wiggin_codedox_CodeDox = function(context) {
	var _gthis = this;
	this.m_fileHeader = null;
	this.m_commenter = null;
	wiggin_codedox_CodeDox.s_extPath = context.extensionPath;
	context.subscriptions.push(Vscode.workspace.onDidChangeConfiguration(function(Void1) {
		wiggin_codedox_Settings.clearCache();
		_gthis.applyOnEnterRules(context);
	}));
	context.subscriptions.push(Vscode.workspace.onDidChangeTextDocument($bind(this,this.onTextChange)));
	this.registerCommand(context,"codedox" + ".setup",$bind(this,this.doSetup));
	this.registerTextEditorCommand(context,"codedox" + ".fileheader" + ".insert",$bind(this,this.insertFileHeader));
	this.registerTextEditorCommand(context,"codedox" + ".comment" + ".insert",$bind(this,this.insertComment));
	this.applyOnEnterRules(context);
};
wiggin_codedox_CodeDox.__name__ = true;
wiggin_codedox_CodeDox.activate = $hx_exports["activate"] = function(context) {
	new wiggin_codedox_CodeDox(context);
};
wiggin_codedox_CodeDox.log = function(msg,pos) {
};
wiggin_codedox_CodeDox.isLanguageSupported = function(strLangId) {
	return wiggin_codedox_Settings.getSupportedLanguages().indexOf(strLangId) != -1;
};
wiggin_codedox_CodeDox.getCurrentLanguageId = function() {
	var strLang = null;
	var editor = Vscode.window.activeTextEditor;
	if(editor != null && editor.document != null) {
		strLang = editor.document.languageId;
	}
	return strLang;
};
wiggin_codedox_CodeDox.getExtPath = function() {
	return wiggin_codedox_CodeDox.s_extPath;
};
wiggin_codedox_CodeDox.prototype = {
	applyOnEnterRules: function(context) {
		var _g = 0;
		var _g1 = wiggin_codedox_Settings.getSupportedLanguages();
		while(_g < _g1.length) {
			var strLang = _g1[_g];
			++_g;
			var settings = wiggin_codedox_Settings.fetch(strLang);
			if(settings.autoPrefixOnEnter && StringTools.trim(settings.strCommentPrefix).length > 0) {
				var rules = wiggin_codedox_EnterRules.createRules(settings);
				var disposable = Vscode.languages.setLanguageConfiguration(strLang,{ onEnterRules : rules});
				context.subscriptions.push(disposable);
			}
		}
	}
	,registerCommand: function(context,strCmd,callback) {
		var disposable = Vscode.commands.registerCommand(strCmd,callback);
		context.subscriptions.push(disposable);
	}
	,registerTextEditorCommand: function(context,strCmd,callback) {
		var disposable = Vscode.commands.registerTextEditorCommand(strCmd,callback);
		context.subscriptions.push(disposable);
	}
	,doSetup: function() {
		var _gthis = this;
		var prom;
		try {
			var setup = new wiggin_codedox_Setup();
			prom = setup.doSetup();
			prom["catch"](function(err) {
				_gthis.handleError(err,null,null);
			});
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.handleError("Error setting up minimal config: ",(e instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack());
			prom = Promise.reject();
		}
		return prom;
	}
	,insertFileHeader: function(editor,edit) {
		try {
			if(this.m_fileHeader == null) {
				this.m_fileHeader = new wiggin_codedox_FileHeader();
			}
			this.m_fileHeader.insertFileHeader(null,editor,edit);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.handleError("Error inserting file header: ",(e instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack());
		}
	}
	,insertComment: function(editor,edit) {
		try {
			if(this.m_commenter == null) {
				this.m_commenter = new wiggin_codedox_Commenter();
			}
			var doc = editor.document;
			var pos = wiggin_util_ParseUtil.findPrevBlankLine(editor,editor.selection.active);
			var line = doc.lineAt(pos);
			this.m_commenter.insertComment(line,editor,edit);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.handleError("Error inserting comment: ",(e instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack());
		}
	}
	,onTextChange: function(evt) {
		try {
			var doc = evt.document;
			var strLangId = doc.languageId;
			if(wiggin_codedox_Settings.getSupportedLanguages().indexOf(strLangId) == -1 || evt.contentChanges.length != 1) {
				return;
			}
			var editor = Vscode.window.activeTextEditor;
			if(editor == null || editor.document != doc) {
				return;
			}
			var settings = wiggin_codedox_Settings.fetch(doc.languageId);
			if(!settings.autoInsert && !settings.autoInsertHeader) {
				return;
			}
			var change = evt.contentChanges[0];
			var str = change.text;
			if(str != null && str.length > 0) {
				var arr = [$bind(this,this.checkInsertPending),$bind(this,this.checkInsertHeader),$bind(this,this.checkInsertComment)];
				Lambda.foreach(arr,function(fn) {
					return !fn(change,settings,editor);
				});
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.handleError("",(e instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack());
		}
	}
	,checkInsertPending: function(change,settings,editor) {
		var bRet = false;
		var strChangeText = change.text;
		var doc = editor.document;
		if(this.m_commenter != null && this.m_commenter.isInsertPending && strChangeText != null) {
			bRet = true;
			this.m_commenter.isInsertPending = false;
			var str = settings.strCommentDescription;
			var strDescription = str != null && str.length > 0 ? StringTools.trim(str) : str;
			var i = strDescription.indexOf("\n");
			strDescription = i != -1 ? strDescription.substring(0,i) : strDescription;
			var str1 = strDescription != null && strDescription.length > 0 ? StringTools.trim(strDescription) : strDescription;
			if(!(!(str1 != null && str1.length > 0)) && strChangeText.indexOf(strDescription) != -1) {
				var ft = wiggin_util_ParseUtil.findText(doc,change.range.start,strDescription);
				if(ft != null) {
					editor.selection = new vscode_Selection(ft.posEnd,ft.posStart);
				}
			} else if(strChangeText.indexOf(settings.strCommentToken) != -1) {
				var ft1 = wiggin_util_ParseUtil.findText(doc,change.range.start,settings.strCommentToken);
				if(ft1 != null) {
					var p = new vscode_Position(ft1.posEnd.line,ft1.posEnd.character + 1);
					editor.selection = new vscode_Selection(p,p);
					editor.edit(function(edit) {
						edit["delete"](new vscode_Range(ft1.posStart,ft1.posEnd));
					},{ undoStopBefore : false, undoStopAfter : false});
				}
			} else if(StringTools.trim(strChangeText) == settings.strCommentBegin + " " + settings.strCommentEnd) {
				var ft2 = wiggin_util_ParseUtil.findText(doc,change.range.start,settings.strCommentBegin);
				if(ft2 != null) {
					var p1 = new vscode_Position(ft2.posEnd.line,ft2.posEnd.character + 1);
					editor.selection = new vscode_Selection(p1,p1);
				}
			}
		}
		wiggin_codedox_CodeDox.log("checkInsertPending: " + (bRet == null ? "null" : "" + bRet),{ fileName : "src/wiggin/codedox/CodeDox.hx", lineNumber : 320, className : "wiggin.codedox.CodeDox", methodName : "checkInsertPending"});
		return bRet;
	}
	,checkInsertHeader: function(change,settings,editor) {
		var bRet = false;
		var tmp;
		if(settings.autoInsertHeader) {
			var str = change.text;
			var strStart = settings.strHeaderTrigger;
			tmp = str != null && strStart != null && StringTools.startsWith(str,strStart);
		} else {
			tmp = false;
		}
		if(tmp && change.range.end.line == 0 && change.range.isEmpty) {
			bRet = true;
			var line = editor.document.lineAt(0);
			var strLine = line.text;
			if(strLine == settings.strHeaderBegin || strLine == settings.strHeaderBegin + settings.strHeaderEnd) {
				this.doHeaderInsert(line,editor);
			}
		}
		wiggin_codedox_CodeDox.log("checkInsertHeader: " + (bRet == null ? "null" : "" + bRet),{ fileName : "src/wiggin/codedox/CodeDox.hx", lineNumber : 351, className : "wiggin.codedox.CodeDox", methodName : "checkInsertHeader"});
		return bRet;
	}
	,checkInsertComment: function(change,settings,editor) {
		var bRet = false;
		var strChangeText = change.text;
		if(settings.autoInsert && strChangeText == settings.strCommentTrigger || strChangeText == settings.strCommentTrigger + settings.strAutoClosingClose || strChangeText == settings.strCommentTrigger + settings.strAutoClosingCloseAlt) {
			bRet = true;
			var line = editor.document.lineAt(change.range.start.line);
			var str = line.text;
			var strCheck = str != null && str.length > 0 ? StringTools.trim(str) : str;
			if(strCheck == settings.strCommentBegin || strCheck == settings.strCommentBegin + settings.strAutoClosingClose || strCheck == settings.strCommentBegin + settings.strAutoClosingCloseAlt) {
				this.doCommentInsert(line,editor);
			}
		}
		wiggin_codedox_CodeDox.log("checkInsertComment: " + (bRet == null ? "null" : "" + bRet),{ fileName : "src/wiggin/codedox/CodeDox.hx", lineNumber : 385, className : "wiggin.codedox.CodeDox", methodName : "checkInsertComment"});
		return bRet;
	}
	,doHeaderInsert: function(line,editor) {
		var _gthis = this;
		if(this.m_fileHeader == null) {
			this.m_fileHeader = new wiggin_codedox_FileHeader();
		}
		editor.edit(function(edit) {
			_gthis.m_fileHeader.insertFileHeader(line,editor,edit);
		},{ undoStopBefore : false, undoStopAfter : false});
	}
	,doCommentInsert: function(line,editor) {
		var _gthis = this;
		if(this.m_commenter == null) {
			this.m_commenter = new wiggin_codedox_Commenter();
		}
		editor.edit(function(edit) {
			_gthis.m_commenter.insertComment(line,editor,edit);
		},{ undoStopBefore : false, undoStopAfter : false});
	}
	,handleError: function(strMsg,exp,stack) {
		strMsg = strMsg != null && strMsg.length > 0 ? strMsg : "";
		var strExp = exp != null ? Std.string(exp) : "";
		if(strMsg != null && strMsg.length > 0 || strExp != null && strExp.length > 0) {
			Vscode.window.showErrorMessage(strMsg + strExp);
			wiggin_codedox_CodeDox.log(strMsg + strExp,{ fileName : "src/wiggin/codedox/CodeDox.hx", lineNumber : 446, className : "wiggin.codedox.CodeDox", methodName : "handleError"});
			if(stack != null) {
				wiggin_codedox_CodeDox.log(haxe_CallStack.toString(stack),{ fileName : "src/wiggin/codedox/CodeDox.hx", lineNumber : 449, className : "wiggin.codedox.CodeDox", methodName : "handleError"});
			}
		}
	}
	,__class__: wiggin_codedox_CodeDox
};
var wiggin_codedox_Commenter = function() {
	this.isInsertPending = false;
};
wiggin_codedox_Commenter.__name__ = true;
wiggin_codedox_Commenter.getFunctionRegex = function(strLangaugeId) {
	var haxe = new EReg("(?:function\\s+\\w+\\s*)(?:<[\\s\\S]+>\\s*)*\\(([^)]*)\\)(?:(?:(?:\\s*:\\s*)*(\\w*[^{;]*)))","");
	if(strLangaugeId == "haxe") {
		return haxe;
	} else {
		return haxe;
	}
};
wiggin_codedox_Commenter.composeComment = function(info,settings) {
	var strIndent = info.strIndent;
	var strPrefix = settings.strCommentPrefix;
	var map = new haxe_ds_StringMap();
	var sb = new StringBuf();
	sb.b += strIndent == null ? "null" : "" + strIndent;
	sb.b += Std.string(settings.strCommentBegin);
	sb.b += "\n";
	var tmp;
	if(info.bIncludeDescription) {
		var str = settings.strCommentDescription;
		tmp = str != null && str.length > 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		var strDescription = settings.strCommentDescription;
		var str1 = strDescription != null && strDescription.length > 0 ? StringTools.trim(strDescription) : strDescription;
		if(!(str1 != null && str1.length > 0)) {
			strDescription = settings.strCommentToken + strDescription;
		}
		wiggin_codedox_Commenter.composeCommentLines(sb,strDescription,strIndent,strPrefix);
	} else {
		wiggin_codedox_Commenter.composeCommentLines(sb,settings.strCommentToken,strIndent,strPrefix);
	}
	var tmp1;
	if(info.params != null) {
		var str2 = settings.strParamFormat;
		tmp1 = str2 != null && str2.length > 0;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		var _g = 0;
		var _g1 = info.params;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var _g2 = new haxe_ds_StringMap();
			var value = item.name;
			if(__map_reserved["name"] != null) {
				_g2.setReserved("name",value);
			} else {
				_g2.h["name"] = value;
			}
			var value1 = item.type;
			if(__map_reserved["type"] != null) {
				_g2.setReserved("type",value1);
			} else {
				_g2.h["type"] = value1;
			}
			var mapP = _g2;
			wiggin_util_ParamUtil.addDefaultParams(mapP);
			var strP = wiggin_util_ParamUtil.applyParams(settings.strParamFormat,mapP);
			wiggin_codedox_Commenter.composeCommentLines(sb,strP,strIndent,strPrefix);
		}
	}
	var tmp2;
	var str3 = info.retType;
	if(str3 != null && str3.length > 0 && info.retType != "Void") {
		var str4 = settings.strReturnFormat;
		tmp2 = str4 != null && str4.length > 0;
	} else {
		tmp2 = false;
	}
	if(tmp2) {
		var value2 = info.retType;
		if(__map_reserved["type"] != null) {
			map.setReserved("type",value2);
		} else {
			map.h["type"] = value2;
		}
		wiggin_codedox_Commenter.composeCommentLines(sb,settings.strReturnFormat,strIndent,strPrefix);
	}
	sb.b += Std.string(info.strIndent);
	sb.b += Std.string(settings.strCommentEnd);
	sb.b += "\n";
	wiggin_util_ParamUtil.addDefaultParams(map);
	return wiggin_util_ParamUtil.applyParams(sb.b,map);
};
wiggin_codedox_Commenter.composeCommentLines = function(sb,strFragment,strIndent,strPrefix) {
	if(!(strFragment != null && strFragment.length > 0)) {
		sb.b += strIndent == null ? "null" : "" + strIndent;
		sb.b += strPrefix == null ? "null" : "" + strPrefix;
		sb.b += "\n";
		return;
	}
	var arr = strFragment.split("\n");
	var _g = 0;
	while(_g < arr.length) {
		var str = arr[_g];
		++_g;
		sb.b += strIndent == null ? "null" : "" + strIndent;
		sb.b += strPrefix == null ? "null" : "" + strPrefix;
		if(str != null && str.length > 0) {
			sb.b += str == null ? "null" : "" + str;
		}
		sb.b += "\n";
	}
};
wiggin_codedox_Commenter.parseParams = function(strParams,strLanguageId) {
	var strParamSeparator;
	var idxName;
	var idxType;
	if(strLanguageId == "haxe") {
		strParamSeparator = ":";
		idxName = 0;
		idxType = 1;
	} else {
		strParamSeparator = ":";
		idxName = 0;
		idxType = 1;
	}
	strParams = strParams == null ? "" : strParams;
	var arrParams = [];
	var bAllowOptional = wiggin_codedox_Settings.fetch(strLanguageId).allowOptionalArgs;
	var arr = wiggin_util_ParseUtil.splitByCommas(strParams);
	var _g = 0;
	while(_g < arr.length) {
		var item = arr[_g];
		++_g;
		item = StringTools.trim(item);
		if(item != null && item.length > 0) {
			var arrItem = item.split(strParamSeparator);
			var strType = arrItem.length > 1 ? arrItem[idxType] : "";
			var a = arrItem.length - 1;
			var strName = arrItem[a > idxName ? idxName : a];
			strType = StringTools.trim(strType);
			strName = StringTools.trim(strName);
			if(!bAllowOptional && StringTools.startsWith(strName,"?")) {
				strName = HxOverrides.substr(strName,1,null);
			}
			arrParams.push({ name : strName, type : strType});
		}
	}
	return arrParams;
};
wiggin_codedox_Commenter.prototype = {
	insertComment: function(line,editor,edit) {
		var strComment = this.getComment(line,editor);
		if(strComment != null) {
			edit.replace(line.rangeIncludingLineBreak,strComment);
			this.isInsertPending = true;
		} else {
			wiggin_codedox_CodeDox.log("insertComment aborted: no function to parse",{ fileName : "src/wiggin/codedox/Commenter.hx", lineNumber : 71, className : "wiggin.codedox.Commenter", methodName : "insertComment"});
		}
	}
	,getComment: function(line,editor) {
		var strComment = null;
		var doc = editor.document;
		var posStart = line.range.end;
		var iOffset = doc.offsetAt(posStart);
		var posEnd = doc.positionAt(iOffset + 1024);
		var range = new vscode_Range(posStart,posEnd);
		range = doc.validateRange(range);
		var strText = doc.getText(range);
		var settings = wiggin_codedox_Settings.fetch(doc.languageId);
		var r = wiggin_codedox_Commenter.getFunctionRegex(doc.languageId);
		if(r.match(strText)) {
			var iPosMatch = r.matchedPos().pos;
			var str = r.matched(1);
			var strParams = str != null && str.length > 0 ? StringTools.trim(str) : str;
			var str1 = r.matched(2);
			var strReturnType = str1 != null && str1.length > 0 ? StringTools.trim(str1) : str1;
			var strPreamble = HxOverrides.substr(strText,0,iPosMatch + 1);
			if(!wiggin_util_StringUtil.contains(strPreamble,[settings.strCommentBegin,settings.strCommentEnd,"{","}",";"])) {
				var posMatch = doc.positionAt(iOffset + iPosMatch);
				var strIndent = wiggin_util_ParseUtil.getIndent(doc,posMatch);
				var arrParams = wiggin_codedox_Commenter.parseParams(strParams,doc.languageId);
				var info = { params : arrParams, retType : strReturnType, strIndent : strIndent, bIncludeDescription : true};
				strComment = wiggin_codedox_Commenter.composeComment(info,settings);
			}
		}
		if(strComment == null) {
			var lineCheck = wiggin_util_ParseUtil.findLine(doc,new vscode_Position(posStart.line + 1,0),wiggin_util_Direction.Forward,new EReg("[^\\s]+",""));
			var strIndent1 = lineCheck != null ? wiggin_util_ParseUtil.getIndent(doc,lineCheck.range.start) : "";
			if(settings.alwaysMultiline) {
				var info1 = { params : null, retType : null, strIndent : strIndent1, bIncludeDescription : false};
				strComment = wiggin_codedox_Commenter.composeComment(info1,settings);
			} else {
				strComment = strIndent1 + settings.strCommentBegin + " " + settings.strCommentEnd + "\n";
			}
		}
		return strComment;
	}
	,__class__: wiggin_codedox_Commenter
};
var wiggin_codedox_EnterRules = function() { };
wiggin_codedox_EnterRules.__name__ = true;
wiggin_codedox_EnterRules.createRules = function(settings) {
	var str = settings.strCommentBegin;
	var strCommentBegin = str != null && str.length > 0 ? StringTools.trim(str) : str;
	var str1 = settings.strCommentEnd;
	var strCommentEnd = str1 != null && str1.length > 0 ? StringTools.trim(str1) : str1;
	var strCommentPrefix = settings.strCommentPrefix;
	var esc = wiggin_util_RegExUtil.escapeRegexChars;
	var cprefix = esc(strCommentPrefix != null && strCommentPrefix.length > 0 ? StringTools.trim(strCommentPrefix) : strCommentPrefix);
	var cbegin = esc(strCommentBegin);
	var cend = esc(strCommentEnd);
	var cend1 = esc(HxOverrides.substr(strCommentEnd,0,1));
	var cend2 = esc(strCommentEnd.substring(1));
	var onEnterRules = [{ beforeText : new RegExp("^\\s*" + cbegin + "(?!" + cend + ")([^" + cend1 + "]|" + cend1 + "(?!" + cend2 + "))*$"), afterText : new RegExp("^\\s*" + cend + "$"), action : { indentAction : vscode__$IndentAction_IndentAction_$Impl_$.IndentOutdent, appendText : strCommentPrefix}},{ beforeText : new RegExp("^\\s*" + cbegin + "(?!" + cend + ")([^" + cend1 + "]|" + cend1 + "(?!" + cend2 + "))*$"), action : { indentAction : vscode__$IndentAction_IndentAction_$Impl_$.None, appendText : strCommentPrefix}},{ beforeText : new RegExp("^(\\t|(\\ ))(\\t|(\\ ))*" + cprefix + "(\\ " + "([^" + cend1 + "]|" + cend1 + "(?!" + cend2 + "))*)?$"), action : { indentAction : vscode__$IndentAction_IndentAction_$Impl_$.None, appendText : StringTools.ltrim(strCommentPrefix)}}];
	wiggin_codedox_CodeDox.log("onEnter rules for " + settings.strLanguage + ":",{ fileName : "src/wiggin/codedox/EnterRules.hx", lineNumber : 85, className : "wiggin.codedox.EnterRules", methodName : "createRules"});
	wiggin_codedox_CodeDox.log(onEnterRules,{ fileName : "src/wiggin/codedox/EnterRules.hx", lineNumber : 86, className : "wiggin.codedox.EnterRules", methodName : "createRules"});
	return onEnterRules;
};
var wiggin_codedox_FileHeader = function() {
};
wiggin_codedox_FileHeader.__name__ = true;
wiggin_codedox_FileHeader.addDefaultParams = function(map,strLang) {
	wiggin_util_ParamUtil.addDefaultParams(map);
	var settings = wiggin_codedox_Settings.fetch(strLang);
	var strValue = settings.strCommentBegin;
	if(!(__map_reserved["commentbegin"] != null ? map.existsReserved("commentbegin") : map.h.hasOwnProperty("commentbegin"))) {
		if(__map_reserved["commentbegin"] != null) {
			map.setReserved("commentbegin",strValue);
		} else {
			map.h["commentbegin"] = strValue;
		}
	}
	var strValue1 = settings.strCommentPrefix;
	if(!(__map_reserved["commentprefix"] != null ? map.existsReserved("commentprefix") : map.h.hasOwnProperty("commentprefix"))) {
		if(__map_reserved["commentprefix"] != null) {
			map.setReserved("commentprefix",strValue1);
		} else {
			map.h["commentprefix"] = strValue1;
		}
	}
	var strValue2 = settings.strCommentEnd;
	if(!(__map_reserved["commentend"] != null ? map.existsReserved("commentend") : map.h.hasOwnProperty("commentend"))) {
		if(__map_reserved["commentend"] != null) {
			map.setReserved("commentend",strValue2);
		} else {
			map.h["commentend"] = strValue2;
		}
	}
	var strValue3 = settings.strHeaderBegin;
	if(!(__map_reserved["headerbegin"] != null ? map.existsReserved("headerbegin") : map.h.hasOwnProperty("headerbegin"))) {
		if(__map_reserved["headerbegin"] != null) {
			map.setReserved("headerbegin",strValue3);
		} else {
			map.h["headerbegin"] = strValue3;
		}
	}
	var strValue4 = settings.strHeaderPrefix;
	if(!(__map_reserved["headerprefix"] != null ? map.existsReserved("headerprefix") : map.h.hasOwnProperty("headerprefix"))) {
		if(__map_reserved["headerprefix"] != null) {
			map.setReserved("headerprefix",strValue4);
		} else {
			map.h["headerprefix"] = strValue4;
		}
	}
	var strValue5 = settings.strHeaderEnd;
	if(!(__map_reserved["headerend"] != null ? map.existsReserved("headerend") : map.h.hasOwnProperty("headerend"))) {
		if(__map_reserved["headerend"] != null) {
			map.setReserved("headerend",strValue5);
		} else {
			map.h["headerend"] = strValue5;
		}
	}
};
wiggin_codedox_FileHeader.addDefaultLicenses = function(map) {
	var arr = wiggin_codedox_Setup.getDefaultLicenses();
	var _g = 0;
	while(_g < arr.length) {
		var license = arr[_g];
		++_g;
		var strKey = license.name;
		var strValue = license.text.join("\n");
		if(!(__map_reserved[strKey] != null ? map.existsReserved(strKey) : map.h.hasOwnProperty(strKey))) {
			if(__map_reserved[strKey] != null) {
				map.setReserved(strKey,strValue);
			} else {
				map.h[strKey] = strValue;
			}
		}
	}
};
wiggin_codedox_FileHeader.setNeverAsk = function() {
	var config = Vscode.workspace.getConfiguration();
	var update = { neverAskTemplate : true};
	wiggin_util_ConfigUtil.update(config,"codedox",update).then(function(Void1) {
		wiggin_codedox_CodeDox.log("codedox" + ".neverAskTemplate set to true successfully.",{ fileName : "src/wiggin/codedox/FileHeader.hx", lineNumber : 248, className : "wiggin.codedox.FileHeader", methodName : "setNeverAsk"});
	},function(result) {
		wiggin_codedox_CodeDox.log("Failed to set " + "codedox" + ".neverAskTemplate",{ fileName : "src/wiggin/codedox/FileHeader.hx", lineNumber : 252, className : "wiggin.codedox.FileHeader", methodName : "setNeverAsk"});
		wiggin_codedox_CodeDox.log(result,{ fileName : "src/wiggin/codedox/FileHeader.hx", lineNumber : 253, className : "wiggin.codedox.FileHeader", methodName : "setNeverAsk"});
	});
};
wiggin_codedox_FileHeader.prototype = {
	insertFileHeader: function(line,editor,edit) {
		var str = this.getFileHeader(editor.document.languageId);
		var doc = editor.document;
		var range = new vscode_Range(doc.positionAt(0),doc.positionAt(str.length));
		var strDoc = doc.getText(range);
		if(str.length == 0 || strDoc != str) {
			if(line != null) {
				edit.replace(line.rangeIncludingLineBreak,str);
			} else {
				edit.insert(new vscode_Position(0,0),str);
			}
		}
	}
	,getFileHeader: function(strLang) {
		var strTemplate = this.getTemplate(strLang);
		strTemplate = this.populateTemplate(strTemplate,strLang);
		return strTemplate + "\n";
	}
	,getTemplate: function(strLang) {
		var _gthis = this;
		var config = Vscode.workspace.getConfiguration();
		var template = this.getTemplateConfig(strLang);
		if(template == null || template.length == 0) {
			if(config.get("codedox" + ".neverAskTemplate",false)) {
				throw new js__$Boot_HaxeError("");
			}
			var msg = "codedox" + ": No file header template defined for " + strLang + ". Would you like to configure this feature?";
			var item1 = { title : "Yes"};
			var item2 = { title : "No", isCloseAffordance : true};
			var item3 = { title : "Never"};
			Vscode.window.showErrorMessage(msg,item1,item2,item3).then(function(item) {
				if(item.title == item1.title) {
					var ctx = { count : 0, strLang : strLang};
					Vscode.commands.executeCommand("codedox" + ".setup").then(function(bResult) {
						_gthis.onSetupComplete(bResult,ctx);
					});
				} else if(item.title == item3.title) {
					wiggin_codedox_FileHeader.setNeverAsk();
				}
			});
			template = [""];
		}
		return template.join("\n");
	}
	,onSetupComplete: function(bResult,cxt) {
		var _gthis = this;
		if(bResult) {
			var template = this.getTemplateConfig(cxt.strLang);
			if(template == null || template.length == 0) {
				if(cxt.count <= 10) {
					wiggin_codedox_CodeDox.log("template still empty. Trying again, count=" + cxt.count,{ fileName : "src/wiggin/codedox/FileHeader.hx", lineNumber : 148, className : "wiggin.codedox.FileHeader", methodName : "onSetupComplete"});
					cxt.count++;
					global.setTimeout(function() {
						_gthis.onSetupComplete(bResult,cxt);
					},250);
				}
			} else {
				global.setTimeout(function() {
					Vscode.commands.executeCommand("codedox" + ".fileheader" + ".insert");
				},10);
			}
		}
	}
	,getTemplateConfig: function(strLang) {
		var config = Vscode.workspace.getConfiguration();
		var template = config.get("codedox" + ".fileheader" + ".templates" + "." + strLang,null);
		if(template == null) {
			template = config.get("codedox" + ".fileheader" + ".templates" + ".*",null);
		}
		return template;
	}
	,populateTemplate: function(strTemplate,strLang) {
		var config = Vscode.workspace.getConfiguration();
		var paramsStar = config.get("codedox" + ".fileheader" + ".params" + ".*",null);
		var paramsLang = config.get("codedox" + ".fileheader" + ".params" + "." + strLang,null);
		var params = wiggin_util_StructUtil.mergeStruct(paramsStar,paramsLang);
		var mapParams;
		if(params != null && Type["typeof"](params) == ValueType.TObject) {
			var o = params;
			mapParams = (o == null ? null : js_Boot.getClass(o)) == null;
		} else {
			mapParams = false;
		}
		var mapParams1 = mapParams ? wiggin_util_JsonUtil.structToMap(params) : new haxe_ds_StringMap();
		wiggin_codedox_FileHeader.addDefaultParams(mapParams1,strLang);
		wiggin_codedox_FileHeader.addDefaultLicenses(mapParams1);
		var strRet = wiggin_util_ParamUtil.applyParams(strTemplate,mapParams1);
		return strRet;
	}
	,__class__: wiggin_codedox_FileHeader
};
var wiggin_codedox_Settings = function(strLanguage) {
	var config = Vscode.workspace.getConfiguration();
	var ctx = { strLanguage : strLanguage, config : config};
	var strCommentBegin = this.getProp("commentbegin","/**",ctx);
	var strHeaderBegin = this.getProp("headerbegin","/*",ctx);
	var strAutoClose = wiggin_codedox_Settings.getAutoClosingClose(strCommentBegin,false);
	var strAutoCloseAlt = wiggin_codedox_Settings.getAutoClosingClose(strCommentBegin,true);
	this.strLanguage = strLanguage;
	this.autoPrefixOnEnter = this.getProp("autoPrefixOnEnter",true,ctx);
	this.autoInsert = this.getProp("autoInsert",true,ctx);
	this.autoInsertHeader = this.getProp("autoInsertHeader",true,ctx);
	this.strParamFormat = this.getProp("paramFormat","@param ${name} ",ctx);
	this.strReturnFormat = this.getProp("returnFormat","@return ${type}",ctx);
	this.strCommentBegin = strCommentBegin;
	this.strCommentEnd = this.getProp("commentend"," */",ctx);
	this.strCommentPrefix = this.getProp("commentprefix"," * ",ctx);
	this.strCommentDescription = this.getProp("commentdescription","[Description]",ctx);
	this.strCommentToken = "[]";
	this.strCommentTrigger = wiggin_util_StringUtil.right(strCommentBegin,1);
	this.alwaysMultiline = this.getProp("alwaysMultiline",true,ctx);
	this.strAutoClosingClose = strAutoClose != null ? strAutoClose : "";
	this.strAutoClosingCloseAlt = strAutoCloseAlt != null ? strAutoCloseAlt : "";
	this.strHeaderBegin = this.getProp("headerbegin","/*",ctx);
	this.strHeaderEnd = this.getProp("headerend"," */",ctx);
	this.strHeaderPrefix = this.getProp("headerprefix"," *",ctx);
	this.strHeaderTrigger = wiggin_util_StringUtil.right(strHeaderBegin,1);
	this.allowOptionalArgs = this.getProp("allowOptionalArgs",false,ctx);
};
wiggin_codedox_Settings.__name__ = true;
wiggin_codedox_Settings.fetch = function(strLanguage) {
	if(strLanguage == null) {
		strLanguage = "<none>";
	}
	var _this = wiggin_codedox_Settings.s_mapCache;
	var settings = __map_reserved[strLanguage] != null ? _this.getReserved(strLanguage) : _this.h[strLanguage];
	if(settings == null) {
		settings = new wiggin_codedox_Settings(strLanguage);
		var _this1 = wiggin_codedox_Settings.s_mapCache;
		if(__map_reserved[strLanguage] != null) {
			_this1.setReserved(strLanguage,settings);
		} else {
			_this1.h[strLanguage] = settings;
		}
	}
	return settings;
};
wiggin_codedox_Settings.clearCache = function() {
	wiggin_codedox_Settings.s_mapCache = new haxe_ds_StringMap();
};
wiggin_codedox_Settings.getSupportedLanguages = function() {
	var arr = ["haxe"];
	var config = Vscode.workspace.getConfiguration();
	var langs = config.get(wiggin_codedox_Settings.LANGUAGES);
	if(langs != null) {
		var _g = 0;
		var _g1 = Reflect.fields(langs);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != "haxe") {
				arr.push(key);
			}
		}
	}
	return arr;
};
wiggin_codedox_Settings.getAutoClosingClose = function(strAutoClosingOpen,bAlt) {
	if(bAlt == null) {
		bAlt = false;
	}
	if(strAutoClosingOpen == "/**") {
		if(bAlt) {
			return "*/";
		} else {
			return "**/";
		}
	} else {
		return wiggin_util_StringUtil.reverse(strAutoClosingOpen);
	}
};
wiggin_codedox_Settings.prototype = {
	getProp: function(strKey,def,ctx) {
		var val = null;
		var strSubKey = wiggin_codedox_Settings.LANGUAGES + "." + ctx.strLanguage;
		if(ctx.config.has(strSubKey)) {
			val = ctx.config.get(strSubKey + "." + strKey);
		}
		if(val == null) {
			val = ctx.config.get("codedox" + "." + strKey);
			if(val == null) {
				val = def;
			}
		}
		return val;
	}
	,__class__: wiggin_codedox_Settings
};
var wiggin_codedox_Setup = function() {
	this.m_transaction = { scope : "User Settings", obj : { }};
};
wiggin_codedox_Setup.__name__ = true;
wiggin_codedox_Setup.getDefaultLicenses = function() {
	var str = js_node_Fs.readFileSync(wiggin_codedox_CodeDox.getExtPath() + "/defaultlicenses.json",{ encoding : "utf8"});
	var arr = JSON.parse(str);
	return arr;
};
wiggin_codedox_Setup.getCurrentCompany = function() {
	var config = Vscode.workspace.getConfiguration();
	var strCompany = null;
	var editor = Vscode.window.activeTextEditor;
	if(editor != null) {
		strCompany = config.get("codedox" + ".fileheader" + ".params" + "." + editor.document.languageId + ".company",null);
	}
	if(strCompany == null) {
		strCompany = config.get("codedox" + ".fileheader" + ".params" + ".*.company","");
	}
	return strCompany;
};
wiggin_codedox_Setup.prototype = {
	doSetup: function() {
		var _gthis = this;
		return new Promise(function(resolve,reject) {
			_gthis.pickScope().then($bind(_gthis,_gthis.pickDefaultLicense)).then($bind(_gthis,_gthis.inputCompany)).then($bind(_gthis,_gthis.applyConfig)).then(resolve,function(err) {
				if(err != null && Std.string(err) == "") {
					Vscode.window.showInformationMessage("Setup cancelled.");
					reject("");
				}
			});
		});
	}
	,pickScope: function() {
		var _gthis = this;
		var prom = new Promise(function(resolve,reject) {
			var item1 = { label : "User Settings", description : "Stored globally, applies to any instance of VS Code"};
			var item2 = { label : "Workspace Settings", description : "Stored inside current workspace in the .vscode folder"};
			if(Vscode.workspace.workspaceFolders.length > 0) {
				_gthis.m_transaction.scope = "User Settings";
				resolve(true);
			}
			Vscode.window.showQuickPick([item1,item2],{ placeHolder : "Where should these settings be stored?"}).then(function(item) {
				if(item != null) {
					_gthis.m_transaction.scope = item.label == "User Settings" ? "User Settings" : "Workspace Settings";
					resolve(true);
				} else {
					reject("");
				}
			},function(err) {
				reject(err);
			});
		});
		return prom;
	}
	,pickDefaultLicense: function(Void1) {
		var _gthis = this;
		var prom = new Promise(function(resolve,reject) {
			var arr = wiggin_codedox_Setup.getDefaultLicenses();
			var items = [];
			var _g = 0;
			while(_g < arr.length) {
				var license = arr[_g];
				++_g;
				items.push({ label : license.description, description : license.name});
			}
			Vscode.window.showQuickPick(items,{ placeHolder : "Select a default license"}).then(function(item) {
				if(item != null) {
					var str = "${" + item.description + "}";
					var update = { fileheader : { templates : { "*" : [str]}}};
					_gthis.m_transaction.obj = wiggin_util_StructUtil.mergeStruct(_gthis.m_transaction.obj,update);
					resolve(true);
				} else {
					reject("");
				}
			},function(err) {
				reject(err);
			});
		});
		return prom;
	}
	,inputCompany: function(Void1) {
		var _gthis = this;
		var prom = new Promise(function(resolve,reject) {
			var strCompany = wiggin_codedox_Setup.getCurrentCompany();
			Vscode.window.showInputBox({ prompt : "Enter your company or author name", value : strCompany}).then(function(strInput) {
				if(strInput != null && strInput.length > 0) {
					var editor = Vscode.window.activeTextEditor;
					var paramBranch = editor != null ? editor.document.languageId : "*";
					var param = { };
					param[paramBranch] = { company : strInput};
					var update = { fileheader : { params : param}};
					_gthis.m_transaction.obj = wiggin_util_StructUtil.mergeStruct(_gthis.m_transaction.obj,update);
					resolve(true);
				} else {
					reject("");
				}
			},function(err) {
				reject(err);
			});
		});
		return prom;
	}
	,applyConfig: function(Void1) {
		var _gthis = this;
		var prom = new Promise(function(resolve,reject) {
			var config = Vscode.workspace.getConfiguration();
			wiggin_util_ConfigUtil.update(config,"codedox",_gthis.m_transaction.obj,_gthis.m_transaction.scope).then(function(Void2) {
				wiggin_codedox_CodeDox.log("codedox" + "Config updated successfully.",{ fileName : "src/wiggin/codedox/Setup.hx", lineNumber : 194, className : "wiggin.codedox.Setup", methodName : "applyConfig"});
				resolve(true);
			},function(reason) {
				wiggin_codedox_CodeDox.log("Failed to update " + "codedox" + " config.",{ fileName : "src/wiggin/codedox/Setup.hx", lineNumber : 199, className : "wiggin.codedox.Setup", methodName : "applyConfig"});
				wiggin_codedox_CodeDox.log(reason,{ fileName : "src/wiggin/codedox/Setup.hx", lineNumber : 200, className : "wiggin.codedox.Setup", methodName : "applyConfig"});
				var str = _gthis.m_transaction.scope == "User Settings" ? "user settings.json" : "workspace settings.json";
				reject("Error updating config. Check for errors in your " + str + " and try again.");
			});
		});
		return prom;
	}
	,__class__: wiggin_codedox_Setup
};
var wiggin_util__$ConfigUtil_Scope_$Impl_$ = {};
wiggin_util__$ConfigUtil_Scope_$Impl_$.__name__ = true;
wiggin_util__$ConfigUtil_Scope_$Impl_$.isGlobal = function(scope) {
	return scope == "User Settings";
};
wiggin_util__$ConfigUtil_Scope_$Impl_$.isWorkspace = function(scope) {
	return scope == "Workspace Settings";
};
wiggin_util__$ConfigUtil_Scope_$Impl_$.isDefault = function(scope) {
	return scope == "Default Settings";
};
var wiggin_util_ConfigUtil = function() { };
wiggin_util_ConfigUtil.__name__ = true;
wiggin_util_ConfigUtil.update = function(config,strSection,update,scope) {
	if(scope == null) {
		scope = "User Settings";
	}
	var prom = new Promise(function(resolve,reject) {
		var inspect = config.inspect(strSection);
		var curr;
		if(inspect != null) {
			if(scope == null) {
				curr = { };
			} else {
				switch(scope) {
				case "Default Settings":
					curr = inspect.defaultValue;
					break;
				case "User Settings":
					curr = inspect.globalValue;
					break;
				case "Workspace Settings":
					curr = inspect.workspaceValue;
					break;
				default:
					curr = { };
				}
			}
		} else {
			curr = { };
		}
		var merged = wiggin_util_StructUtil.mergeStruct(curr,update);
		config.update(strSection,merged,scope == "User Settings").then(resolve,reject);
	});
	return prom;
};
wiggin_util_ConfigUtil.updateIfAbsent = function(config,strSection,update,scope) {
	if(scope == null) {
		scope = "User Settings";
	}
	var prom = new Promise(function(resolve,reject) {
		var curr = config.get(strSection,null);
		if(curr == null) {
			curr = { };
		}
		var merged = wiggin_util_StructUtil.mergeStruct(update,curr);
		config.update(strSection,merged,scope == "User Settings").then(resolve,reject);
	});
	return prom;
};
var wiggin_util__$DynamicObject_DynamicObject_$Impl_$ = {};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.__name__ = true;
wiggin_util__$DynamicObject_DynamicObject_$Impl_$._new = function(obj) {
	var this1 = obj == null ? { } : obj;
	return this1;
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.set = function(this1,key,value) {
	this1[key] = value;
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.get = function(this1,key) {
	return this1[key];
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.keys = function(this1) {
	return Reflect.fields(this1);
};
var wiggin_util_JsonUtil = function() { };
wiggin_util_JsonUtil.__name__ = true;
wiggin_util_JsonUtil.isStruct = function(obj) {
	if(obj != null && Type["typeof"](obj) == ValueType.TObject) {
		var o = obj;
		return (o == null ? null : js_Boot.getClass(o)) == null;
	} else {
		return false;
	}
};
wiggin_util_JsonUtil.isArray = function(obj) {
	if((obj instanceof Array)) {
		return obj.__enum__ == null;
	} else {
		return false;
	}
};
wiggin_util_JsonUtil.structToMap = function(obj) {
	var map = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(obj);
	while(_g < _g1.length) {
		var fname = _g1[_g];
		++_g;
		var value = Reflect.field(obj,fname);
		if(__map_reserved[fname] != null) {
			map.setReserved(fname,value);
		} else {
			map.h[fname] = value;
		}
	}
	return map;
};
var wiggin_util_MathUtil = function() { };
wiggin_util_MathUtil.__name__ = true;
wiggin_util_MathUtil.min = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
wiggin_util_MathUtil.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
var wiggin_util_ParamUtil = function() { };
wiggin_util_ParamUtil.__name__ = true;
wiggin_util_ParamUtil.applyParams = function(strTemplate,mapParams) {
	var mapParamsNorm = wiggin_util_ParamUtil.normalizeParams(mapParams);
	var bChanged = true;
	var strChanged;
	var regex_r;
	while(bChanged) {
		bChanged = false;
		var key = mapParamsNorm.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			regex_r = new RegExp(key1,"gi".split("u").join(""));
			var by = __map_reserved[key1] != null ? mapParamsNorm.getReserved(key1) : mapParamsNorm.h[key1];
			strChanged = strTemplate.replace(regex_r,by);
			bChanged = bChanged || strChanged != strTemplate;
			strTemplate = strChanged;
		}
	}
	return strTemplate;
};
wiggin_util_ParamUtil.normalizeParams = function(params) {
	var map = new haxe_ds_StringMap();
	var val;
	var str;
	var key = params.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		val = __map_reserved[key1] != null ? params.getReserved(key1) : params.h[key1];
		if((val instanceof Array) && val.__enum__ == null) {
			var arrString = [];
			var arr = js_Boot.__cast(val , Array);
			var _g = 0;
			while(_g < arr.length) {
				var elem = arr[_g];
				++_g;
				arrString.push(Std.string(elem));
			}
			str = arrString.join("\n");
		} else {
			str = Std.string(val);
		}
		if(str != null) {
			var strKeyEsc = wiggin_util_RegExUtil.escapeRegExPattern("${" + key1 + "}");
			if(__map_reserved[strKeyEsc] != null) {
				map.setReserved(strKeyEsc,str);
			} else {
				map.h[strKeyEsc] = str;
			}
		}
	}
	return map;
};
wiggin_util_ParamUtil.addDefaultParams = function(map) {
	var date = new Date();
	var strValue = Std.string(date.getFullYear());
	if(!(__map_reserved["year"] != null ? map.existsReserved("year") : map.h.hasOwnProperty("year"))) {
		if(__map_reserved["year"] != null) {
			map.setReserved("year",strValue);
		} else {
			map.h["year"] = strValue;
		}
	}
	var strValue1 = Std.string(date.getMonth() + 1);
	if(!(__map_reserved["month"] != null ? map.existsReserved("month") : map.h.hasOwnProperty("month"))) {
		if(__map_reserved["month"] != null) {
			map.setReserved("month",strValue1);
		} else {
			map.h["month"] = strValue1;
		}
	}
	var strValue2 = Std.string(date.getDate());
	if(!(__map_reserved["day"] != null ? map.existsReserved("day") : map.h.hasOwnProperty("day"))) {
		if(__map_reserved["day"] != null) {
			map.setReserved("day",strValue2);
		} else {
			map.h["day"] = strValue2;
		}
	}
	var strValue3 = HxOverrides.dateStr(date);
	if(!(__map_reserved["timestamp"] != null ? map.existsReserved("timestamp") : map.h.hasOwnProperty("timestamp"))) {
		if(__map_reserved["timestamp"] != null) {
			map.setReserved("timestamp",strValue3);
		} else {
			map.h["timestamp"] = strValue3;
		}
	}
	var strValue4 = DateTools.format(date,"%T");
	if(!(__map_reserved["time24h"] != null ? map.existsReserved("time24h") : map.h.hasOwnProperty("time24h"))) {
		if(__map_reserved["time24h"] != null) {
			map.setReserved("time24h",strValue4);
		} else {
			map.h["time24h"] = strValue4;
		}
	}
	var strValue5 = DateTools.format(date,"%F");
	if(!(__map_reserved["date"] != null ? map.existsReserved("date") : map.h.hasOwnProperty("date"))) {
		if(__map_reserved["date"] != null) {
			map.setReserved("date",strValue5);
		} else {
			map.h["date"] = strValue5;
		}
	}
	var strValue6 = DateTools.format(date,"%l:%M:%S %p");
	if(!(__map_reserved["time"] != null ? map.existsReserved("time") : map.h.hasOwnProperty("time"))) {
		if(__map_reserved["time"] != null) {
			map.setReserved("time",strValue6);
		} else {
			map.h["time"] = strValue6;
		}
	}
	var editor = Vscode.window.activeTextEditor;
	if(editor != null && editor.document != null) {
		var strValue7 = wiggin_util_PathUtil.parseFilename(editor.document.fileName);
		if(!(__map_reserved["fname"] != null ? map.existsReserved("fname") : map.h.hasOwnProperty("fname"))) {
			if(__map_reserved["fname"] != null) {
				map.setReserved("fname",strValue7);
			} else {
				map.h["fname"] = strValue7;
			}
		}
		var strValue8 = editor.document.fileName;
		if(!(__map_reserved["fspec"] != null ? map.existsReserved("fspec") : map.h.hasOwnProperty("fspec"))) {
			if(__map_reserved["fspec"] != null) {
				map.setReserved("fspec",strValue8);
			} else {
				map.h["fspec"] = strValue8;
			}
		}
		var rel = Vscode.workspace.asRelativePath(editor.document.uri,false);
		if(!(__map_reserved["frel"] != null ? map.existsReserved("frel") : map.h.hasOwnProperty("frel"))) {
			if(__map_reserved["frel"] != null) {
				map.setReserved("frel",rel);
			} else {
				map.h["frel"] = rel;
			}
		}
	}
};
wiggin_util_ParamUtil.setIfAbsent = function(map,strKey,strValue) {
	if(!(__map_reserved[strKey] != null ? map.existsReserved(strKey) : map.h.hasOwnProperty(strKey))) {
		if(__map_reserved[strKey] != null) {
			map.setReserved(strKey,strValue);
		} else {
			map.h[strKey] = strValue;
		}
	}
};
var wiggin_util_Direction = $hxEnums["wiggin.util.Direction"] = { __ename__ : true, __constructs__ : ["Forward","Backward"]
	,Forward: {_hx_index:0,__enum__:"wiggin.util.Direction",toString:$estr}
	,Backward: {_hx_index:1,__enum__:"wiggin.util.Direction",toString:$estr}
};
var wiggin_util_ParseUtil = function() { };
wiggin_util_ParseUtil.__name__ = true;
wiggin_util_ParseUtil.splitByCommas = function(str) {
	var arr = [];
	if(str != null && str.length > 0) {
		var strToken = "";
		var strOpenQuote = "\"'<({[";
		var strCloseQuote = "\"'>)}]";
		var strMatchingQuote = "";
		var bInsideQuotes = false;
		var bNextIsLiteral = false;
		var ch = new wiggin_util_StringIterator(str);
		while(ch.hasNext()) {
			var ch1 = ch.next();
			if(bNextIsLiteral) {
				strToken += ch1;
				bNextIsLiteral = false;
			} else if(bInsideQuotes) {
				if(ch1 == "\\") {
					bNextIsLiteral = true;
				} else {
					strToken += ch1;
					if(ch1 == strMatchingQuote) {
						bInsideQuotes = false;
					}
				}
			} else if(ch1 == ",") {
				arr.push(StringTools.trim(strToken));
				strToken = "";
			} else {
				strToken += ch1;
				var idx = strOpenQuote.indexOf(ch1);
				if(idx > -1) {
					strMatchingQuote = strCloseQuote.charAt(idx);
					bInsideQuotes = true;
				}
			}
		}
		arr.push(StringTools.trim(strToken));
	}
	return arr;
};
wiggin_util_ParseUtil.findLine = function(doc,pos,dir,regex) {
	pos = doc.validatePosition(pos);
	var iDir = dir == wiggin_util_Direction.Forward ? 1 : -1;
	var lineFound = null;
	var iMaxLine = doc.lineCount - 1;
	var iLine = pos.line;
	var line;
	while(iLine >= 0 && iLine <= iMaxLine) {
		line = doc.lineAt(iLine);
		if(line != null && regex.match(line.text)) {
			lineFound = line;
			break;
		}
		iLine += iDir;
	}
	return lineFound;
};
wiggin_util_ParseUtil.findTextInLine = function(line,iStartChar,strText) {
	if(iStartChar == null) {
		iStartChar = 0;
	}
	var ft = null;
	var strLine = line.text;
	if(strLine != null && strLine.length > 0 && iStartChar < strLine.length) {
		var i = strLine.indexOf(strText,iStartChar);
		if(i != -1) {
			ft = { posStart : new vscode_Position(line.lineNumber,i), posEnd : new vscode_Position(line.lineNumber,i + strText.length)};
		}
	}
	return ft;
};
wiggin_util_ParseUtil.findText = function(doc,posStart,strText) {
	posStart = posStart == null ? new vscode_Position(0,0) : doc.validatePosition(posStart);
	var ft = null;
	var iMaxLine = doc.lineCount - 1;
	var iLine = posStart.line;
	var iStartIndex = posStart.character;
	var line;
	while(iLine >= 0 && iLine <= iMaxLine) {
		line = doc.lineAt(iLine);
		if(line != null) {
			ft = wiggin_util_ParseUtil.findTextInLine(line,iStartIndex,strText);
			if(ft != null) {
				break;
			}
			iStartIndex = 0;
		}
		++iLine;
	}
	return ft;
};
wiggin_util_ParseUtil.findPrevBlankLine = function(editor,pos) {
	var doc = editor.document;
	var posBack = pos["with"]({ character : 0});
	while(posBack.line > 0) {
		var line = doc.lineAt(posBack);
		if(line.isEmptyOrWhitespace) {
			break;
		}
		var strLine = line.text;
		if(strLine.indexOf("}") != -1 || strLine.indexOf(";") != -1) {
			posBack = posBack["with"]({ line : posBack.line + 1});
			editor.edit(function(tee) {
				tee.insert(posBack,"\n");
			});
			posBack = posBack["with"]({ line : posBack.line + 1});
			break;
		}
		posBack = posBack["with"]({ line : posBack.line - 1});
	}
	return posBack;
};
wiggin_util_ParseUtil.getIndent = function(doc,pos) {
	var workspace = Vscode.workspace;
	var settings = workspace.getConfiguration();
	var iTabSize = settings.get("editor.tabSize",1);
	var bInsertSpaces = settings.get("editor.insertSpaces",true);
	var strIndent;
	var line = wiggin_util_ParseUtil.findLine(doc,pos,wiggin_util_Direction.Backward,new EReg("[^\\s]",""));
	if(line != null && StringTools.startsWith(line.text,"{")) {
		strIndent = wiggin_util_ParseUtil.makeIndent(iTabSize,bInsertSpaces,iTabSize);
	} else if(line != null) {
		strIndent = line.text.substring(0,line.firstNonWhitespaceCharacterIndex);
	} else {
		strIndent = "";
	}
	return strIndent;
};
wiggin_util_ParseUtil.makeIndent = function(iIndent,bInsertSpaces,iTabSize) {
	var strIndent;
	if(bInsertSpaces) {
		strIndent = wiggin_util_StringUtil.padTail("",iIndent," ");
	} else {
		var iTabs = Math.floor(iIndent / iTabSize);
		strIndent = wiggin_util_StringUtil.padTail("",iTabs,"\t");
		strIndent += wiggin_util_StringUtil.padTail("",iIndent - iTabs * iTabSize," ");
	}
	return strIndent;
};
var wiggin_util_PathUtil = function() { };
wiggin_util_PathUtil.__name__ = true;
wiggin_util_PathUtil.parseFilename = function(str) {
	var path = new haxe_io_Path(str);
	var str1 = path.file;
	var strRet = str1 != null ? str1 : "";
	if(path.ext != null) {
		strRet += "." + path.ext;
	}
	return strRet;
};
wiggin_util_PathUtil.toEmpty = function(str) {
	if(str != null) {
		return str;
	} else {
		return "";
	}
};
var wiggin_util_RegExUtil = function() { };
wiggin_util_RegExUtil.__name__ = true;
wiggin_util_RegExUtil.escapeRegExPattern = function(strPattern) {
	var r_r = new RegExp("([\\\\*+\\[\\](){}\\$.?\\^|])","g".split("u").join(""));
	return strPattern.replace(r_r,"\\$1");
};
wiggin_util_RegExUtil.escapeRegexChars = function(strChars) {
	if(!(strChars != null && strChars.length > 0)) {
		return "";
	}
	var sb_b = "";
	var it = new wiggin_util_StringIterator(strChars);
	var arrMeta = ["^","[",".","$","{","*","(","\\","/","+",")","|","?","<",">"," "];
	var ch = it;
	while(ch.hasNext()) {
		var ch1 = ch.next();
		if(wiggin_util_StringUtil.contains(ch1,arrMeta)) {
			sb_b += "\\";
		}
		sb_b += ch1 == null ? "null" : "" + ch1;
	}
	return sb_b;
};
var wiggin_util_StringUtil = function() { };
wiggin_util_StringUtil.__name__ = true;
wiggin_util_StringUtil.hasChars = function(str) {
	if(str != null) {
		return str.length > 0;
	} else {
		return false;
	}
};
wiggin_util_StringUtil.onlyWhitespace = function(str) {
	var str1 = str != null && str.length > 0 ? StringTools.trim(str) : str;
	return !(str1 != null && str1.length > 0);
};
wiggin_util_StringUtil.removeWhitespace = function(str) {
	if(!(str != null && str.length > 0)) {
		return str;
	}
	var r_r = new RegExp("\\s","g".split("u").join(""));
	var strOut = str.replace(r_r,"");
	return strOut;
};
wiggin_util_StringUtil.trim = function(str) {
	if(str != null && str.length > 0) {
		return StringTools.trim(str);
	} else {
		return str;
	}
};
wiggin_util_StringUtil.replaceAll = function(str,strSub,strRepl) {
	return StringTools.replace(str,strSub,strRepl);
};
wiggin_util_StringUtil.padTail = function(str,iMinSize,charPad) {
	str = str == null ? "" : str;
	iMinSize = iMinSize < 0 ? 0 : iMinSize;
	if(str.length >= iMinSize || !(charPad != null && charPad.length > 0)) {
		return str;
	} else {
		return StringTools.rpad(str,charPad,iMinSize);
	}
};
wiggin_util_StringUtil.toEmptyIfNull = function(str) {
	if(str == null) {
		return "";
	} else {
		return str;
	}
};
wiggin_util_StringUtil.escapeWhitespace = function(str) {
	if(!(str != null && str.length > 0)) {
		return str;
	}
	str = StringTools.replace(str,"\t","\\t");
	str = StringTools.replace(str,"\n","\\n");
	str = StringTools.replace(str,"\r","\\r");
	str = StringTools.replace(str," ","\\s");
	return str;
};
wiggin_util_StringUtil.iterator = function(str) {
	return new wiggin_util_StringIterator(str);
};
wiggin_util_StringUtil.right = function(str,iCount) {
	var strRight = null;
	if(str != null) {
		var iSrcLen = str.length;
		if(iCount == 0) {
			strRight = "";
		} else if(iCount >= iSrcLen) {
			strRight = str;
		} else {
			strRight = str.substring(iSrcLen - iCount,iSrcLen);
		}
	}
	return strRight;
};
wiggin_util_StringUtil.left = function(str,iCount) {
	var strLeft = null;
	if(str != null) {
		var iSrcLen = str.length;
		if(iCount == 0) {
			strLeft = "";
		} else if(iCount >= iSrcLen) {
			strLeft = str;
		} else {
			strLeft = str.substring(0,iCount);
		}
	}
	return strLeft;
};
wiggin_util_StringUtil.reverse = function(str) {
	if(str == null || str == "") {
		return str;
	}
	var sb_b = "";
	var _g = -str.length + 1;
	var _g1 = 1;
	while(_g < _g1) {
		var i = _g++;
		sb_b += String.fromCodePoint(str.charCodeAt(-i));
	}
	return sb_b;
};
wiggin_util_StringUtil.contains = function(str,arrStrSub) {
	var _g = 0;
	while(_g < arrStrSub.length) {
		var strSub = arrStrSub[_g];
		++_g;
		if(str.indexOf(strSub) != -1) {
			return true;
		}
	}
	return false;
};
wiggin_util_StringUtil.startsWith = function(str,strStart) {
	if(str != null && strStart != null) {
		return StringTools.startsWith(str,strStart);
	} else {
		return false;
	}
};
wiggin_util_StringUtil.endsWith = function(str,strEnd) {
	if(str != null && strEnd != null) {
		return StringTools.startsWith(str,strEnd);
	} else {
		return false;
	}
};
var wiggin_util_StringIterator = function(s) {
	this.s = s == null ? "" : s;
	this.i = 0;
};
wiggin_util_StringIterator.__name__ = true;
wiggin_util_StringIterator.prototype = {
	hasNext: function() {
		return this.i < this.s.length;
	}
	,next: function() {
		return this.s.charAt(this.i++);
	}
	,__class__: wiggin_util_StringIterator
};
var wiggin_util_StructUtil = function() { };
wiggin_util_StructUtil.__name__ = true;
wiggin_util_StructUtil.isStruct = function(obj) {
	if(obj != null && Type["typeof"](obj) == ValueType.TObject) {
		var o = obj;
		return (o == null ? null : js_Boot.getClass(o)) == null;
	} else {
		return false;
	}
};
wiggin_util_StructUtil.mergeStruct = function(struct1,struct2) {
	if(struct1 == null) {
		return struct2;
	}
	if(struct2 == null) {
		return struct1;
	}
	if(struct1 == null && struct2 == null) {
		return null;
	}
	var merged = wiggin_util_StructUtil.deepClone(struct1);
	var source = struct2;
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var valMerged = merged[key];
		var valSource = source[key];
		var tmp;
		var tmp1;
		if(valSource != null && Type["typeof"](valSource) == ValueType.TObject) {
			var o = valSource;
			tmp1 = (o == null ? null : js_Boot.getClass(o)) == null;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			if(valMerged != null && Type["typeof"](valMerged) == ValueType.TObject) {
				var o1 = valMerged;
				tmp = (o1 == null ? null : js_Boot.getClass(o1)) == null;
			} else {
				tmp = false;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			merged[key] = wiggin_util_StructUtil.mergeStruct(valMerged,valSource);
		} else {
			merged[key] = valSource;
		}
	}
	return merged;
};
wiggin_util_StructUtil.deepClone = function(struct,filterCallback) {
	return wiggin_util_StructUtil.cloner(struct,filterCallback);
};
wiggin_util_StructUtil.cloner = function(struct,filterCallback,parentKey) {
	if(struct == null) {
		return null;
	}
	var input = struct;
	var copy = { };
	var _g = 0;
	var _g1 = Reflect.fields(input);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var keyFull = parentKey != null ? parentKey + "." + key : key;
		var val = input[key];
		var tmp;
		if(val != null && Type["typeof"](val) == ValueType.TObject) {
			var o = val;
			tmp = (o == null ? null : js_Boot.getClass(o)) == null;
		} else {
			tmp = false;
		}
		if(tmp) {
			copy[key] = wiggin_util_StructUtil.cloner(val,filterCallback,keyFull);
		} else if(filterCallback == null || filterCallback(keyFull,val)) {
			copy[key] = val;
		}
	}
	return copy;
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
js_Boot.__toStr = ({ }).toString;
wiggin_codedox_CodeDox.EXTENSION_NAME = "codedox";
wiggin_codedox_CodeDox.FEATURE_FILEHEADER = "codedox" + ".fileheader";
wiggin_codedox_CodeDox.FEATURE_COMMENT = "codedox" + ".comment";
wiggin_codedox_CodeDox.CMD_SETUP = "codedox" + ".setup";
wiggin_codedox_CodeDox.CMD_INSERT_FILE_HEADER = "codedox" + ".fileheader" + ".insert";
wiggin_codedox_CodeDox.CMD_INSERT_COMMENT = "codedox" + ".comment" + ".insert";
wiggin_codedox_FileHeader.TEMPLATES = "codedox" + ".fileheader" + ".templates";
wiggin_codedox_FileHeader.PARAMS = "codedox" + ".fileheader" + ".params";
wiggin_codedox_Settings.s_mapCache = new haxe_ds_StringMap();
wiggin_codedox_Settings.LANGUAGES = "codedox" + ".languages";
wiggin_util__$ConfigUtil_Scope_$Impl_$.USER = "User Settings";
wiggin_util__$ConfigUtil_Scope_$Impl_$.WORKSPACE = "Workspace Settings";
wiggin_util__$ConfigUtil_Scope_$Impl_$.DEFAULT = "Default Settings";
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
