// Generated by Haxe 4.0.0-preview.5+7eb789f54
(function () { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}var adapter_DebugSession = require("vscode-debugadapter").DebugSession;
var Adapter = function(obsolete_debuggerLinesAndColumnsStartAt1,obsolete_isServer) {
	adapter_DebugSession.call(this,obsolete_debuggerLinesAndColumnsStartAt1,obsolete_isServer);
};
Adapter.__name__ = true;
Adapter.main = function() {
	adapter_DebugSession.run(Adapter);
};
Adapter.__super__ = adapter_DebugSession;
Adapter.prototype = $extend(adapter_DebugSession.prototype,{
	traceToOutput: function(value,infos) {
		var msg = value;
		if(infos != null && infos.customParams != null) {
			msg += " " + infos.customParams.join(" ");
		}
		msg += "\n";
		this.sendEvent(new adapter_OutputEvent(msg));
	}
	,initializeRequest: function(response,args) {
		haxe_Log.trace = $bind(this,this.traceToOutput);
		this.sendEvent(new adapter_InitializedEvent());
		response.body.supportsSetVariable = true;
		response.body.supportsValueFormattingOptions = false;
		response.body.supportsCompletionsRequest = true;
		this.sendResponse(response);
		this.postLaunchActions = [];
	}
	,executePostLaunchActions: function(callback) {
		var _gthis = this;
		var loop = null;
		loop = function() {
			var action = _gthis.postLaunchActions.shift();
			if(action == null) {
				callback();
				return;
			}
			action(loop);
		};
		loop();
	}
	,launchRequest: function(response,args) {
		var _gthis = this;
		var args1 = args;
		var executable = args1.program;
		var onConnected = function(socket) {
			haxe_Log.trace("Debug server connected!",{ fileName : "src/Adapter.hx", lineNumber : 55, className : "Adapter", methodName : "launchRequest"});
			_gthis.connection = new Connection(socket);
			socket.on("error",function(error) {
				haxe_Log.trace("Socket error: " + Std.string(error),{ fileName : "src/Adapter.hx", lineNumber : 57, className : "Adapter", methodName : "launchRequest"});
			});
			_gthis.executePostLaunchActions(function() {
				_gthis.connection.sendCommand("continue",{ threadId : 0},function(_,_1) {
					_gthis.sendResponse(response);
					_gthis.connection.onEvent = $bind(_gthis,_gthis.onEvent);
				});
			});
		};
		var onExit = function(_2,_3) {
			_gthis.sendEvent(new adapter_TerminatedEvent(false));
		};
		var server = js_node_Net.createServer(onConnected);
		server.listen(6972,function() {
			var args2 = [];
			var haxeProcess = haxe_io_Path.directory(executable);
			var haxeProcess1 = js_node_ChildProcess.spawn(executable,args2,{ stdio : "pipe", cwd : haxeProcess});
			haxeProcess1.stdout.on("data",$bind(_gthis,_gthis.onStdout));
			haxeProcess1.stderr.on("data",$bind(_gthis,_gthis.onStderr));
			haxeProcess1.on("exit",onExit);
		});
	}
	,onStdout: function(data) {
		this.sendEvent(new adapter_OutputEvent(data.toString("utf-8"),"stdout"));
	}
	,onStderr: function(data) {
		this.sendEvent(new adapter_OutputEvent(data.toString("utf-8"),"stderr"));
	}
	,onEvent: function(type,data) {
		switch(type) {
		case "ThreadExit":
			var evt = new adapter_ThreadEvent("exited",data.threadId);
			this.sendEvent(evt);
			break;
		case "breakpointStop":
			this.sendEvent(new adapter_StoppedEvent("breakpoint",data.threadId));
			break;
		case "exceptionStop":
			var evt1 = new adapter_StoppedEvent("exception",0);
			evt1.body.text = data.text;
			this.sendEvent(evt1);
			break;
		case "pauseStop":
			this.sendEvent(new adapter_StoppedEvent("pause",data.threadId));
			break;
		case "threadStart":
			var evt2 = new adapter_ThreadEvent("started",data.threadId);
			this.sendEvent(evt2);
			break;
		}
	}
	,scopesRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("getScopes",args,function(error,scopeInfos) {
			var scopes = [];
			response.body = { scopes : scopes};
			var _g = 0;
			while(_g < scopeInfos.length) {
				var si = scopeInfos[_g];
				++_g;
				scopes.push({ name : si.name, variablesReference : si.id, expensive : false});
			}
			_gthis.sendResponse(response);
		});
	}
	,variablesRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("getVariables",args,function(error,varInfos) {
			var vars = [];
			response.body = { variables : vars};
			var _g = 0;
			while(_g < varInfos.length) {
				var vi = varInfos[_g];
				++_g;
				var variable = { name : vi.name, value : vi.value == null ? "null" : "" + vi.value, type : vi.type, variablesReference : vi.variablesReference};
				if(vi.indexedVariables != null) {
					variable.indexedVariables = vi.indexedVariables;
				}
				if(vi.namedVariables != null) {
					variable.namedVariables = vi.namedVariables;
				}
				vars.push(variable);
			}
			_gthis.sendResponse(response);
		});
	}
	,setVariableRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("setVariable",{ expr : args.name, value : args.value},function(error,varInfo) {
			if(varInfo != null) {
				response.body = { value : varInfo.value};
			}
			_gthis.sendResponse(response);
		});
	}
	,stepInRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("stepIn",{ },function(_,_1) {
			_gthis.sendResponse(response);
		});
	}
	,stepOutRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("stepOut",{ },function(_,_1) {
			_gthis.sendResponse(response);
		});
	}
	,nextRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("next",{ },function(_,_1) {
			_gthis.sendResponse(response);
		});
	}
	,stackTraceRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("stackTrace",{ threadId : args.threadId},function(error,result) {
			var r = [];
			var _g = 0;
			while(_g < result.length) {
				var info = result[_g];
				++_g;
				r.push({ id : info.id, name : info.name, source : { path : info.source}, line : info.line, column : info.column, endLine : info.endLine, endColumn : info.endColumn});
			}
			response.body = { stackFrames : r};
			_gthis.sendResponse(response);
		});
	}
	,threadsRequest: function(response) {
		var _gthis = this;
		if(this.connection != null) {
			this.connection.sendCommand("threads",null,function(error,result) {
				response.body = { threads : result};
				_gthis.sendResponse(response);
			});
		}
	}
	,pauseRequest: function(response,args) {
		this.connection.sendCommand("pause",{ });
		this.sendResponse(response);
	}
	,continueRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("continue",args,function(_,_1) {
			_gthis.sendResponse(response);
		});
	}
	,setBreakPointsRequest: function(response,args) {
		var _gthis = this;
		if(this.connection == null) {
			this.postLaunchActions.push(function(cb) {
				_gthis.doSetBreakpoints(response,args,cb);
			});
		} else {
			this.doSetBreakpoints(response,args,null);
		}
	}
	,doSetBreakpoints: function(response,args,callback) {
		var _gthis = this;
		var args1 = args.source.path;
		var _g = [];
		var _g1 = 0;
		var _g2 = args.breakpoints;
		while(_g1 < _g2.length) {
			var sbp = _g2[_g1];
			++_g1;
			var bp = { line : sbp.line};
			if(sbp.column != null) {
				bp.column = sbp.column;
			}
			if(sbp.condition != null) {
				bp.condition = sbp.condition;
			}
			_g.push(bp);
		}
		var params = { file : args1, breakpoints : _g};
		this.connection.sendCommand("setBreakpoints",params,function(error,result) {
			var _g3 = [];
			var _g4 = 0;
			while(_g4 < result.length) {
				var bp1 = result[_g4];
				++_g4;
				_g3.push({ verified : true, id : bp1.id});
			}
			response.body = { breakpoints : _g3};
			_gthis.sendResponse(response);
			if(callback != null) {
				callback();
			}
		});
	}
	,evaluateRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("evaluate",{ expr : args.expression, frameId : args.frameId},function(error,result) {
			if(error != null) {
				response.message = error.message;
				response.success = false;
			} else {
				response.success = true;
				response.body = { result : result.value, type : result.type, variablesReference : result.variablesReference};
				if(result.indexedVariables != null) {
					response.body.indexedVariables = result.indexedVariables;
				}
				if(result.namedVariables != null) {
					response.body.namedVariables = result.namedVariables;
				}
			}
			_gthis.sendResponse(response);
		});
	}
	,setExceptionBreakPointsRequest: function(response,args) {
	}
	,completionsRequest: function(response,args) {
		var _gthis = this;
		this.connection.sendCommand("completions",args,function(error,result) {
			if(result != null) {
				response.body = { targets : result};
			}
			_gthis.sendResponse(response);
		});
	}
});
var Connection = function(socket) {
	this.nextRequestId = 1;
	this.socket = socket;
	this.buffer = new js_node_buffer_Buffer(4096);
	this.index = 0;
	this.nextMessageLength = -1;
	this.callbacks = new haxe_ds_IntMap();
	socket.on("data",$bind(this,this.onData));
};
Connection.__name__ = true;
Connection.prototype = {
	append: function(data) {
		if(this.buffer.length - this.index >= data.length) {
			data.copy(this.buffer,this.index,0,data.length);
		} else {
			var newSize = (Math.ceil((this.index + data.length) / 4096) + 1) * 4096;
			if(this.index == 0) {
				this.buffer = new js_node_buffer_Buffer(newSize);
				data.copy(this.buffer,0,0,data.length);
			} else {
				this.buffer = js_node_buffer_Buffer.concat([this.buffer.slice(0,this.index),data],newSize);
			}
		}
		this.index += data.length;
	}
	,onData: function(data) {
		this.append(data);
		while(true) {
			if(this.nextMessageLength == -1) {
				if(this.index < 4) {
					return;
				}
				this.nextMessageLength = this.buffer.readInt32LE(0);
				this.index -= 4;
				this.buffer.copy(this.buffer,0,4);
			}
			if(this.index < this.nextMessageLength) {
				return;
			}
			var bytes = this.buffer.toString("utf-8",0,this.nextMessageLength);
			this.buffer.copy(this.buffer,0,this.nextMessageLength);
			this.index -= this.nextMessageLength;
			this.nextMessageLength = -1;
			var json = JSON.parse(bytes);
			this.onMessage(json);
		}
	}
	,onEvent: function(type,data) {
	}
	,onMessage: function(msg) {
		if(msg.id == null) {
			var this1 = msg.method;
			this.onEvent(this1,msg.params);
		} else {
			var callback = this.callbacks.h[msg.id];
			if(callback != null) {
				this.callbacks.remove(msg.id);
				callback(msg.error,msg.result);
			}
		}
	}
	,sendCommand: function(name,params,callback) {
		var requestId = this.nextRequestId++;
		var cmd = JSON.stringify({ id : requestId, method : name, params : params});
		var body = js_node_buffer_Buffer.from(cmd,"utf-8");
		var header = js_node_buffer_Buffer.alloc(4);
		if(callback != null) {
			this.callbacks.h[requestId] = callback;
		}
		header.writeInt32LE(body.length,0);
		this.socket.write(header);
		this.socket.write(body);
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var adapter_StoppedEvent = require("vscode-debugadapter").StoppedEvent;
var adapter_InitializedEvent = require("vscode-debugadapter").InitializedEvent;
var adapter_TerminatedEvent = require("vscode-debugadapter").TerminatedEvent;
var adapter_OutputEvent = require("vscode-debugadapter").OutputEvent;
var adapter_ThreadEvent = require("vscode-debugadapter").ThreadEvent;
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
var hxcpp_debug_jsonrpc__$Protocol_RequestMethod_$Impl_$ = {};
hxcpp_debug_jsonrpc__$Protocol_RequestMethod_$Impl_$.__name__ = true;
hxcpp_debug_jsonrpc__$Protocol_RequestMethod_$Impl_$._new = function(method) {
	var this1 = method;
	return this1;
};
var hxcpp_debug_jsonrpc__$Protocol_NotificationMethod_$Impl_$ = {};
hxcpp_debug_jsonrpc__$Protocol_NotificationMethod_$Impl_$.__name__ = true;
hxcpp_debug_jsonrpc__$Protocol_NotificationMethod_$Impl_$._new = function(method) {
	var this1 = method;
	return this1;
};
var hxcpp_debug_jsonrpc_Protocol = function() { };
hxcpp_debug_jsonrpc_Protocol.__name__ = true;
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if((o instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_ChildProcess = require("child_process");
var js_node_Net = require("net");
var js_node_buffer_Buffer = require("buffer").Buffer;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
Connection.DEFAULT_BUFFER_SIZE = 4096;
hxcpp_debug_jsonrpc_Protocol.Pause = "pause";
hxcpp_debug_jsonrpc_Protocol.Continue = "continue";
hxcpp_debug_jsonrpc_Protocol.StepIn = "stepIn";
hxcpp_debug_jsonrpc_Protocol.Next = "next";
hxcpp_debug_jsonrpc_Protocol.StepOut = "stepOut";
hxcpp_debug_jsonrpc_Protocol.StackTrace = "stackTrace";
hxcpp_debug_jsonrpc_Protocol.SetBreakpoints = "setBreakpoints";
hxcpp_debug_jsonrpc_Protocol.SetBreakpoint = "setBreakpoint";
hxcpp_debug_jsonrpc_Protocol.RemoveBreakpoint = "removeBreakpoint";
hxcpp_debug_jsonrpc_Protocol.SwitchFrame = "switchFrame";
hxcpp_debug_jsonrpc_Protocol.GetScopes = "getScopes";
hxcpp_debug_jsonrpc_Protocol.GetVariables = "getVariables";
hxcpp_debug_jsonrpc_Protocol.SetVariable = "setVariable";
hxcpp_debug_jsonrpc_Protocol.Threads = "threads";
hxcpp_debug_jsonrpc_Protocol.Evaluate = "evaluate";
hxcpp_debug_jsonrpc_Protocol.Completions = "completions";
hxcpp_debug_jsonrpc_Protocol.SetExceptionOptions = "setExceptionOptions";
hxcpp_debug_jsonrpc_Protocol.BreakpointStop = "breakpointStop";
hxcpp_debug_jsonrpc_Protocol.ExceptionStop = "exceptionStop";
hxcpp_debug_jsonrpc_Protocol.PauseStop = "pauseStop";
hxcpp_debug_jsonrpc_Protocol.ThreadStart = "threadStart";
hxcpp_debug_jsonrpc_Protocol.ThreadExit = "ThreadExit";
Adapter.main();
})();
